Function Name,State Variables Modified,Can Transfer Ether
initialize(address),,False
"hasPermission(address,address,bytes32,bytes)",,False
transferToVault(address),,False
allowRecoverability(address),,False
getRecoveryVault(),,False
acl(),,False
"hasPermission(address,address,bytes32,bytes)",,False
"setApp(bytes32,bytes32,address)",,False
"getApp(bytes32,bytes32)",,False
proxyType(),,False
implementation(),,False
getInitializationBlock(),INITIALIZATION_BLOCK_POSITION,False
hasInitialized(),,False
isPetrified(),PETRIFIED_BLOCK,False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
transferToVault(address),"ERROR_DISALLOWED, vault, ERROR_VAULT_NOT_CONTRACT, ETH, vault, vault",True
allowRecoverability(address),,False
getRecoveryVault(),,False
kernel(),KERNEL_POSITION,False
appId(),APP_ID_POSITION,False
isDepositable(),DEPOSITABLE_POSITION,False
"function()externalpayable{if(gasleft()<FWD_GAS_LIMIT){require(msg.value>0&&msg.data.length==0);require(isDepositable());emitProxyDeposit(msg.sender,msg.value);}else{addresstarget=implementation();delegatedFwd(target,msg.data);}}()",FWD_GAS_LIMIT,True
"constructor(,bytes32,bytes)",,True
"constructor(,bytes32,bytes)",,False
implementation(),,False
proxyType(),UPGRADEABLE,False
"constructor(,bytes32,bytes)",,False
implementation(),,False
proxyType(),FORWARDING,False
"newAppProxy(,bytes32)",,False
"newAppProxy(,bytes32,bytes)",,False
"newAppProxyPinned(,bytes32)",,False
"newAppProxyPinned(,bytes32,bytes)",,False
constructor(bool),,False
"initialize(,address)","KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, KERNEL_DEFAULT_ACL_APP_ID, KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, recoveryVaultAppId, KERNEL_DEFAULT_VAULT_APP_ID",False
"newAppInstance(bytes32,address)",,False
"newAppInstance(bytes32,address,bytes,bool)","KERNEL_APP_BASES_NAMESPACE, KERNEL_APP_ADDR_NAMESPACE",False
"newPinnedAppInstance(bytes32,address)",,False
"newPinnedAppInstance(bytes32,address,bytes,bool)","KERNEL_APP_BASES_NAMESPACE, KERNEL_APP_ADDR_NAMESPACE",False
"setApp(bytes32,bytes32,address)",,False
setRecoveryVaultAppId(bytes32),recoveryVaultAppId,False
CORE_NAMESPACE(),KERNEL_CORE_NAMESPACE,False
APP_BASES_NAMESPACE(),KERNEL_APP_BASES_NAMESPACE,False
APP_ADDR_NAMESPACE(),KERNEL_APP_ADDR_NAMESPACE,False
KERNEL_APP_ID(),KERNEL_CORE_APP_ID,False
DEFAULT_ACL_APP_ID(),KERNEL_DEFAULT_ACL_APP_ID,False
"getApp(bytes32,bytes32)",apps,False
getRecoveryVault(),"apps, KERNEL_APP_ADDR_NAMESPACE, recoveryVaultAppId",False
acl(),"KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID",False
"hasPermission(address,address,bytes32,bytes)",,False
constructor(),"apps, KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID",False
proxyType(),UPGRADEABLE,False
implementation(),"apps, KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID",False
constructor(),,False
"execScript(bytes,bytes,)",,False
executorType(),,False
addScriptExecutor(),,False
disableScriptExecutor(uint256),,False
getScriptExecutor(bytes),,False
getEVMScriptExecutor(bytes),,False
getEVMScriptRegistry(),"KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID",False
"canPerform(address,bytes32,)",,True
getRecoveryVault(),,False
"canPerform(address,address,bytes32,)",,False
initialize(address),"ERROR_AUTH_INIT_KERNEL, CREATE_PERMISSIONS_ROLE",True
"createPermission(address,address,bytes32,address)",,False
"grantPermission(address,address,bytes32)",,False
"grantPermissionP(address,address,bytes32,)",EMPTY_PARAM_HASH,False
"revokePermission(address,address,bytes32)",NO_PERMISSION,False
"setPermissionManager(address,address,bytes32)",,False
"removePermissionManager(address,bytes32)",,False
"createBurnedPermission(address,bytes32)",BURN_ENTITY,False
"burnPermissionManager(address,bytes32)",BURN_ENTITY,False
"getPermissionParamsLength(address,address,bytes32)","permissionParams, permissions",False
"getPermissionParam(address,address,bytes32,uint)","permissionParams, permissions",False
"getPermissionManager(address,bytes32)",permissionManager,False
"hasPermission(address,address,bytes32,bytes)",,False
"hasPermission(address,address,bytes32,)","permissions, NO_PERMISSION, permissions, ANY_ENTITY, NO_PERMISSION, ANY_ENTITY",False
"hasPermission(address,address,bytes32)",,False
"evalParams(bytes32,address,address,bytes32,)",EMPTY_PARAM_HASH,False
initialize(),executorsNextIndex,False
addScriptExecutor(),"executorsNextIndex, executors",False
disableScriptExecutor(uint256),"executors, ERROR_EXECUTOR_DISABLED",False
enableScriptExecutor(uint256),"executors, ERROR_EXECUTOR_ENABLED",False
getScriptExecutor(bytes),executors,False
"execScript(bytes,bytes,)","SCRIPT_START_LOCATION, ERROR_BLACKLISTED_CALL, ERROR_INVALID_LENGTH, ERROR_CALL_REVERTED",True
executorType(),EXECUTOR_TYPE,False
constructor(),"baseReg, baseCallScript",False
newEVMScriptRegistry(),"EVMSCRIPT_REGISTRY_APP_ID, baseReg, baseCallScript",False
"constructor(,,)","regFactory, baseKernel, baseACL",False
newDAO(address),"baseKernel, regFactory, baseACL, baseACL, regFactory, regFactory, regFactory, regFactory, regFactory",False
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
Controlled(),controller,True
changeController(address),controller,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(,,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()externalpayable{require(isContract(controller));require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender)==true);}(),"controller, controller",True
claimTokens(address),"controller, token, token, controller, controller",True
"createCloneToken(,uint,string,uint8,string,bool)",,True
"register(bytes32,address)",,False
"registerWithResolver(bytes32,address,)",,False
isForwarder(),,False
"canForward(address,bytes)",,False
forward(bytes),,False
"initialize(,uint64,uint64,uint64)","ERROR_INIT_PCTS, PCT_BASE, ERROR_INIT_SUPPORT_TOO_BIG, token, supportRequiredPct, minAcceptQuorumPct, voteTime",False
changeSupportRequiredPct(uint64),"minAcceptQuorumPct, ERROR_CHANGE_SUPPORT_PCTS, PCT_BASE, ERROR_CHANGE_SUPPORT_TOO_BIG, supportRequiredPct",False
changeMinAcceptQuorumPct(uint64),"supportRequiredPct, ERROR_CHANGE_QUORUM_PCTS, minAcceptQuorumPct",False
"newVote(bytes,string)",,False
"newVote(bytes,string,bool,bool)",,False
"vote(uint256,bool,bool)",ERROR_CAN_NOT_VOTE,True
executeVote(uint256),ERROR_CAN_NOT_EXECUTE,False
isForwarder(),,False
forward(bytes),ERROR_CAN_NOT_FORWARD,True
"canForward(address,bytes)",CREATE_VOTES_ROLE,True
"canVote(uint256,address)","votes, token",False
canExecute(uint256),votes,False
getVote(uint256),votes,False
"getVoterState(uint256,address)",votes,False
"function()externalpayableisInitialized{require(msg.data.length==0,ERROR_DATA_NON_ZERO);_deposit(ETH,msg.value);}()","ERROR_DATA_NON_ZERO, ETH",False
initialize(),,False
"deposit(address,uint256)",,False
"transfer(address,address,uint256)","ERROR_TRANSFER_VALUE_ZERO, ETH, ERROR_SEND_REVERTED, ERROR_TOKEN_TRANSFER_REVERTED",True
balance(address),ETH,False
allowRecoverability(address),,False
"initialize(,bool,uint256)","ERROR_TOKEN_CONTROLLER, token, maxAccountTokens, token, token",True
"mint(address,uint256)",ERROR_MINT_BALANCE_INCREASE_NOT_ALLOWED,False
issue(uint256),,False
"assign(address,uint256)",,False
"burn(address,uint256)",token,False
"assignVested(address,uint256,uint64,uint64,uint64,bool)","vestingsLengths, MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS, ERROR_WRONG_CLIFF_DATE, vestingsLengths, vestings",False
"revokeVesting(address,uint256)","vestings, ERROR_VESTING_NOT_REVOKABLE, vestings, token, ERROR_REVOKE_TRANSFER_FROM_REVERTED",True
forward(bytes),"ERROR_CAN_NOT_FORWARD, token",True
isForwarder(),,False
"canForward(address,bytes)",token,True
"getVesting(address,uint256)",vestings,False
"onTransfer(address,address,uint)","token, ERROR_ON_TRANSFER_WRONG_SENDER",True
proxyPayment(address),"token, ERROR_PROXY_PAYMENT_WRONG_SENDER",True
"onApprove(address,address,uint)",,False
spendableBalanceOf(address),,True
"transferableBalance(address,uint256)","vestingsLengths, vestings, token",False
allowRecoverability(address),token,False
"function()externalpayableisInitializedtransitionsPeriod{_deposit(ETH,msg.value,""Ether transfer to Finance app"",msg.sender,true);}()",ETH,True
"initialize(,uint64)","ERROR_VAULT_NOT_CONTRACT, vault, ERROR_INIT_PERIOD_TOO_SHORT, settings, payments, paymentsNextIndex, transactionsNextIndex",False
"deposit(address,uint256,string)",,True
"newPayment(address,address,uint256,uint64,uint64,uint64,string)","ERROR_NEW_PAYMENT_AMOUNT_ZERO, NO_PAYMENT, settings, settings, ERROR_BUDGET, paymentsNextIndex, payments",True
setPeriodDuration(uint64),"ERROR_SET_PERIOD_TOO_SHORT, settings",False
"setBudget(address,uint256)","settings, settings, settings",False
removeBudget(address),"settings, settings",False
executePayment(uint256),ERROR_EXECUTE_PAYMENT_TIME,False
receiverExecutePayment(uint256),"ERROR_RECEIVER_EXECUTE_PAYMENT_TIME, payments, ERROR_PAYMENT_RECEIVER",True
"setPaymentStatus(uint256,bool)",payments,False
recoverToVault(address),"ETH, ERROR_RECOVER_AMOUNT_ZERO",False
tryTransitionAccountingPeriod(uint64),,False
allowRecoverability(address),,False
getPayment(uint256),"payments, token",False
getTransaction(uint256),"transactions, token",False
getPeriod(uint64),periods,False
"getPeriodTokenStatement(uint64,address)",periods,False
nextPaymentTime(uint256),"payments, MAX_UINT64",False
getPeriodDuration(),settings,False
getBudget(address),"settings, settings",False
getRemainingBudget(address),,False
currentPeriodId(),,False
initialize(),versionsNextIndex,False
"newVersion(,address,bytes)","versionsNextIndex, versions, ERROR_INVALID_VERSION, ERROR_INVALID_BUMP, versionsNextIndex, versions, versionIdForSemantic, latestVersionIdForContract",False
getLatest(),versionsNextIndex,False
getLatestForContractAddress(address),latestVersionIdForContract,False
getBySemanticVersion(),versionIdForSemantic,False
getByVersionId(uint),"versionsNextIndex, ERROR_INEXISTENT_VERSION, versions, version, version, version",False
getVersionsCount(),versionsNextIndex,False
"isValidBump(,)",,False
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
"setOwner(bytes32,address)",,False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
ENS(),,True
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
"setOwner(bytes32,address)",,False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
PublicResolver(),ens,False
supportsInterface(bytes4),,False
addr(bytes32),,False
"setAddr(bytes32,address)",,False
content(bytes32),,False
"setContent(bytes32,bytes32)",,False
name(bytes32),,False
"setName(bytes32,string)","name, name",False
"ABI(bytes32,uint256)",,False
"setABI(bytes32,uint256,bytes)",,False
pubkey(bytes32),,False
"setPubkey(bytes32,bytes32,bytes32)",,False
"text(bytes32,string)",,False
"setText(bytes32,string,string)",,False
latestVersionAppBase(bytes32),ens,False
"constructor(,,,,)","minimeFac, aragonID, appIds",False
"constructor(,,,,)",,False
"newTokenAndInstance(string,string,,uint256)","name, symbol, name",False
"newToken(string,string)","token, minimeFac, name, symbol, token",True
"newInstance(string,,uint256)","name, token, token",True
