Function Name,State Variables Modified,Can Transfer Ether
"safeAdd(uint,uint)",,False
"safeSub(uint,uint)",,False
"safeMul(uint,uint)",,False
"safeDiv(uint,uint)",,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"allowance(address,address)",,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve(address,uint)",,True
"allowance(address,address)",,False
burn(uint256),"totalSupply, totalSupply",True
"burnFrom(address,uint256)","totalSupply, totalSupply",True
CryptonCoin(),"fundsWallet, name, symbol, decimals, fundsWallet, totalSupply, preIcoTotalSupply, IcoTotalSupply, maxSupply, unitsOneEthCanBuy, preIcoFinishTimestamp, fundingEndTime, finalTokensIssueTime, contractAddress",True
"function()publicpayable{require(!ico_finish);require(block.timestamp<fundingEndTime);require(msg.value!=0);totalEthInWei=totalEthInWei+msg.value;uint256amount=0;uint256tokenPrice=unitsOneEthCanBuy;if(block.timestamp<preIcoFinishTimestamp){require(msg.value*tokenPrice*13/10<=(preIcoTotalSupply-preIcoSupply));tokenPrice=safeMul(tokenPrice,13);tokenPrice=safeDiv(tokenPrice,10);amount=safeMul(msg.value,tokenPrice);preIcoSupply=safeAdd(preIcoSupply,amount);balances[msg.sender]=safeAdd(balances[msg.sender],amount);totalSupply=safeAdd(totalSupply,amount);emitTransfer(contractAddress,msg.sender,amount);}else{require(msg.value*tokenPrice<=(IcoTotalSupply-IcoSupply));amount=safeMul(msg.value,tokenPrice);IcoSupply=safeAdd(IcoSupply,amount);balances[msg.sender]=safeAdd(balances[msg.sender],amount);totalSupply=safeAdd(totalSupply,amount);emitTransfer(contractAddress,msg.sender,amount);}}()","ico_finish, fundingEndTime, totalEthInWei, totalEthInWei, unitsOneEthCanBuy, preIcoFinishTimestamp, preIcoTotalSupply, preIcoSupply, preIcoSupply, preIcoSupply, totalSupply, totalSupply, contractAddress, IcoTotalSupply, IcoSupply, IcoSupply, IcoSupply, totalSupply, totalSupply, contractAddress",True
withdraw(),"fundsWallet, fundsWallet, contractAddress",True
createTokensForCrypton(),"ico_finish, token_was_created, finalTokensIssueTime, preIcoSupply, IcoSupply, fundsWallet, fundsWallet, totalSupply, totalSupply, contractAddress, fundsWallet, token_was_created",False
stopIco(),"fundingEndTime, ico_finish",False
setTokenPrice(uint256),"fundsWallet, unitsOneEthCanBuy",True
