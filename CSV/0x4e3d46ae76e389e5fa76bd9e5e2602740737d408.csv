Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
burnReputation(uint),,False
incrementReputation(uint),,False
initLocalNodeReputation(address),,False
initCommunityReputation(address),,False
getCommunityReputation(address),,False
getLocalNodeReputation(address),,False
constructor(address),ethicHubStorage,False
pause(),paused,False
unpause(),paused,False
"constructor(uint256,uint256,address,uint256,uint256,uint256,address,address,address)","fundingStartTime, ethicHubStorage, ethicHubStorage, version, fundingStartTime, fundingEndTime, localNode, ethicHubTeam, borrower, annualInterest, totalLendingAmount, lendingDays, state",False
"saveInitialParametersToStorage(uint256,uint256,uint256,address)","state, ethicHubStorage, ethicHubStorage, ethicHubStorage, ethicHubStorage, localNode, ethicHubStorage, ethicHubStorage, tier, state, state",False
function()publicpayablewhenNotPaused{require(state==LendingState.AwaitingReturn||state==LendingState.AcceptingContributions||state==LendingState.ExchangingToFiat);if(state==LendingState.AwaitingReturn){returnBorrowedEth();}elseif(state==LendingState.ExchangingToFiat){sendBackSurplusEth();}else{contributeWithAddress(msg.sender);}}(),"state, state, state, state, state",True
declareProjectNotFunded(),"totalContributed, totalLendingAmount, state, fundingEndTime, state, state",False
declareProjectDefault(),"state, ethicHubStorage, ethicHubStorage, state, state",False
setBorrowerReturnEthPerFiatRate(uint256),"state, borrowerReturnEthPerFiatRate, borrowerReturnEthPerFiatRate",False
finishInitialExchangingPeriod(uint256),"capReached, state, initialEthPerFiatRate, surplusEth, totalLendingAmount, totalLendingAmount, surplusEth, totalLendingFiatAmount, totalLendingAmount, initialEthPerFiatRate, initialEthPerFiatRate, state, state",False
reclaimContributionDefault(address),"state, investors, investors",True
reclaimContribution(address),"state, investors, investors, investors",True
reclaimSurplusEth(address),"surplusEth, state, investors, investors, surplusEth, surplusEth, totalLendingAmount, investors",True
reclaimContributionWithInterest(address),"state, investors, investors",True
reclaimLocalNodeFee(),"state, localNodeFeeReclaimed, totalLendingFiatAmount, localNodeFee, interestBaseUint, interestBasePercent, borrowerReturnEthPerFiatRate, localNodeFeeReclaimed, localNode",True
reclaimEthicHubTeamFee(),"state, ethicHubTeamFeeReclaimed, totalLendingFiatAmount, ethichubFee, interestBaseUint, interestBasePercent, borrowerReturnEthPerFiatRate, ethicHubTeamFeeReclaimed, ethicHubTeam",True
sendFundsToBorrower(),"state, capReached, state, state, borrower, totalContributed",True
getDelayDays(uint),"lendingDays, fundingEndTime",False
lendingInterestRatePercentage(),"annualInterest, interestBaseUint, lendingDays, localNodeFee, interestBaseUint, ethichubFee, interestBaseUint, interestBasePercent",False
investorInterest(),"annualInterest, interestBaseUint, lendingDays, interestBasePercent",False
borrowerReturnFiatAmount(),"totalLendingFiatAmount, interestBasePercent",False
borrowerReturnAmount(),borrowerReturnEthPerFiatRate,False
isContribPeriodRunning(),"fundingStartTime, fundingEndTime, capReached",False
checkInvestorContribution(address),investors,False
checkInvestorReturns(address),"state, investors, surplusEth, investors, totalLendingAmount, totalContributed, initialEthPerFiatRate, borrowerReturnEthPerFiatRate, interestBasePercent, state, investors, returnedEth, totalLendingAmount",False
getMaxDelayDays(),ethicHubStorage,False
"setAddress(bytes32,address)",,False
"setUint(bytes32,uint)",,False
"setString(bytes32,string)",,False
"setBytes(bytes32,bytes)",,False
"setBool(bytes32,bool)",,False
"setInt(bytes32,int)",,False
deleteAddress(bytes32),,False
deleteUint(bytes32),,False
deleteString(bytes32),,False
deleteBytes(bytes32),,False
deleteBool(bytes32),,False
deleteInt(bytes32),,False
getAddress(bytes32),,False
getUint(bytes32),,False
getString(bytes32),,False
getBytes(bytes32),,False
getBool(bytes32),,False
getInt(bytes32),,False
