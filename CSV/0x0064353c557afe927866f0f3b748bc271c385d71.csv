Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
updateHouseFee(uint8),houseFee,False
updateMinContribution(uint256),minContribution,False
updateMaxContribution(uint256),maxContribution,False
updateRequiredEntries(uint16),requiredEntries,False
updateRequiredTimeBetweenDraws(uint256),requiredTimeBetweenDraws,False
updateMaxBonusTickets(uint256),maxBonusTickets,False
updateBonusTicketsPercentage(uint8),bonusTicketsPercentage,False
updateStopGameOnNextRound(bool),stopGameOnNextRound,False
restartGame(),gameRunning,False
updateMinGasForDrawing(uint32),minGasForDrawing,False
updateMinGasPriceForDrawing(uint32),minGasPriceForDrawing,False
updateRngAddress(address),"rngAddress, rngAddress",False
updateRewardForDrawing(uint256),rewardForDrawing,False
function()publicpayable{require(!isContract(msg.sender));require(gameRunning);require(msg.value>=ticketPrice);uint256existingBalance=currentLottery().balances[msg.sender];require(msg.value+existingBalance>=minContribution);require(msg.value+existingBalance<=maxContribution);updatePlayerBalance(currentLotteryId);if(mustDraw()&&gasRequirementsOk()){draw();}}(),"gameRunning, ticketPrice, minContribution, maxContribution, currentLotteryId",True
"acceptRandom(bytes32,bytes)","useOraclize, ticketPrice, currentLotteryId",False
withdrawFromFailedLottery(uint32),lotteries,True
houseTopUp(),"houseBalance, houseBalance",False
houseWithdraw(),"owner, houseBalance",True
manualDraw(),"lastDrawTs, MANUAL_WITHDRAW_INTERVAL, currentLotteryId",False
"balanceInLottery(uint32,address)",lotteries,False
participantsOf(uint32),lotteries,False
oraclizeIds(uint32),lotteries,False
