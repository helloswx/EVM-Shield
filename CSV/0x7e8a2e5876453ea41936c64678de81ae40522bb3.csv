Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
transferOwnership(address),pendingOwner,False
claimOwnership(),"owner, pendingOwner, owner, pendingOwner, pendingOwner",False
pause(),paused,False
unpause(),paused,False
balanceOf(address),,False
ownerOf(uint256),,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
takeOwnership(uint256),,False
totalSupply(),totalTokens,False
balanceOf(address),ownedTokens,False
tokensOf(address),ownedTokens,False
ownerOf(uint256),"tokenOwner, owner, owner",False
approvedFor(uint256),tokenApprovals,False
"transfer(address,uint256)",,True
"approve(address,uint256)","owner, tokenApprovals, owner",False
takeOwnership(uint256),,True
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
totalSupply(),,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
grantAccessDeposit(address),depositAccess,False
revokeAccessDeposit(address),depositAccess,False
grantAccessDeploy(address),deployAccess,False
revokeAccessDeploy(address),deployAccess,False
grantAccessMint(address),mintAccess,False
revokeAccessMint(address),mintAccess,False
"mint(address,uint256)",,False
setCryptoSagaCardSwapContract(address),swapContract,False
rankOf(uint256),tokenIdToRank,False
"mint(address,uint256,uint8)","numberOfTokenId, tokenIdToRank, numberOfTokenId, numberOfTokenId",False
swap(uint256),"swapContract, tokenIdToRank, swapContract",False
setCardContract(address),cardAddess,False
"swapCardForReward(address,uint8)",,False
getClassInfo(uint32),heroClasses,False
getClassName(uint32),heroClasses,False
getClassRank(uint32),heroClasses,False
getClassMintCount(uint32),heroClasses,False
getHeroInfo(uint256),tokenIdToHeroInstance,False
getHeroClassId(uint256),tokenIdToHeroInstance,False
getHeroName(uint256),tokenIdToHeroInstance,False
getHeroLevel(uint256),tokenIdToHeroInstance,False
getHeroLocation(uint256),tokenIdToHeroInstance,False
getHeroAvailableAt(uint256),tokenIdToHeroInstance,False
getHeroBP(uint256),tokenIdToHeroInstance,False
getHeroRequiredGoldForLevelUp(uint256),"tokenIdToHeroInstance, requiredGoldIncreaseFactor",False
getHeroRequiredExpForLevelUp(uint256),"tokenIdToHeroInstance, requiredExpIncreaseFactor",False
getGoldDepositOfAddress(address),addressToGoldDeposit,False
"getTokenIdOfAddressAndIndex(address,uint256)",,False
getTotalBPOfAddress(address),,False
"setHeroName(uint256,string)",tokenIdToHeroInstance,False
setGoldContract(address),goldContract,False
setRequiredExpIncreaseFactor(uint32),requiredExpIncreaseFactor,False
setRequiredGoldIncreaseFactor(uint256),requiredGoldIncreaseFactor,False
CryptoSagaHero(address),,False
"defineType(string,uint8,uint8,uint32,uint8,uint32,uint8,,,)","heroClasses, numberOfHeroClasses, numberOfHeroClasses, numberOfHeroClasses",True
"mint(address,uint32)","numberOfHeroClasses, heroClasses, numberOfTokenIds, tokenIdToHeroInstance, numberOfTokenIds, numberOfTokenIds, numberOfTokenIds",False
"deploy(uint256,uint32,uint256)",tokenIdToHeroInstance,True
"addExp(uint256,uint32)",tokenIdToHeroInstance,False
"addDeposit(address,uint256)",addressToGoldDeposit,False
levelUp(uint256),"tokenIdToHeroInstance, heroClasses, addressToGoldDeposit, addressToGoldDeposit",True
transferDeposit(uint256),"goldContract, goldContract, addressToGoldDeposit",True
withdrawDeposit(uint256),"addressToGoldDeposit, goldContract, addressToGoldDeposit",True
CryptoSagaCorrectedHeroStats(address),heroContract,False
getCorrectedStats(uint256),heroContract,False
getCorrectedTotalBPOfAddress(address),"heroContract, heroContract, heroContract",False
getCorrectedTotalBPOfTokens(),heroContract,False
"getProgressOfAddressAndId(address,uint32)",addressToProgress,False
"incrementProgressOfAddressAndId(address,uint32)","addressToProgress, addressToProgress",False
getEnemyCombinationOfAddress(address),"addressToEnemyCombination, initialEnemyCombination",False
getInitialEnemyCombination(),initialEnemyCombination,False
getLastPlayDateTime(address),addressToPlayRecordDateTime,False
getPlayRecord(address),"addressToPlayRecord, addressToTurnInfo",False
getPlayRecordNoTurnData(address),addressToPlayRecord,False
setLocationId(uint32),locationId,False
setCoolDungeon(uint32),coolDungeon,False
setCoolHero(uint32),coolHero,False
setExpReward(uint32),expReward,False
setGoldReward(uint256),goldReward,False
setIsTurnDataSaved(bool),isTurnDataSaved,False
setInitialEnemyCombination(),"initialEnemyCombination, initialEnemyCombination",False
setPreviousDungeoonId(uint32),previousDungeonId,False
setRequiredProgressOfPreviousDungeon(uint32),requiredProgressOfPreviousDungeon,False
setPossibleMobs(),possibleMobClasses,False
"CryptoSagaDungeonVer1(address,address,address,address,address,uint32,uint256,uint256,uint32,uint256,uint32,uint32,,bool)","progressContract, heroContract, correctedHeroContract, cardContract, goldContract, locationId, coolDungeon, coolHero, expReward, goldReward, previousDungeonId, requiredProgressOfPreviousDungeon, initialEnemyCombination, initialEnemyCombination, isTurnDataSaved",False
"enterDungeon(,uint32)","requiredProgressOfPreviousDungeon, progressContract, previousDungeonId, requiredProgressOfPreviousDungeon, progressContract, locationId, addressToPlayRecordDateTime, coolDungeon, addressToPlayRecordDateTime, seed, seed, heroContract, correctedHeroContract, heroContract, heroContract, correctedHeroContract, heroContract, heroContract, correctedHeroContract, heroContract, heroContract, correctedHeroContract, heroContract, addressToEnemyCombination, initialEnemyCombination, heroContract, heroContract, heroContract, heroContract, heroContract, locationId, coolHero, heroContract, locationId, coolHero, heroContract, locationId, coolHero, heroContract, locationId, coolHero, progressContract, locationId, progressContract, locationId, progressContract, locationId, cardContract, progressContract, locationId, addressToPlayRecord, isTurnDataSaved, addressToTurnInfo",True
