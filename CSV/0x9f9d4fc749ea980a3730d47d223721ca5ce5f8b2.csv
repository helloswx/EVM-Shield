Function Name,State Variables Modified,Can Transfer Ether
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
"tokenFallback(address,uint)",,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve(address,uint)",,True
"allowance(address,address)",,False
"addApproval(address,uint)",,True
"subApproval(address,uint)",,True
burn(uint),"totalSupply, totalSupply",True
isUpgradeAgent(),,False
"upgradeFrom(address,uint256)",,False
UpgradeableToken(address),upgradeMaster,False
upgrade(uint256),"totalSupply, totalSupply, totalUpgraded, totalUpgraded, upgradeAgent, upgradeAgent",True
setUpgradeAgent(address),"upgradeMaster, upgradeAgent, upgradeAgent, upgradeAgent, totalSupply, upgradeAgent",True
getUpgradeState(),"upgradeAgent, totalUpgraded",False
setUpgradeMaster(address),"upgradeMaster, upgradeMaster",True
canUpgrade(),,False
transferOwnership(address),owner,False
"SQDFiniteToken(address,string,string,uint,uint8)","name, symbol, totalSupply, decimals, owner",False
"transferPrivileged(address,uint)","previligedBalances, previligedBalances",True
getPrivilegedBalance(address),previligedBalances,False
"transferFromPrivileged(address,address,uint)","previligedBalances, previligedBalances",False
"InitialSaleSQD(uint,uint,uint,uint,uint,)","beneficiary, preICOSaleStart, ICOSaleStart, ICOSaleEnd, preICOPrice, ICOPrice, tokenReward",True
"function()payablepublic{if(now<preICOSaleStart)revert();if(now>=ICOSaleEnd)revert();uintprice=preICOPrice;if(now>=ICOSaleStart){price=ICOPrice;}uintamount=msg.value;if(amount<price)revert();amountRaised+=amount;uintpayoutPerPrice=10**uint(tokenReward.decimals()-8);uintunits=amount/price;uinttokensToSend=units*payoutPerPrice;tokenReward.transfer(msg.sender,tokensToSend);}()","preICOSaleStart, ICOSaleEnd, preICOPrice, ICOSaleStart, ICOPrice, amountRaised, tokenReward, tokenReward",True
transferOwnership(address),beneficiary,False
WithdrawETH(uint),beneficiary,True
WithdrawAllETH(),"beneficiary, amountRaised",True
WithdrawTokens(uint),"tokenReward, beneficiary",True
"ChangeCost(uint,uint)","preICOPrice, ICOPrice",False
ChangePreICOStart(uint),preICOSaleStart,False
ChangeICOStart(uint),ICOSaleStart,False
ChangeICOEnd(uint),ICOSaleEnd,False
"tokenFallback(address,uint)",incomingTokensTransactions,False
