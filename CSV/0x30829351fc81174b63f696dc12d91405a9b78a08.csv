Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
changeOwner(address),"owner, owner",False
"isWinner(uint,uint)",tickets,False
"getBalancePlayer(uint,address)",balancePlayer,False
"getBalanceWinner(uint,address)",balanceWinner,False
"ticketInfo(uint,uint)",tickets,False
"newTicket(uint,address,uint)","countTickets, tickets, countTickets, balancePlayer, balancePlayer",False
clearRound(uint),"countTickets, stepEntropy, remainStepTS, countStepTS",False
"makeDistribution(uint,uint)","countTickets, happyTickets, happyTickets",False
getCountTickets(uint),countTickets,False
"getCountTwist(uint,uint)","remainStepTS, countStepTS",False
"getMemberArrayHappyTickets(uint,uint)",happyTickets,False
getLengthArrayHappyTickets(uint),happyTickets,False
getStepTransfer(),"countStepTS, remainStepTS",False
getCountWinnersDistrib(uint),"countWinnerRound_1, countWinnerRound_2, countWinnerRound_3, countWinnerRound_4, countWinnerRound_5",False
getPayEachWinnersDistrib(uint),"payEachWinner_1, payEachWinner_2, payEachWinner_3, payEachWinner_4, payEachWinner_5",False
"addBalanceWinner(uint,uint,uint)","balanceWinner, tickets, balanceWinner, tickets",False
"setWinnerRountForTicket(uint,uint,uint)",tickets,False
"addHappyNumber(uint,uint,uint)",happyTickets,False
findHappyNumber(uint),"stepEntropy, stepEntropy, tickets, stepEntropy, countTickets",False
"getRandomNumberTicket(uint,uint)","countTickets, countTickets",True
constructor(address),"administrationWallet, m_tickets, currentRound, m_tickets, currentRound",False
"function()externalpayable{if(msg.value>=PRICE_OF_TOKEN){buyTicket(msg.sender);}elseif(msg.value.isZero()){makeTwists();}else{refundEth(msg.sender,msg.value);}}()",PRICE_OF_TOKEN,True
"getMemberArrayHappyTickets(uint,uint)",m_tickets,False
getLengthArrayHappyTickets(uint),m_tickets,False
"getTicketInfo(uint,uint)",m_tickets,False
getCountWinnersDistrib(),"m_tickets, currentRound",False
getPayEachWinnersDistrib(),"m_tickets, currentRound",False
getStepTransfer(),m_tickets,False
balanceETH(),,False
buyTicket(address),"PRICE_OF_TOKEN, isTwist, PRICE_OF_TOKEN, tickets, MAX_TOKENS_BUY, tickets, MAX_TOKENS_BUY, tickets, PRICE_OF_TOKEN, tickets, tickets, m_tickets, currentRound, PRICE_OF_TOKEN, currentRound, totalTicketBuyed, tickets, notUnigue, notUnigue, uniquePlayer, totalEthRaised, totalEthRaised",True
makeTwists(),"m_tickets, currentRound, countTickets, MIN_TICKETS_BUY_FOR_ROUND, isTwist, numberCurrentTwist, m_tickets, countTickets, maxNumberStepCircle, m_tickets, currentRound, PRICE_OF_TOKEN, isTwist, numberCurrentTwist, currentRound, maxNumberStepCircle, currentRound, numberCurrentTwist, numberCurrentTwist, numberCurrentTwist, isTwist, currentRound, m_tickets, currentRound",True
setMaxNumberStepCircle(uint256),maxNumberStepCircle,False
"getBalancePlayer(uint,address)",m_tickets,False
"getBalanceWinner(uint,address)",m_tickets,False
getCurrentDate(),"isDemo, simulateDate",False
setSimulateDate(uint),"isDemo, simulateDate, simulateDate, simulateDate",False
setDemo(),"uniquePlayer, isDemo",False
isSunday(uint),,False
getCountTickets(uint),"countTickets, m_tickets",False
setAdministrationWallet(address),"administrationWallet, administrationWallet",True
