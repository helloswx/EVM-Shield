Function Name,State Variables Modified,Can Transfer Ether
"transferFrom(address,address,uint)",,False
"allowance(address,address)",,False
balanceOf(address),,False
owned(),owner,True
transferOwnership(address),"owner, owner",False
"YourMomTokenCrowdsale(string,address,uint,uint,address,address,uint,uint)","name, crowdsaleStartTime, deadline, crowdsaleStartTime, originalTokenReward, tokenReward, tokenHolder, beneficiary, reclaimForgottenEtherDeadline, deadline",False
"function()payablepublic{require(!failSafeMode);require(purchasingAllowed);require(now>=crowdsaleStartTime);require(msg.value!=0);require(amountRaised+msg.value>amountRaised);price=_currentTokenRewardCalculator();require(tokenReward.transferFrom(tokenHolder,msg.sender,msg.value*price));amountRaised+=msg.value;tokensIssued+=msg.value*price;etherBalanceOf[msg.sender]+=msg.value;balanceOf[msg.sender]+=msg.value*price;currentContractAllowance=tokenReward.allowance(beneficiary,this);if(!afterFirstWithdrawal&&((tokensIssued!=initialContractAllowance-currentContractAllowance)||(amountRaised!=this.balance))){_activateFailSafe();}TokenPurchase(msg.sender,msg.value,msg.value*price);if(afterFirstWithdrawal){if(beneficiary.send(msg.value)){FundWithdrawal(beneficiary,msg.value,true);}}}()","failSafeMode, purchasingAllowed, crowdsaleStartTime, amountRaised, amountRaised, price, tokenReward, tokenHolder, price, amountRaised, tokensIssued, price, etherBalanceOf, balanceOf, price, currentContractAllowance, tokenReward, beneficiary, afterFirstWithdrawal, tokensIssued, initialContractAllowance, currentContractAllowance, amountRaised, price, afterFirstWithdrawal, beneficiary, beneficiary",True
enablePurchase(),"failSafeMode, purchasingAllowed, purchasingAllowed, allowanceSetted, tokenReward, beneficiary, initialContractAllowance, tokenReward, beneficiary, currentContractAllowance, initialContractAllowance, allowanceSetted",False
disablePurchase(),"purchasingAllowed, purchasingAllowed",False
Withdrawal(),"failSafeMode, deadline, currentContractAllowance, initialContractAllowance, beneficiary, afterFirstWithdrawal, beneficiary, amountRaised, afterFirstWithdrawal, beneficiary, amountRaised, errorCount, errorCount, _etherAmount, beneficiary, _etherAmount, beneficiary, _etherAmount, reclaimForgottenEtherDeadline, beneficiary, _etherAmount, beneficiary, _etherAmount, beneficiary, _etherAmount, balanceOf, etherBalanceOf, tokenReward, balanceOf, tokenReward, balanceOf, tokenReward, tokenHolder, balanceOf, etherBalanceOf, _etherAmount, etherBalanceOf, _etherAmount, balanceOf, etherBalanceOf, _etherAmount, _etherAmount",True
name(),name,False
tokenBalanceOf(address),balanceOf,False
etherContributionOf(address),etherBalanceOf,False
currentPrice(),,False
discount(),originalTokenReward,False
remainingTokens(),currentContractAllowance,False
crowdsaleStarted(),crowdsaleStartTime,False
reclaimEtherDeadline(),reclaimForgottenEtherDeadline,False
