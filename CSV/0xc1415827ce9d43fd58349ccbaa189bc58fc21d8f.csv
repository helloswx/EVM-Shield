Function Name,State Variables Modified,Can Transfer Ether
"issue(address,uint)",,False
transferOwnership(address),,False
updateFee(uint256),,False
transferOwnership(address),,False
payFee(),,False
"function()publicpayable{receiver.transfer(msg.value);receivedEther(msg.sender,msg.value);}()",receiver,True
payFee(),,True
"withdrawTokenBalance(uint256,address)",receiver,True
withdrawFullTokenBalance(address),receiver,True
"EngravedDAO(address,address,address,address,uint,uint,uint)","ownership, integrity, egrToken, egcToken, withdrawStart, minimumQuorum, debatingPeriodInMinutes, minimumQuorum, debatingPeriodInMinutes, egcToken, minAmount",False
withdrawDividends(),"lockedBalances, withdrawStart, withdrawStart, lockedBalances, lockedBalances, dividend, egcToken",True
unlockFunds(),"lockedBalances, lockedBalances, lockedBalances, egcToken",True
lockFunds(uint),"withdrawStart, withdrawStart, lockedBalances, egcToken, egcToken",True
"newOwnershipFeeProposal(uint256,string)","proposals, proposals, debatingPeriodInMinutes, numProposals",False
"newIntegrityFeeProposal(uint256,string)","proposals, proposals, debatingPeriodInMinutes, numProposals",False
"newTransferProposal(address,string)","proposals, proposals, debatingPeriodInMinutes, numProposals",False
"vote(uint,bool)",proposals,True
executeProposal(uint),"proposals, egcToken, minimumQuorum",True
startIncomeDistribution(),"withdrawStart, egcToken, dividend, dividend, minAmount, withdrawStart",False
tokenExchange(uint),"egrToken, egrToken, egcToken",True
