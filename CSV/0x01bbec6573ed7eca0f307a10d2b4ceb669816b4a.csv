Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint256,bytes)",,False
"transfer(address,uint256,bytes)",,False
"transferFrom(address,address,uint256,bytes)",,False
TEFoodsToken(),owner,True
"allocateTokens(address,uint)",,False
"allocateVestedTokens(address,uint,uint)",,False
releaseVestedTokens(uint),transferrableTime,True
enableTransfers(),"transferrableTime, transferrableTime, owner",True
function()publicpayable{revert();}(),,False
totalSupply(),,False
balanceOf(address),,False
"vestedBalanceOf(address,uint)",,False
"allowance(address,address)",,False
"transfer(address,uint)",transferrableTime,True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",transferrableTime,True
"approve(address,uint256,bytes)",,True
"transfer(address,uint256,bytes)",,True
"transferFrom(address,address,uint256,bytes)",,True
TEFoodsCrowdsale(),"teFoodsAddress, tokenContract",False
"allocatePresaleTokens(address,uint,uint,uint)","crowdsaleStartTime, tokenRateInUsdCents, tokenContract, tokenContract, tokenContract, amountRaisedInUsdCents, amountRaisedInUsdCents, tokensAllocated, tokensAllocated",False
"allocateMarketingTokens(address,uint)","marketingTokensDistributed, marketingTokenAllocation, marketingTokensDistributed, marketingTokensDistributed, tokensAllocated, tokensAllocated, tokenContract",False
whitelistUsers(),"crowdsaleStartTime, whitelistedAddressCount, whitelistedAddressCount",False
revokeUsers(),"crowdsaleStartTime, whitelistedAddressCount, whitelistedAddressCount",False
setMaxGasPrice(uint),maxGasPriceInWei,False
checkWhitelisted(address),,False
isOpen(),"crowdsaleStartTime, crowdsaleFinished, crowdsaleClosedTime",False
getRemainingEthAvailable(),"crowdsaleFinished, crowdsaleClosedTime, amountToRaiseInUsdCents, amountRaisedInUsdCents, ethRateInUsdCents",False
"function()publicpayable{require(tx.gasprice<=maxGasPriceInWei);require(msg.value>0);require(now>=crowdsaleStartTime&&now<=crowdsaleClosedTime);require(whitelist[msg.sender].authorised);require(!crowdsaleFinished);if(now<crowdsaleUncappedTime){require(!whitelist[msg.sender].contributed);require(msg.value<=contributionCapInWei);}uintusdAmount=msg.value.mul(ethRateInUsdCents).div(1ether);require(usdAmount>=minContributionInUsdCents);uinttokenAmount=_applyBonus(msg.value.mul(ethRateInUsdCents).div(tokenRateInUsdCents));amountRaisedInUsdCents=amountRaisedInUsdCents.add(usdAmount);if(amountRaisedInUsdCents>=amountToRaiseInUsdCents){closeCrowdsale();}else{_allocateTokens(msg.sender,tokenAmount);}}()","maxGasPriceInWei, crowdsaleStartTime, crowdsaleClosedTime, crowdsaleFinished, crowdsaleUncappedTime, contributionCapInWei, ethRateInUsdCents, minContributionInUsdCents, ethRateInUsdCents, tokenRateInUsdCents, amountRaisedInUsdCents, amountRaisedInUsdCents, amountRaisedInUsdCents, amountToRaiseInUsdCents",True
closeCrowdsale(),"crowdsaleFinished, crowdsaleStartTime, owner, amountRaisedInUsdCents, amountToRaiseInUsdCents, crowdsaleFinished, amountRaisedInUsdCents, amountToRaiseInUsdCents, amountRaisedInUsdCents, amountToRaiseInUsdCents, ethRateInUsdCents, ethRateInUsdCents, tokenRateInUsdCents, amountRaisedInUsdCents, amountToRaiseInUsdCents, amountRaisedInUsdCents, amountToRaiseInUsdCents, amountToRaiseInUsdCents, amountRaisedInUsdCents, tokenRateInUsdCents, tokensAllocated, tokensAllocated, amountRaisedInUsdCents",True
enableTokenTransfers(),"crowdsaleFinished, marketingTokensDistributed, marketingTokenAllocation, totalTokenSupply, tokensAllocated, tokensAllocated, tokensAllocated, tokenContract, teFoodsAddress, tokenContract, teFoodsAddress, tokenContract",False
