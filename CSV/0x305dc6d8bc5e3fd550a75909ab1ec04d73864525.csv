Function Name,State Variables Modified,Can Transfer Ether
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
totalSupply(),_totalSupply,False
balanceOf(address),"_balances, owner",False
"allowance(address,address)","_allowed, owner",False
"transfer(address,uint256)",,True
"approve(address,uint256)",,True
"transferFrom(address,address,uint256)",_allowed,True
"increaseAllowance(address,uint256)",_allowed,True
"decreaseAllowance(address,uint256)",_allowed,True
owner(),_owner,False
isOwner(),_owner,True
renounceOwnership(),"_owner, _owner",False
transferOwnership(address),,True
givenAnyReturn(bytes),,False
givenAnyReturnBool(bool),,False
givenAnyReturnUint(uint),,False
givenAnyReturnAddress(address),,False
givenAnyRevert(),,False
givenAnyRevertWithMessage(string),,False
givenAnyRunOutOfGas(),,False
"givenMethodReturn(bytes,bytes)",,False
"givenMethodReturnBool(bytes,bool)",,False
"givenMethodReturnUint(bytes,uint)",,False
"givenMethodReturnAddress(bytes,address)",,False
givenMethodRevert(bytes),,False
"givenMethodRevertWithMessage(bytes,string)",,False
givenMethodRunOutOfGas(bytes),,False
"givenCalldataReturn(bytes,bytes)",,False
"givenCalldataReturnBool(bytes,bool)",,False
"givenCalldataReturnUint(bytes,uint)",,False
"givenCalldataReturnAddress(bytes,address)",,False
givenCalldataRevert(bytes),,False
"givenCalldataRevertWithMessage(bytes,string)",,False
givenCalldataRunOutOfGas(bytes),,False
invocationCount(),,False
invocationCountForMethod(bytes),,False
invocationCountForCalldata(bytes),,False
reset(),,False
constructor(),"MOCKS_LIST_START, MOCKS_LIST_END, SENTINEL_ANY_MOCKS, SENTINEL_ANY_MOCKS",True
givenAnyReturn(bytes),,False
givenAnyReturnBool(bool),,False
givenAnyReturnUint(uint),,False
givenAnyReturnAddress(address),,False
givenAnyRevert(),,False
givenAnyRevertWithMessage(string),,False
givenAnyRunOutOfGas(),,False
"givenCalldataReturn(bytes,bytes)",,True
"givenCalldataReturnBool(bytes,bool)",,True
"givenCalldataReturnUint(bytes,uint)",,True
"givenCalldataReturnAddress(bytes,address)",,True
"givenMethodReturn(bytes,bytes)",,True
"givenMethodReturnBool(bytes,bool)",,True
"givenMethodReturnUint(bytes,uint)",,True
"givenMethodReturnAddress(bytes,address)",,True
givenCalldataRevert(bytes),,True
givenMethodRevert(bytes),,True
"givenCalldataRevertWithMessage(bytes,string)",,True
"givenMethodRevertWithMessage(bytes,string)",,True
givenCalldataRunOutOfGas(bytes),,True
givenMethodRunOutOfGas(bytes),,True
invocationCount(),,False
invocationCountForMethod(bytes),,True
invocationCountForCalldata(bytes),,True
reset(),"MOCKS_LIST_START, MOCKS_LIST_END_HASH, MOCKS_LIST_START, MOCKS_LIST_END, SENTINEL_ANY_MOCKS, SENTINEL_ANY_MOCKS, SENTINEL_ANY_MOCKS, SENTINEL_ANY_MOCKS",True
"updateInvocationCount(bytes4,bytes)",,True
"function()payableexternal{bytes4methodId;assembly{methodId:=calldataload(0)}if(calldataMockTypes[msg.data]==MockType.Revert){revert(calldataRevertMessage[msg.data]);}if(calldataMockTypes[msg.data]==MockType.OutOfGas){useAllGas();}bytesmemoryresult=calldataExpectations[msg.data];if(result.length==0){if(methodIdMockTypes[methodId]==MockType.Revert){revert(methodIdRevertMessages[methodId]);}if(methodIdMockTypes[methodId]==MockType.OutOfGas){useAllGas();}result=methodIdExpectations[methodId];}if(result.length==0){if(fallbackMockType==MockType.Revert){revert(fallbackRevertMessage);}if(fallbackMockType==MockType.OutOfGas){useAllGas();}result=fallbackExpectation;}(,bytesmemoryr)=address(this).call.gas(100000)(abi.encodeWithSignature(""updateInvocationCount(bytes4,bytes)"",methodId,msg.data));assert(r.length==0);assembly{return(add(0x20,result),mload(result))}}()",,True
isMinter(address),_minters,False
addMinter(address),,False
renounceMinter(),,True
"mint(address,uint256)",,False
"withdraw(address,uint)",,False
"deposit(address,uint)",,False
ethToken(),,False
frtToken(),,False
owlToken(),,False
"getAuctionIndex(address,address)",,False
"postBuyOrder(address,address,uint256,uint256)",,False
"postSellOrder(address,address,uint256,uint256)",,False
"getCurrentAuctionPrice(address,address,uint256)",,False
"claimSellerFunds(address,address,address,uint)",,False
constructor(address),masterCopy,False
"function()externalpayable{address_masterCopy=masterCopy;assembly{calldatacopy(0,0,calldatasize)letsuccess:=delegatecall(not(0),_masterCopy,0,calldatasize,0,0)returndatacopy(0,0,returndatasize)switchsuccesscase0{revert(0,returndatasize)}default{return(0,returndatasize)}}}()",masterCopy,True
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
balanceOf(address),,False
"allowance(address,address)",,False
totalSupply(),,False
exp(int),"ONE, LN2, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE",False
ln(uint),"ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, LOG2_E",False
floorLog2(uint),"ONE, ONE",False
max(),,False
"transfer(address,uint)","balances, balances, balances, balances",True
"transferFrom(address,address,uint)","balances, balances, balances, balances",True
"approve(address,uint)",,True
"allowance(address,address)",owner,False
balanceOf(address),"balances, owner",False
totalSupply(),,False
updateMinter(address),"owner, minter",True
updateOwner(address),"owner, _owner, owner, _owner",True
"mintTokens(address,uint)","minter, lockedTokenBalances, lockedTokenBalances",True
lockTokens(uint),"balances, balances, balances, lockedTokenBalances, lockedTokenBalances, lockedTokenBalances",True
unlockTokens(),"lockedTokenBalances, lockedTokenBalances, lockedTokenBalances, unlockedTokens, unlockedTokens, unlockedTokens, unlockedTokens, unlockedTokens",True
withdrawUnlockedTokens(),"unlockedTokens, balances, balances, unlockedTokens, unlockedTokens",True
"min(uint,uint)",,False
"safeToAdd(uint,uint)",,False
"safeToSub(uint,uint)",,False
"add(uint,uint)",,False
"sub(uint,uint)",,False
"constructor(,,,uint)","depositToken, secondaryToken, dx, mgnToken, dx, dx, dx, poolingPeriodEndTime",False
deposit(uint),"currentState, auctionCount, auctionCount, participationsByAddress, totalPoolShares, totalDeposit, depositToken",True
withdrawDeposit(),"currentState, currentState, hasParticpationWithdrawn, participationsByAddress, hasParticpationWithdrawn, depositToken",True
withdrawMagnolia(),"currentState, hasParticpationWithdrawn, participationsByAddress, participationsByAddress, hasParticpationWithdrawn, mgnToken",True
withdrawDepositandMagnolia(),,False
participateInAuction(),"currentState, dx, depositToken, secondaryToken, lastParticipatedAuctionIndex, depositToken, totalPoolSharesCummulative, totalPoolShares, depositToken, dx, dx, depositToken, dx, lastParticipatedAuctionIndex, dx, totalDeposit, lastParticipatedAuctionIndex, dx, auctionCount",True
triggerMGNunlockAndClaimTokens(),"currentState, dx, depositToken, secondaryToken, lastParticipatedAuctionIndex, dx, secondaryToken, depositToken, lastParticipatedAuctionIndex, mgnToken, dx, depositToken, totalDeposit, depositToken, dx, depositToken, currentState",True
withdrawUnlockedMagnoliaFromDx(),"currentState, mgnToken, totalMgn, mgnToken, currentState",False
checkForStateUpdate(),"poolingPeriodEndTime, currentState, currentState",False
updateAndGetCurrentState(),currentState,False
numberOfParticipations(address),participationsByAddress,False
"participationAtIndex(address,uint)",participationsByAddress,False
poolSharesByAddress(address),"participationsByAddress, participationsByAddress",False
sellAndBuyToken(),"depositToken, secondaryToken, secondaryToken, depositToken",False
getAllClaimableMgnAndDeposits(address),"participationsByAddress, participationsByAddress, participationsByAddress",False
