Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
Authorizable(),,True
getAuthorizer(uint),,False
isAuthorized(address),,False
addAuthorized(address),,False
"updateRate(string,uint)",rates,False
updateRates(),"rates, symbol, symbol",False
getRate(string),rates,False
balanceOf(address),,False
"transfer(address,uint)",,False
"burn(address,uint256)",,False
createTokens(address),"exchangeRate, token, multisigVault",True
setAltDeposit(uint),altDeposits,False
"authorizedCreateTokens(address,uint)",token,False
authorizedStartTrading(),token,False
"authorizedBurnTokens(address,uint)",token,False
setHardCap(uint),,False
setStart(uint),start,False
setMultisigVault(address),multisigVault,False
setExchangeRate(address),exchangeRate,False
finishMinting(),"token, token, multisigVault, token, token, owner",True
retrieveTokens(address),"token, multisigVault, token",True
function()externalpayable{createTokens(msg.sender);}(),,True
setSCBAddress(address),"SCBAddress, SCBAddress, SCBAddress",False
"setInfo(address,uint256,uint256)",,False
deleteInsured(address),"investors, countOfInvestors",False
beginOfPayments(),"SCBAddress, startOfPayments, startOfPayments, totalSupply",False
"function()externalpayable{Investorstorageinvestor=investors[msg.sender];if(msg.value>0ether){require(!startOfPayments);if(msg.sender!=SCBAddress&&msg.value>=0.1ether){uint256deposit;uint256withdrawals;(deposit,withdrawals,investor.insured)=SCBContract.setInsured(msg.sender);countOfInvestors++;privateSetInfo(msg.sender,deposit,withdrawals);}}elseif(msg.value==0){uint256notReceived=investor.deposit.sub(investor.withdrawals);uint256partOfNotReceived=notReceived.mul(100).div(totalNotReceived);uint256payAmount=totalSupply.div(100).mul(partOfNotReceived);require(startOfPayments&&investor.insured&&notReceived>0);investor.insured=false;msg.sender.transfer(payAmount);emitPaid(msg.sender,payAmount,notReceived,partOfNotReceived);}}()","investors, startOfPayments, SCBAddress, countOfInvestors, totalNotReceived, totalSupply, startOfPayments",True
setInsuranceFundAddress(address),"insuranceFundAddress, insuranceFundAddress, insuranceFundAddress",False
setInsured(address),investors,False
closeEntrance(),"closed, closed",False
getPhasePercent(),investors,True
getUserBalance(address),investors,False
"function()externalpayable{require(!closed);Investorstorageinvestor=investors[msg.sender];if(msg.value>0){require(msg.value>=minimum);withdraw();if(investor.deposit==0){countOfInvestors++;}investor.deposit=investor.deposit.add(msg.value);investor.paymentTime=now;if(investor.insured){IFContract.setInfo(msg.sender,investor.deposit,investor.withdrawals);}allocation();emitInvest(msg.sender,msg.value);}if(msg.value==0.0001ether){increasePercent();}else{withdraw();}}()","closed, investors, minimum, countOfInvestors",True
