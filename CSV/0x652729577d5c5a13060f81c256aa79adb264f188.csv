Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
constructor(),owner,True
transferOwnership(address),"owner, owner",False
"rescueTokens(,address)",,True
"constructor(,uint256)","vnetToken, owner",False
"function()publicpayable{uint256vnetBalance=vnetToken.balanceOf(address(this));require(vnetBalance>0);require(vnetSold<vnetSupply);uint256weiAmount=msg.value;require(weiAmount>=weiMinimum);require(weiAmount<=weiMaximum);uint256vnetAmount=weiAmount.mul(ratioNext).div(10**18);if(vnetBalance>=vnetAmount){assert(vnetToken.transfer(msg.sender,vnetAmount));emitBuyVNET(msg.sender,ratioNext,vnetAmount,weiAmount);vnetSold=vnetSold.add(vnetAmount);if(weiAmount>=weiWelfare){welfare[msg.sender]=true;emitWelfare(msg.sender);}}else{uint256weiExpend=vnetBalance.mul(10**18).div(ratioNext);assert(vnetToken.transfer(msg.sender,vnetBalance));emitBuyVNET(msg.sender,ratioNext,vnetBalance,weiExpend);vnetSold=vnetSold.add(vnetBalance);msg.sender.transfer(weiAmount.sub(weiExpend));if(weiExpend>=weiWelfare){welfare[msg.sender]=true;emitWelfare(msg.sender);}}calcRatioNext();uint256etherBalance=address(this).balance;wallet.transfer(etherBalance);}()","vnetToken, vnetSold, vnetSupply, weiMinimum, weiMaximum, ratioNext, vnetToken, ratioNext, vnetSold, vnetSold, weiWelfare, welfare, ratioNext, vnetToken, ratioNext, vnetSold, vnetSold, weiWelfare, welfare",True
updateWallet(address),,False
updateEthPrice(uint256),ethPrice,False
