Function Name,State Variables Modified,Can Transfer Ether
Controlled(),controller,True
changeController(address),controller,False
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
WhiteList(),"contracts, investors, whiteListed, whiteListed",False
addAddress(),"whiteListed, contracts, investors",False
removeAddress(address),"whiteListed, contracts, contracts, contracts, contracts, contracts, contracts, investors, investors, investors, investors, investors, investors, whiteListed",False
getInvestors(),investors,False
getContracts(),contracts,False
isWhiteListed(address),whiteListed,False
"function()publicpayable{if(msg.value>0)Deposit(msg.sender,msg.value);}()",,True
"MultiSigWallet(,uint)","isOwner, isOwner, owners, required",False
addOwner(address),"isOwner, owner, owners, owner, owner",False
removeOwner(address),"isOwner, owner, owners, owners, owner, owners, owners, owners, owners, required, owners, owners, owner",False
"replaceOwner(address,address)","owners, owners, owner, owners, isOwner, owner, isOwner, owner",False
changeRequirement(uint),required,False
"submitTransaction(address,uint,bytes)",,False
confirmTransaction(uint),confirmations,True
revokeConfirmation(uint),confirmations,True
executeTransaction(uint),"transactions, transactions, transactions, transactions, transactions",True
isConfirmed(uint),"owners, confirmations, owners, required",False
getConfirmationCount(uint),"owners, confirmations, owners",False
"getTransactionCount(bool,bool)","transactionCount, transactions, transactions",False
getOwners(),owners,False
getConfirmations(uint),"owners, owners, confirmations, owners, owners",False
"getTransactionIds(uint,uint,bool,bool)","transactionCount, transactionCount, transactions, transactions",False
saleStarted(),"startFundingTime, startFundingTime",False
saleEnded(),endFundingTime,False
"Market(address,address,,uint)","MyWhiteList, tokenContract",False
"startAndSetParams(uint,uint)","basePrice, marketCap, startFundingTime, endFundingTime, startFundingTime, DURATION",False
"onTransfer(address,address,uint)","MyWhiteList, MyWhiteList, totalTokenCollected, totalTokenCollected",True
"onApprove(address,address,uint)","MyWhiteList, MyWhiteList",False
deposit(),,True
function()publicpayable{require(MyWhiteList.isWhiteListed(msg.sender));doPayment(msg.sender);}(),MyWhiteList,True
proxyPayment(address),MyWhiteList,False
"updateBasePriceAndMarketCap(uint,uint)","basePrice, marketCap",False
