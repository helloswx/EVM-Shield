Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
totalSupply(),_totalSupply,False
balanceOf(address),"_balances, owner",False
"allowance(address,address)","_allowed, owner",False
"transfer(address,uint256)",,True
"approve(address,uint256)",_allowed,True
"transferFrom(address,address,uint256)","_allowed, _allowed, _allowed",True
"increaseAllowance(address,uint256)","_allowed, _allowed, _allowed",True
"decreaseAllowance(address,uint256)","_allowed, _allowed, _allowed",True
isMinter(address),minters,False
addMinter(address),,False
renounceMinter(),,True
"mint(address,uint256)",,False
burn(uint256),,True
"burnFrom(address,uint256)",,False
"constructor(string,string,uint8)","_name, _symbol, _decimals",False
name(),_name,False
symbol(),_symbol,False
decimals(),_decimals,False
constructor(),,True
constructor(address),,False
function()public{require(lib.delegatecall(msg.data));}(),,True
constructor(address),factory,True
"constructor(address,uint,uint)","owner, wallet, ceiling, priceFactor, stage",True
"setup(address,address)","xrt, ambix, xrt, MAX_TOKENS_SOLD, stage",False
startAuction(),"stage, startBlock",False
calcCurrentTokenPrice(),"stage, stage, finalPrice",False
updateStage(),stage,False
bid(address),"MAX_TOKENS_SOLD, totalReceived, ceiling, totalReceived, wallet, bids, totalReceived",True
claimTokens(address),"bids, finalPrice, bids, xrt",True
calcStopPrice(),"totalReceived, MAX_TOKENS_SOLD",False
calcTokenPrice(),"priceFactor, startBlock",False
membersLength(),members,False
quotaOf(address),"balances, minimalFreeze",False
"constructor(address,uint256,uint256)","minimalFreeze, timeoutBlocks, factory, xrt, factory",True
"constructor(address,address,,,)","robotLiabilityLib, lighthouseLib, auction, xrt, ens",False
"createLiability(bytes,bytes)","robotLiabilityLib, xrt, token, xrt, totalGasUtilizing, gasUtilizing",True
"createLighthouse(uint256,uint256,string)","_name, ens, lighthouse, lighthouseLib, lighthouse, _name, isLighthouse, lighthouse, ens, _name, ens, ens, lighthouse",False
liabilityFinalized(uint256),"gasUtilizing, totalGasUtilizing, gasUtilizing, xrt, gasUtilizing",True
