Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
constructor(address),token,False
"setPrices(uint256,uint256,uint256)","marketplace, marketplace, marketplace",False
buy(),"marketplace, marketplace, token, marketplace, marketplace",True
sell(uint),"token, token, marketplace, marketplace, marketplace, marketplace",True
withdrawEther(uint256),,True
withdrawTalao(uint256),token,True
function()publicpayableonlyOwner{}(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"TokenTimelock(,address,uint256)","token, beneficiary, releaseTime",False
release(),"releaseTime, token, token, beneficiary",False
"TokenVesting(address,uint256,uint256,uint256,bool)","beneficiary, revocable, duration, cliff, start",False
release(),"token, released, token, released, token, token, beneficiary",False
revoke(),"revocable, revoked, token, token, token, revoked, token, token, owner",False
releasableAmount(),"token, released, token",False
vestedAmount(),"token, released, token, cliff, start, duration, revoked, token, start, duration",False
"Crowdsale(uint256,uint256,uint256,address)","token, startTime, endTime, wallet",False
function()externalpayable{buyTokens(msg.sender);}(),,True
buyTokens(address),"beneficiary, rate, weiRaised, weiRaised, token, beneficiary, beneficiary",True
hasEnded(),endTime,False
finalize(),"isFinalized, isFinalized",False
RefundVault(address),"wallet, state",False
deposit(address),"state, deposited, deposited",False
close(),"state, state, wallet",True
enableRefunds(),"state, state",False
refund(address),"state, deposited, deposited",True
RefundableCrowdsale(uint256),"vault, wallet, goal",False
claimRefund(),"isFinalized, vault",True
goalReached(),"weiRaised, goal",False
CappedCrowdsale(uint256),cap,False
hasEnded(),"weiRaised, cap",False
"ProgressiveIndividualCappedCrowdsale(uint,uint)","baseEthCapPerAddress, startGeneralSale",False
setBaseCap(uint),"startGeneralSale, baseEthCapPerAddress",False
getCurrentEthCapPerAddress(),"startGeneralSale, startGeneralSale, TIME_PERIOD_IN_SEC, baseEthCapPerAddress",False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
"mint(address,uint256)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
"receiveApproval(address,uint256,address,bytes)",,False
setMarketplace(address),marketplace,False
"approve(address,uint256)",,False
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
"approveAndCall(address,uint256,bytes)",,True
withdrawEther(uint256),,True
withdrawTalao(uint256),totalDeposit,True
createVaultAccess(uint256),"accessAllowance, vaultDeposit, vaultDeposit, data, vaultDeposit, totalDeposit, totalDeposit, vaultDeposit, data, vaultDeposit, data, accessAllowance",True
closeVaultAccess(),"accessAllowance, data, accessAllowance, totalDeposit, totalDeposit, data, data",True
"agentApproval(address,uint)","accessAllowance, data, data, data",True
setVaultDeposit(uint),vaultDeposit,False
getVaultAccess(address),"accessAllowance, accessAllowance, data, data, data, data, data, accessAllowance, accessAllowance",True
getFreelanceAgent(address),data,False
"hasVaultAccess(address,address)","accessAllowance, data",False
"constructor(uint256,uint256,uint256,uint256,uint256,uint256,address)","startGeneralSale, presaleCap, dateOfBonusRelease, endTime, presaleBonusLock",False
whitelistAddresses(),whiteListedAddress,False
unwhitelistAddress(address),whiteListedAddress,False
"whitelistAddressPresale(address,uint)","presaleParticipation, whiteListedAddressPresale, presaleIndividualCap",False
unwhitelistAddressPresale(address),whiteListedAddressPresale,False
buyTokens(address),"beneficiary, generalRate, weiRaised, weiRaised, token, beneficiary, beneficiary",True
buyTokensPresale(address),"beneficiary, generalRate, timelockedTokensContracts, beneficiary, timelockedTokensContracts, beneficiary, token, beneficiary, dateOfBonusRelease, weiRaisedPreSale, weiRaisedPreSale, token, beneficiary, token, timelockedTokensContracts, beneficiary, beneficiary",True
function()externalpayable{if(now>=startTime&&now<startGeneralSale){buyTokensPresale(msg.sender);}else{buyTokens(msg.sender);}}(),"startTime, startGeneralSale",True
goalReached(),"weiRaisedPreSale, weiRaised, goal",False
isWhitelisted(address),whiteListedAddress,False
isWhitelistedPresale(address),whiteListedAddressPresale,False
