Function Name,State Variables Modified,Can Transfer Ether
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
burn(uint256),"totalSupply, totalSupply",True
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
CHXToken(),"totalSupply, owner, totalSupply, owner, totalSupply",False
setTokenSaleContractAddress(address),tokenSaleContractAddress,False
setRestrictedState(bool),isRestricted,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
"approve(address,uint)",,False
"increaseApproval(address,uint)",,False
"decreaseApproval(address,uint)",,False
"batchTransfer(,)",,True
"batchTransferFrom(address,,)",,True
"batchTransferFromMany(,address,)",,True
"batchTransferFromManyToMany(,,)",,True
"batchApprove(,)",,False
"batchIncreaseApproval(,)",,False
"batchDecreaseApproval(,)",,False
burn(uint),,False
drainStrayEther(uint),owner,True
"drainStrayTokens(,uint)",owner,True
Whitelistable(),"whitelistAdmin, owner",False
isWhitelisted(address),,False
addToWhitelist(),,False
removeFromWhitelist(),,False
setWhitelistAdmin(address),whitelistAdmin,False
CHXTokenSale(),,False
setTokenContract(address),"tokenContract, tokenContract",False
transferOwnership(address),"owner, whitelistAdmin, owner",True
"function()publicpayable{addressinvestor=msg.sender;uintcontribution=msg.value;require(saleStartTime<=now&&now<=saleEndTime);require(tx.gasprice<=maxGasPrice);require(whitelist[investor]);require(contribution>=minContribution);if(phase1DurationInHours.mul(1hours).add(saleStartTime)>=now){require(etherContributions[investor].add(contribution)<=maxContributionPhase1);}else{require(etherContributions[investor].add(contribution)<=maxContributionPhase2);}etherContributions[investor]=etherContributions[investor].add(contribution);etherCollected=etherCollected.add(contribution);uintmultiplier=1e18;uinttokens=contribution.mul(multiplier).div(TOKEN_PRICE);tokenAllocations[investor]=tokenAllocations[investor].add(tokens);tokensSold=tokensSold.add(tokens);require(tokenContract.transfer(investor,tokens));TokenPurchased(investor,contribution,tokens);}()","saleStartTime, saleEndTime, maxGasPrice, minContribution, phase1DurationInHours, saleStartTime, etherContributions, maxContributionPhase1, etherContributions, maxContributionPhase2, etherContributions, etherContributions, etherCollected, etherCollected, TOKEN_PRICE, tokenAllocations, tokenAllocations, tokensSold, tokensSold, tokenContract",True
sendCollectedEther(address),,True
sendRemainingTokens(address),"tokenContract, tokenContract",True
"setSaleTime(uint,uint)","saleStartTime, saleEndTime",False
setMaxGasPrice(uint),maxGasPrice,False
setMinContribution(uint),minContribution,False
setMaxContributionPhase1(uint),"minContribution, maxContributionPhase1",False
setMaxContributionPhase2(uint),"minContribution, maxContributionPhase2",False
setPhase1DurationInHours(uint),phase1DurationInHours,False
