Function Name,State Variables Modified,Can Transfer Ether
owner(),_owner,False
transferOwnership(address),"_owner, _owner",False
changeReceiver(address),"_receiver, _receiver",False
"rescueTokens(address,address,uint256)",,True
"withdrawEther(address,uint256)",,True
paused(),_paused,False
setPaused(bool),"_paused, _paused, _paused, _paused",True
balanceOf(address),,False
"transfer(address,uint256)",,False
balanceOf(address),,False
"transfer(address,uint256)",,False
inWhitelist(address),,False
referrer(address),,False
refCount(address),,False
startTimestamp(),,False
setStartTimestamp(uint32),,False
setEtherPrice(uint256),_etherPrice,True
etherPriceAuditor(address),_etherPriceAuditors,False
"setEtherPriceAuditor(address,bool)",_etherPriceAuditors,False
"usd2tokenByStage(uint256,uint16)",,False
"transferTopSales(uint16,address)","_seasonWeiTopSalesTransfered, _seasonWeiTopSalesTransfered",True
transferPending(address),"_weiPendingTransfered, _weiPendingTransfered",True
transferTeam(address),"_weiSold, _weiRefRewarded, _weiTopSales, _weiPending, _weiTeam, _weiTeam, _weiTeam",True
status(),"_etherPrice, _stage, STAGE_MAX, STAGE_MAX, SEASON_MAX, _stage, _season, _tokenUsdPrice, _topSalesRatio, _txs, _tokenTxs, _tokenBonusTxs, _tokenWhitelistTxs, _tokenIssued, _tokenBonus, _tokenWhitelist",False
sum(),"_weiSold, _weiRefRewarded, _weiTopSales, _weiTeam, _weiPending, _weiPendingTransfered",False
stageStatus(uint16),"STAGE_MAX, _stageTokenIssued, _stageUsdSold",False
seasonTopSalesRewards(uint16),"_seasonWeiSold, _seasonWeiTopSales, _seasonWeiTopSalesTransfered",False
accountQuery(address),"_accountTokenIssued, _accountTokenBonus, _accountTokenWhitelisted, _accountWeiPurchased, _accountWeiRefRewarded",False
seasonRefAccounts(uint16),_seasonRefAccounts,False
"usdSeasonAccountPurchased(uint16,address)",_usdSeasonAccountPurchased,False
"usdSeasonAccountRef(uint16,address)",_usdSeasonAccountRef,False
constructor(),"_etherPriceAuditors, _stage, _season",True
"function()externalpayableenoughGasonlyOnSale{require(msg.value>=WEI_MIN);require(msg.value<=WEI_MAX);setTemporaryVariables();uint256__usdAmount=wei2usd(msg.value);uint256__usdRemain=__usdAmount;uint256__tokenIssued;uint256__tokenBonus;uint256__usdUsed;uint256__weiUsed;while(gasleft()>GAS_EX&&__usdRemain>0&&_stage<=STAGE_MAX){uint256__txTokenIssued;(__txTokenIssued,__usdRemain)=ex(__usdRemain);__tokenIssued=__tokenIssued.add(__txTokenIssued);}__usdUsed=__usdAmount.sub(__usdRemain);__weiUsed=usd2wei(__usdUsed);if(msg.value>=WEI_BONUS){__tokenBonus=__tokenIssued.div(10);assert(transferTokenBonus(__tokenBonus));}if(_inWhitelist_&&__tokenIssued>0){assert(transferTokenWhitelisted(__tokenIssued.add(__tokenBonus)));sendWhitelistReferralRewards(__weiUsed);}if(__usdRemain>0){uint256__weiRemain=usd2wei(__usdRemain);__weiUsed=msg.value.sub(__weiRemain);msg.sender.transfer(__weiRemain);}if(__weiUsed>0){_txs=_txs.add(1);_weiSold=_weiSold.add(__weiUsed);_accountWeiPurchased[msg.sender]=_accountWeiPurchased[msg.sender].add(__weiUsed);}uint256__weiTeam;if(_season>SEASON_MAX)__weiTeam=_weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);else__weiTeam=_weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam).div(0.01ether).mul(0.01ether);_weiTeam=_weiTeam.add(__weiTeam);_receiver.transfer(__weiTeam);assert(true);}()","WEI_MIN, WEI_MAX, GAS_EX, _stage, STAGE_MAX, WEI_BONUS, _inWhitelist_, _txs, _txs, _weiSold, _weiSold, _accountWeiPurchased, _accountWeiPurchased, _season, SEASON_MAX, _weiSold, _weiRefRewarded, _weiTopSales, _weiPending, _weiTeam, _weiSold, _weiRefRewarded, _weiTopSales, _weiPending, _weiTeam, _weiTeam, _weiTeam, _receiver",True
