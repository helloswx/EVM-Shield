Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
totalTokens(),,False
totalInCirculation(),,False
balanceOf(address),,False
mintTokens(uint256),,False
"transfer(address,address,uint256)",,False
"creditAccount(address,uint256)",,False
"debitAccount(address,uint256)",,False
addAdmin(address),,False
removeAdmin(address),,False
getTokenName(address),,False
"setTokenName(address,bytes32)",,False
getTokenSymbol(address),,False
"setTokenSymbol(address,bytes32)",,False
getBuyPrice(address),,False
"setBuyPrice(address,uint256)",,False
getCirculationCap(address),,False
"setCirculationCap(address,uint256)",,False
getBalanceLimit(address),,False
"setBalanceLimit(address,uint256)",,False
getFoundation(address),,False
"setFoundation(address,address)",,False
"getAllowance(address,address,address)",,False
"setAllowance(address,address,address,uint256)",,False
"getCustomBuyerLimit(address,address)",,False
"setCustomBuyerLimit(address,address,uint256)",,False
"getCustomBuyerForIndex(address,uint256)",,False
getCustomBuyerMappingCount(address),,False
"getApprovedBuyer(address,address)",,False
"setApprovedBuyer(address,address,bool)",,False
"getApprovedBuyerForIndex(address,uint256)",,False
getApprovedBuyerMappingCount(address),,False
getTotalUnvestedAndUnreleasedTokens(address),,False
"setTotalUnvestedAndUnreleasedTokens(address,uint256)",,False
vestingMappingSize(address),,False
"vestingBeneficiaryForIndex(address,uint256)",,False
"releasableAmount(address,address)",,False
"vestedAvailableAmount(address,address)",,False
"vestedAmount(address,address)",,False
"canGrantVestedTokens(address,address)",,False
"canRevokeVesting(address,address)",,False
"revokeVesting(address,address)",,False
"getVestingSchedule(address,address)",,False
"setVestingSchedule(address,address,uint256,uint256,uint256,uint256,bool)",,False
"releaseVestedTokens(address,address)",,False
"getVestingStart(address,address)",,False
"getVestingCliff(address,address)",,False
"getVestingDuration(address,address)",,False
"getFullyVestedAmount(address,address)",,False
"getVestingRevocable(address,address)",,False
"setVestingReleasedAmount(address,address,uint256)",,False
"getVestingReleasedAmount(address,address)",,False
"setVestingRevokeDate(address,address,uint256)",,False
"getVestingRevokeDate(address,address)",,False
getRewardsContractHash(address),,False
"setRewardsContractHash(address,bytes32)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
totalSuperAdminsMapping(),superAdminsForIndex,False
addSuperAdmin(address),"superAdmins, processedSuperAdmin, superAdminsForIndex, processedSuperAdmin",False
removeSuperAdmin(address),superAdmins,False
totalAdminsMapping(),adminsForIndex,False
addAdmin(address),"admins, processedAdmin, adminsForIndex, processedAdmin",False
removeAdmin(address),admins,False
totalTokens(),_totalTokens,False
totalInCirculation(),_totalInCirculation,False
balanceOf(address),_balanceOf,False
mintTokens(uint256),"_totalTokens, _totalTokens",False
ledgerCount(),accountForIndex,False
"transfer(address,address,uint256)","_balanceOf, _balanceOf, _balanceOf, _balanceOf, _balanceOf",True
"creditAccount(address,uint256)","_balanceOf, _totalInCirculation, _totalInCirculation, _balanceOf, _balanceOf",False
"debitAccount(address,uint256)","_totalInCirculation, _totalInCirculation, _balanceOf, _balanceOf",False
"getMultiLedgerValue(string,address,address)",MultiLedgerStorage,False
primaryLedgerCount(string),primaryLedgerEntryForIndex,False
"secondaryLedgerCount(string,address)",secondaryLedgerEntryForIndex,False
"setMultiLedgerValue(string,address,address,uint256)","ledgerSecondaryEntries, secondaryLedgerEntryForIndex, ledgerSecondaryEntries, ledgerPrimaryEntries, primaryLedgerEntryForIndex, ledgerPrimaryEntries, MultiLedgerStorage",False
"getLedgerValue(string,address)",LedgerStorage,False
getLedgerCount(string),ledgerEntryForIndex,False
"setLedgerValue(string,address,uint256)","ledgerAccounts, ledgerEntryForIndex, ledgerAccounts, LedgerStorage",False
"getBooleanMapValue(string,address)",BooleanMapStorage,False
getBooleanMapCount(string),booleanMapEntryForIndex,False
"setBooleanMapValue(string,address,bool)","booleanMapAccounts, booleanMapEntryForIndex, booleanMapAccounts, BooleanMapStorage",False
getUIntValue(string),UIntStorage,False
"setUIntValue(string,uint256)",UIntStorage,False
getBytes32Value(string),Bytes32Storage,False
"setBytes32Value(string,bytes32)",Bytes32Storage,False
getAddressValue(string),AddressStorage,False
"setAddressValue(string,address)",AddressStorage,False
getBytesValue(string),BytesStorage,False
"setBytesValue(string,bytes)",BytesStorage,False
getBooleanValue(string),BooleanStorage,False
"setBooleanValue(string,bool)",BooleanStorage,False
getIntValue(string),IntStorage,False
"setIntValue(string,int256)",IntStorage,False
configureFromStorage(),,False
bytes32ToString(bytes32),,False
totalFrozenAccountsMapping(),frozenAccountForIndex,False
"freezeAccount(address,bool)","frozenAccount, processedAccount, frozenAccountForIndex, processedAccount",False
freezeToken(bool),"frozenToken, frozenToken",False
getLedgerNameHash(),,False
getStorageNameHash(),,False
isDeprecated(),successor,False
"upgradeTo(address,uint256)",successor,False
upgradedFrom(address),predecessor,False
"constructor(address,string,string)","isTokenContract, version, storageName, ledgerName, registry, registry",False
function()public{revert();}(),,False
getLedgerNameHash(),ledgerName,False
getStorageNameHash(),storageName,False
"configure(bytes32,bytes32,uint256,uint256,uint256,address)","externalStorage, frozenToken, externalStorage, externalStorage, externalStorage, externalStorage, externalStorage, externalStorage",False
configureFromStorage(),,False
"updateStorage(string,string)","frozenToken, storageName, ledgerName, registry, ledgerName, registry, storageName",False
name(),externalStorage,False
symbol(),externalStorage,False
totalInCirculation(),tokenLedger,False
cstBalanceLimit(),externalStorage,False
buyPrice(),externalStorage,False
circulationCap(),externalStorage,False
foundation(),externalStorage,False
totalSupply(),tokenLedger,False
tokensAvailable(),,False
balanceOf(address),tokenLedger,False
"transfer(address,uint256)","allowTransfers, whitelistedTransferer, frozenAccount, tokenLedger",True
mintTokens(uint256),"externalStorage, tokenLedger, tokenLedger",False
"grantTokens(address,uint256)","frozenAccount, tokenLedger",False
setHaltPurchase(bool),haltPurchase,False
buy(),"haltPurchase, externalStorage, externalStorage, externalStorage, tokenLedger, externalStorage, contributionMinimum, contributionMinimum, externalStorage, tokenLedger",True
foundationWithdraw(uint256),,True
foundationDeposit(),,False
"allowance(address,address)","externalStorage, owner",False
"transferFrom(address,address,uint256)","allowTransfers, frozenAccount, frozenAccount, tokenLedger, externalStorage",True
"approve(address,uint256)","frozenAccount, externalStorage",True
"increaseApproval(address,uint256)",externalStorage,True
"decreaseApproval(address,uint256)",externalStorage,True
"grantVestedTokens(address,uint256,uint256,uint256,uint256,bool)","externalStorage, frozenAccount, externalStorage",False
revokeVesting(address),externalStorage,False
releaseVestedTokens(),,True
releaseVestedTokensForBeneficiary(address),"frozenAccount, externalStorage, tokenLedger",False
releasableAmount(address),externalStorage,False
totalUnvestedAndUnreleasedTokens(),externalStorage,False
vestingMappingSize(),externalStorage,False
vestingBeneficiaryForIndex(uint256),externalStorage,False
vestingSchedule(address),"externalStorage, externalStorage, externalStorage",False
totalCustomBuyersMapping(),externalStorage,False
customBuyerLimit(address),externalStorage,False
customBuyerForIndex(uint256),externalStorage,False
"setCustomBuyer(address,uint256)",externalStorage,False
setAllowTransfers(bool),allowTransfers,False
setContributionMinimum(uint256),contributionMinimum,False
totalBuyersMapping(),externalStorage,False
approvedBuyer(address),externalStorage,False
approvedBuyerForIndex(uint256),externalStorage,False
addBuyer(address),"externalStorage, externalStorage, externalStorage",False
removeBuyer(address),externalStorage,False
totalTransferWhitelistMapping(),whitelistedTransfererForIndex,False
"setWhitelistedTransferer(address,bool)","whitelistedTransferer, processedWhitelistedTransferer, whitelistedTransfererForIndex, processedWhitelistedTransferer",True
function()public{revert();}(),,False
supportsInterface(bytes4),,False
addr(bytes32),"contractForHash, hashForNamehash",False
getContractHash(string),,False
numContracts(),contractNameForIndex,False
"setNamehash(string,bytes32)","contractForHash, hashForNamehash, hashForNamehash, namehashForHash",False
"register(string,address,bytes32)","contractForHash, hashForNamehash, contractNameForIndex, contractForHash, hashForNamehash, namehashForHash, storageForHash, storageForHash",False
"upgradeContract(string,address)","successor, contractForHash, contractForHash, predecessor, contractForHash, successor, predecessor, predecessor, predecessor, successor, successor, predecessor, storageForHash, successor, storageForHash, successor, storageForHash, predecessor, storageForHash, predecessor, successor, predecessor, successor, predecessor, successor, hashForNamehash, successor, namehashForHash, namehashForHash, namehashForHash, successor, successor, predecessor, namehashForHash",False
"addStorage(string,address)",storageForHash,False
getStorage(string),storageForHash,False
removeStorage(string),"storageForHash, storageForHash",False
