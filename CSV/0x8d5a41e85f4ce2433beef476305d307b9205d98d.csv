Function Name,State Variables Modified,Can Transfer Ether
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
"onBurn(address,uint)",,False
Controlled(),controller,True
changeController(address),controller,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
totalPledgedFees(),,False
totalPledgedFeesAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
pledgeFees(uint),,False
reducePledgedFees(uint),,False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
"NEC(address,address)",,False
enableBurning(bool),burningEnabled,False
burnAndRetrieve(uint256),"burningEnabled, controller, controller",True
Owned(),owner,True
changeOwner(address),owner,False
isRegistered(address),"listActive, isOnList",False
register(),isOnList,False
deregister(),isOnList,False
authoriseMaker(address),isAuthorisedMaker,False
deauthoriseMaker(address),isAuthorisedMaker,False
activateWhitelist(bool),listActive,False
getRegistrationStatus(address),isOnList,False
getAuthorisationStatus(address),isAuthorisedMaker,False
getOwner(),owner,False
"NectarController(address,address)","tokenContract, vaultAddress, startTime, windowFinalBlock",False
function()publicpayable{doTakerPayment();}(),,False
contributeForMakers(address),,False
proxyPayment(address),,False
"proxyAccountingCreation(address,uint,uint)",,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
"onBurn(address,uint)","tokenContract, tokenContract, tokenContract, tokenContract",True
setVault(address),vaultAddress,False
upgradeController(address),tokenContract,False
getFeeToTokenConversion(uint256),"windowFinalBlock, tokenContract, tokenContract, windowFinalBlock, tokenContract",False
currentWindow(),,False
windowAt(uint),"startTime, startTime, periodLength",False
topUpBalance(),,False
evacuateToVault(),vaultAddress,True
enableBurning(bool),tokenContract,False
claimTokens(address),"owner, owner",True
