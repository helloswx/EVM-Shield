Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"mint(uint256,bytes32)",,False
getChallengeNumber(),,False
getMiningDifficulty(),,False
getMiningTarget(),,False
getMiningReward(),,False
"receiveApproval(address,uint256,address,bytes)",,False
constructor(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
constructor(),"symbol, name, decimals, epochCount, _maxSupply, decimals, _totalSupply, decimals, targetForEpoch, epochCount, _MAXIMUM_TARGET, challengeNumber, solutionForChallenge, challengeNumber, timeStampForEpoch, epochCount, latestDifficultyPeriodStarted, epochCount, epochCount, targetForEpoch, epochCount, _MAXIMUM_TARGET, miningTarget, _MAXIMUM_TARGET, owner, _totalSupply, owner, _totalSupply",False
"mint(uint256,bytes32)","challengeNumber, miningTarget, solutionForChallenge, solutionForChallenge, challengeNumber, _totalSupply, _maxSupply, _totalSupply, _totalSupply, lastRewardTo, lastRewardAmount, lastRewardEthBlockNumber, epochCount, challengeNumber",True
"addMessage(address,string)","_MAX_MESSAGE_LENGTH, messages, messages, messages, messages",True
getChallengeNumber(),challengeNumber,False
getMiningDifficulty(),"_MAXIMUM_TARGET, targetForEpoch, epochCount",False
getMiningTarget(),"targetForEpoch, epochCount",False
getMiningReward(),"solutionForChallenge, challengeNumber, epochCount, decimals, epochCount, decimals, epochCount, decimals, epochCount, decimals, epochCount, decimals, epochCount, decimals, epochCount, decimals, epochCount, decimals, decimals",False
"getMintDigest(uint256,bytes32,bytes32)",,True
"checkMintSolution(uint256,bytes32,bytes32,uint)",,True
totalSupply(),_totalSupply,False
balanceOf(address),,False
donationTo(address),,False
changeDonation(address),,True
"transfer(address,uint)",,True
"transferAndDonateTo(address,uint,address)",,True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",,True
"allowance(address,address)",,False
"approveAndCall(address,uint,bytes)",,True
function()publicpayable{revert();}(),,False
"transferAnyERC20Token(address,uint)",owner,True
