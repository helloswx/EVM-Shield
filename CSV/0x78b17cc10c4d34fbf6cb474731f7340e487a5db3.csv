Function Name,State Variables Modified,Can Transfer Ether
UTEMIS(),"balance_, TOTAL_SUPPLY, owner, deadLine, START_ICO, ICO_DAYS, startTime, remaining, ICO_SUPPLY, ico_started",True
"transfer(address,uint)",,True
balanceOf(address),balance_,False
getInvestors(),"investorsAddress, investorsAddress, investorsList, investorsList",False
getTokensDistributeds(),"ICO_SUPPLY, remaining",False
getBonus(uint),"START_ICO, bonusTime, bonusTime, bonusPerInvestion_5, bonusPerInvestion_10, bonusBenefit",False
getTokensToSend(uint),VALUE_OF_UTS,False
setBeneficiary(address),"owner, beneficiary",True
startIco(),ico_started,False
stopIco(),ico_started,False
giveBackEthers(),"ethers_collected, investorsAddress, investorsAddress, investorsList, beneficiary, beneficiary, owner, beneficiary",True
"function()payablepublicicoStartedminValue{uintamount_actually_invested=investorsList[msg.sender].amount;if(amount_actually_invested==0){uintindex=investorsAddress.length++;investorsAddress[index]=msg.sender;investorsList[msg.sender]=Investors(msg.value,now);}if(amount_actually_invested>0){investorsList[msg.sender].amount+=msg.value;investorsList[msg.sender].when=now;}uinttokensToSend=getTokensToSend(msg.value);remaining-=tokensToSend;_transfer(owner,msg.sender,tokensToSend);require(balance_[owner]>=(TOTAL_SUPPLY-ICO_SUPPLY));require(balance_[owner]>=tokensToSend);if(address(beneficiary)==0){beneficiary=owner;}ethers_collected+=msg.value;ethers_balance+=msg.value;if(!beneficiary.send(msg.value)){revert();}FundTransfer(owner,msg.value,msg.sender);}()","investorsList, investorsAddress, investorsAddress, investorsList, investorsList, investorsList, remaining, owner, balance_, owner, TOTAL_SUPPLY, ICO_SUPPLY, balance_, owner, beneficiary, beneficiary, owner, ethers_collected, ethers_balance, beneficiary, owner",True
extendICO(uint),deadLine,False
destroyContract(),owner,False
