Function Name,State Variables Modified,Can Transfer Ether
"getReferrer(,address)",,False
getTreeSize(),,False
"payoff(,address)",,False
getBonusPercentage(uint),,False
isLeapYear(uint16),,False
leapYearsBefore(uint),,False
"getDaysInMonth(uint8,uint16)",,False
getYear(uint),,False
getMonth(uint),,False
getDay(uint),,False
getHour(uint),,False
getMinute(uint),,False
getSecond(uint),,False
getWeekday(uint),,False
"toTimestamp(uint16,uint8,uint8)",,False
"toTimestamp(uint16,uint8,uint8,uint8)",,False
"toTimestamp(uint16,uint8,uint8,uint8,uint8)",,False
"toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",,False
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
Share(),transferrers,True
"transferReward(address,uint)",,True
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
enableTransfers(),,False
addTransferrer(address),transferrers,True
releaseBonus(),,False
"Campaign(address,uint256)","token, budget",False
"join(address,address,uint)",owner,False
"sendReward(address,uint)","token, cost, cost",True
getReferrer(address),,False
getTreeSize(),,False
getBudget(),"token, budget",False
getAvailableBalance(),"budget, cost",False
function()public{revert();}(),,False
Vesting(address),vestingToken,False
"registerVestingSchedule(address,address,uint,uint,uint,uint,uint)",,False
"confirmVestingSchedule(uint,uint,uint,uint,uint)",vestingToken,True
withdrawVestedTokens(),vestingToken,True
"revokeSchedule(address,address)","vestingToken, vestingToken, vestingToken",True
"changeVestingAddress(address,address)",,False
"VyralSale(address,address)","phase, shareToken, dateTime",False
"initPresale(address,uint,uint,uint,uint)","SALE_ALLOCATION, campaign, wallet, presaleStartTimestamp, presaleEndTimestamp, presaleCap, presaleRate, shareToken, campaign, VYRAL_REWARDS, phase",True
startPresale(),phase,False
endPresale(),phase,False
"initSale(uint,uint,uint)","saleStartTimestamp, saleEndTimestamp, saleRate, saleCap, SALE_ALLOCATION, presaleCap, phase",False
startSale(),phase,False
finalizeSale(),phase,False
decomission(),phase,False
function()stopInEmergencypublicpayable{if(phase==Phase.Presale){buyPresale(0x0);}elseif(phase==Phase.Crowdsale){buySale(0x0);}else{revert();}}(),"phase, phase",False
buyPresale(address),"MIN_CONTRIBUTION, presaleCapReached, presaleRate, soldPresale, presaleCap, presaleCap, presaleRate, presaleCapReached, soldPresale, wallet, shareToken, dateTime, campaign, campaign, campaign, phase",True
buySale(address),"MIN_CONTRIBUTION, saleCapReached, saleRate, soldSale, saleCap, saleCap, saleRate, saleCapReached, soldSale, wallet, shareToken, campaign, campaign, phase",True
"setPresaleParams(uint,uint,uint,uint)","SALE_ALLOCATION, presaleStartTimestamp, presaleEndTimestamp, presaleRate, presaleCap",False
"setCrowdsaleParams(uint,uint,uint)","saleStartTimestamp, saleEndTimestamp, saleRate, saleCap, SALE_ALLOCATION, presaleCap",False
"rewardBeneficiary(address,uint)",campaign,True
"distributeTimelockedTokens(address,uint)",shareToken,True
replaceDecomissioned(address),"shareToken, shareToken, campaign",True
setCampaign(address),"campaign, campaign",False
setVesting(address),"vestingWallet, vestingWallet, shareToken, vestingWallet, TEAM, PARTNERS",False
toggleHALT(bool),"HALT, HALT",False
