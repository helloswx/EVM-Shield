Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
setOwner(address),owner,False
constructor(),workers,False
isWorker(address),workerToIndex,False
allWorkers(),"workers, workers, workers",False
addWorker(address),"workers, workerToIndex",False
removeWorker(address),"workerToIndex, workers, workers, workerToIndex, workers, workers, workerToIndex",False
"increaseApproval(address,uint)",,False
balanceOf(address),,False
constructor(),coldWallet,True
allAccounts(),accounts,False
pause(),paused,False
unpause(),paused,False
setLimitEth(uint256),limitEth,False
"setLimitToken(,uint256)",limitToken,False
addAccount(address),accounts,False
removeAccountSearch(address),"accounts, accounts",False
"removeAccount(uint256,address)","accounts, accounts, accounts, accounts, accounts",False
setColdWallet(address),coldWallet,False
"executeTransaction(address,uint256,bytes)",,True
loadEthBalances(),"accounts, accounts, accounts",False
loadTokenBalances(),"accounts, accounts, accounts",False
"function()publicpayable{if(gasleft()>2400){if(paused){coldWallet.transfer(address(this).balance);}else{uint256[]memorybalances;uint256total;(balances,total)=loadEthBalances();uint256value=address(this).balance;uint256targetTotal=min(limitEth,total+value);if(targetTotal>total){uint256targetPerHotwallet=getTargetPerWallet(targetTotal,balances);for(uint256i=0;i<balances.length;i++){if(balances[i]<targetPerHotwallet){accounts[i].transfer(targetPerHotwallet-balances[i]);}}}uint256toColdWallet=address(this).balance;if(toColdWallet!=0){coldWallet.transfer(toColdWallet);}}}}()","paused, coldWallet, limitEth, accounts, coldWallet",True
handleTokens(),"paused, coldWallet, limitToken, accounts, coldWallet",True
