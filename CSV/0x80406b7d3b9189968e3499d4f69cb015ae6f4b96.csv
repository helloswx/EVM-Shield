Function Name,State Variables Modified,Can Transfer Ether
constructor(),"startBlockNumber, endBlockNumber, startBlockNumber, liveBlocksNumber",True
"function()publicpayable{emitTransfer(msg.sender,0,0);require(block.number<endBlockNumber||msg.value<1000000000000000000);if(msg.value>0&&last_winner==0){uintval=msg.value/onePotWei;uinti=0;for(i;i<val;i++){tickets[ticketsNum+i]=msg.sender;}ticketsNum+=val;emitBuy(msg.sender,msg.value);}if(block.number>=endBlockNumber){EndLottery();}}()","endBlockNumber, last_winner, onePotWei, tickets, ticketsNum, ticketsNum, endBlockNumber",True
"transfer(address,uint)","tickets, tickets",True
manager_withdraw(),"endBlockNumber, liveBlocksNumber",True
EndLottery(),"endBlockNumber, ticketsNum, onePotWei, onePotWei, last_winner, winners_count, winners_count, winners_count, others_prize, others_prize, others_prize, others_prize, tickets, tickets, tickets, last_winner, last_winner, winners_count, others_prize, others_prize, winners_count, last_winner, winners_count, tickets, last_winner, last_winner",True
payfee(),"fee_balance, fee_balance, inv_contract, rtm_contract, fee_balance, inv_contract, rtm_contract",True
jackPotA(),,False
jackPotB(),,False
jackPotC(),,False
prizeFund(),"ticketsNum, onePotWei",False
"percent(uint,uint)",,False
getTicketOwner(uint),"ticketsNum, tickets",False
getTicketsCount(address),"ticketsNum, ticketsNum, tickets",False
balanceOf(address),"ticketsNum, ticketsNum, tickets",False
getTicketsAtAdress(address),"ticketsNum, tickets",False
getLastWinner(),last_winner,False
setRtmContract(address),rtm_contract,False
setAutoPayFee(bool),autopayfee,False
contractBalance(),,False
blockLeft(),"endBlockNumber, endBlockNumber",False
deposit(),,False
destroy(),,False
RNDInvestor(),"owner, balances, owner, totalSupply",True
"function()payablepublic{if(current_state==State.Public){takeEther();return;}require(buyAllowed);require(msg.value>=ownerPrice);require(msg.sender!=owner);uintwei_value=msg.value;uinttokens=wei_value/ownerPrice;uintcost=tokens*ownerPrice;if(current_state==State.Presale){tokens=tokens*2;}uintcurrentSoldAmount=safeAdd(tokens,soldAmount);if(current_state==State.Presale){require(currentSoldAmount<=1000);}require(balances[owner]>=tokens);balances[owner]=safeSub(balances[owner],tokens);balances[msg.sender]=safeAdd(balances[msg.sender],tokens);soldAmount=safeAdd(soldAmount,tokens);uintextra_ether=safeSub(msg.value,cost);if(extra_ether>0){msg.sender.transfer(extra_ether);}}()","current_state, buyAllowed, ownerPrice, owner, ownerPrice, ownerPrice, current_state, soldAmount, current_state, balances, owner, balances, owner, balances, owner, balances, balances, soldAmount, soldAmount",True
takeEther(),raised,False
setOwnerPrice(uint),ownerPrice,False
setTokenState(),"current_state, current_state, current_state, current_state",False
setBuyAllowed(bool),buyAllowed,False
allowTransfer(),transferAllowed,True
transferOwnership(address),owner,False
withdraw(),debited,True
ethBalanceOf(address),"raised, totalSupply, balances, debited, debited",False
manager_withdraw(),"addresses, addresses",True
manual_withdraw(),"addresses, addresses, addresses",True
checkAddress(address),"addresses, addresses, addresses",False
destroy(),owner,False
"transfer(address,uint256)","balances, balances, balances, balances, balances",True
"transferFrom(address,address,uint256)","balances, balances, balances, balances, balances",True
balanceOf(address),balances,False
"approve(address,uint256)",,True
"allowance(address,address)",,False
