Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
Owned(),owner,True
"changeKYCStatus(address,bool)","investors, mapInvestors, investors, mapInvestors",False
setRewardPoolWallet(address),rewardPoolWallet,False
isExistInvestor(address),mapInvestors,False
isExistFounder(address),founders,False
removeFounder(address),"founders, founders",False
addFounder(address),"founders, founders",False
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
"ELOVEToken(string,string)","symbol, name, decimals, _totalSupply, decimals, icoStartDate, roundEnd, roundTokenLeft, roundBonus, tokenFounderLockTime, roundEnd, tokenLockTime, owner, _totalSupply, owner, _totalSupply",False
"setRoundEnd(uint,uint)","roundEnd, roundEnd, roundEnd, tokenFounderLockTime",False
refundNonKYCInvestor(),"investors, investors, investors, investors, investors",True
setSoftCap(uint),,False
setEthExRate(uint),,False
setICOStartTime(uint),icoStartDate,False
setLockTime(uint),tokenLockTime,False
totalSupply(),_totalSupply,False
balanceOf(address),,False
"transfer(address,uint)","tokenLockTime, founders, tokenFounderLockTime, founders, rewardPoolWallet, mapInvestors, investors, mapInvestors, owner",True
"approve(address,uint)",,True
"transferFrom(address,address,uint)","founders, tokenFounderLockTime, founders, rewardPoolWallet, investors, mapInvestors",True
"allowance(address,address)",,False
"approveAndCall(address,uint,bytes)",,True
function()publicpayable{require(!icoEnded);uintcurrentTime=now;require(currentTime>icoStartDate);require(msg.value>=minInvest&&msg.value<=maxInvest);if(currentTime<roundEnd[0]){processRound(0);}elseif(currentTime<roundEnd[1]){processRound(1);}elseif(currentTime<roundEnd[2]){processRound(2);}elseif(currentTime<roundEnd[3]){processRound(3);}else{if(this.balance<softcap){for(uinti=0;i<investors.length;i++){investors[i].sender.transfer(investors[i].amount);}}else{require(rewardPoolWallet!=address(0));uintsumToBurn=roundTokenLeft[0]+roundTokenLeft[1]+roundTokenLeft[2]+roundTokenLeft[3];balances[owner]=balances[owner]-sumToBurn;balances[rewardPoolWallet]+=sumToBurn;roundTokenLeft[0]=roundTokenLeft[1]=roundTokenLeft[2]=roundTokenLeft[3]=0;}msg.sender.transfer(msg.value);icoEnded=true;}}(),"icoStartDate, roundEnd, roundEnd, roundEnd, roundEnd, investors, investors, investors, rewardPoolWallet, roundTokenLeft, roundTokenLeft, roundTokenLeft, roundTokenLeft, owner, owner, rewardPoolWallet, roundTokenLeft, roundTokenLeft, roundTokenLeft, roundTokenLeft",True
withdrawEtherToOwner(),"roundEnd, owner",True
"transferAnyERC20Token(address,uint)",owner,True
