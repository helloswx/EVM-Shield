Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),"owner, owner",False
"invest(address,uint)",,False
"times(uint,uint)",,False
"constructor(address,uint)","owner, freezeEndsAt",False
"function()publicpayable{require(presaleParticipantWhitelist[msg.sender]);require(trancheCount>0);addressinvestor=msg.sender;boolexisting=investorsMapping[investor];balances[investor]=balances[investor].add(msg.value);weiRaised=weiRaised.add(msg.value);require(weiRaised<=maxFundLimit);uintweiAmount=msg.value;uinttokenAmount=calculatePrice(weiAmount);tokenDue[investor]=tokenDue[investor].add(tokenAmount);if(!existing){investors.push(investor);investorsMapping[investor]=true;}emitInvested(investor,msg.value);}()","presaleParticipantWhitelist, trancheCount, investorsMapping, balances, balances, weiRaised, weiRaised, weiRaised, maxFundLimit, tokenDue, tokenDue, investors, investorsMapping",True
"setPresaleParticipantWhitelist(,bool)",presaleParticipantWhitelist,False
setFreezeEnd(uint),"freezeEndsAt, freezeEndsAt",False
participateCrowdsaleInvestor(address),"crowdsale, balances, balances, tokenDue, balances, tokenDue, crowdsale",False
participateCrowdsaleAll(),"investors, investors",False
participateCrowdsaleSelected(),investors,False
refund(),"freezeEndsAt, balances, balances, balances",True
setCrowdsale(),"crowdsale, crowdsale",False
getInvestorsCount(),investors,False
setPricing(),"MAX_TRANCHES, trancheCount, tranches, tranches, tranches, tranches, tranches, tranches, trancheCount",False
getCurrentPrice(),,False
calculatePrice(uint),tokenDecimals,False
getTranche(uint),"tranches, tranches",False
getPricingStartsAt(),,False
getPricingEndsAt(),,False
