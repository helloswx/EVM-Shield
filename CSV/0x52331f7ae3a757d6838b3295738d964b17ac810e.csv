Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),"owner, newOwner",False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"allowance(address,address)",,False
"function()noReentrancypayablepublic{require(crowdsaleState!=state.crowdsaleEnded);require(isAddressVerified(msg.sender));boolstateChanged=checkCrowdsaleState();if(crowdsaleState==state.crowdsale){processTransaction(msg.sender,msg.value);}else{refundTransaction(stateChanged);}}()","crowdsaleState, crowdsaleState",True
setEthToTokenConversion(uint),"crowdsaleState, ethToTokenConversion",False
setMaxCap(uint),"crowdsaleState, maxCap",False
"calculateEthToToken(uint,uint)","ethToTokenConversion, ethToTokenConversion",False
"calculateTokenToEth(uint,uint)","ethToTokenConversion, ethToTokenConversion, ethToTokenConversion",False
"salvageTokensFromContract(address,address,uint)",,True
withdrawEth(),"tokensIssued, minCap, multisigAddress",True
investorCount(),nextContributorIndex,False
setCrowdsaleStartBlock(uint),"crowdsaleState, crowdsaleStartBlock",False
setCrowdsaleEndBlock(uint),"crowdsaleState, crowdsaleEndedBlock",False
isAddressVerified(address),verifiedAddresses,False
getContributorData(address),"verifiedAddresses, tierList, tierList, tierList",False
"addAddress(address,uint)","verifiedAddresses, verifiedAddresses",False
removeAddress(address),"verifiedAddresses, verifiedAddresses",False
"batchAddAddresses(,)","verifiedAddresses, verifiedAddresses",False
constructor(),"crowdsaleStartBlock, crowdsaleEndedBlock, minCap, maxCap, ethToTokenConversion, blocksInADay, multisigAddress, tierList, tierList, tierList, tierList, tierList, tierList, tierList, tierList",False
