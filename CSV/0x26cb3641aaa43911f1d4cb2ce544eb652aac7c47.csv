Function Name,State Variables Modified,Can Transfer Ether
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
"transfer(address,uint256)","locked, admin, receivable",True
balanceOf(address),,False
"allowance(address,address)",,False
"approve(address,uint256)",,True
"increaseApproval(address,uint)",,True
"decreaseApproval(address,uint)",,True
"transferFrom(address,address,uint256)",,True
CrystalToken(address),"wallet, totalSupply, INITIAL_SUPPLY, INITIAL_SUPPLY, admin, locked, runningRound",True
"function()publicpayable{addressbeneficiary=msg.sender;require(beneficiary!=0x0);uint256weiAmount=msg.value;require(weiAmount!=0);uint256roundIndex=runningRound;require(roundIndex!=uint256(100));Roundstorageround=rounds[roundIndex];uint256tokens=weiAmount.mul(round.rate);uint256maxPerUser=round.maxPerUser;uint256remaining=maxPerUser-round.balances[beneficiary];if(remaining<tokens)tokens=remaining;require(areTokensBuyable(roundIndex,tokens));round.availableTokens=round.availableTokens.sub(tokens);round.balances[msg.sender]=round.balances[msg.sender].add(tokens);balances[owner]=balances[owner].sub(tokens);balances[beneficiary]=balances[beneficiary].add(tokens);Transfer(owner,beneficiary,tokens);TokenPurchase(beneficiary,beneficiary,weiAmount,tokens);weiRaised=weiRaised.add(weiAmount);wallet.transfer(msg.value);}()","runningRound, owner, owner, owner, weiRaised, weiRaised, wallet",True
tokenBalance(),owner,False
burn(uint256),"totalSupply, totalSupply",True
mint(uint256),"totalSupply, totalSupply",True
setTokensLocked(bool),locked,False
setRound(uint256),runningRound,False
"setAdmin(address,bool)",admin,False
"setReceivable(address,bool)",receivable,False
"setRoundStart(uint,uint256)",,False
"setRoundEnd(uint,uint256)",,False
"setRoundAvailableToken(uint,uint256)",,False
"setRoundMaxPerUser(uint,uint256)",,False
"setRoundRate(uint,uint256,uint256)",,True
"getRoundUserBalance(uint,address)",,False
getRoundStart(uint),,False
getRoundEnd(uint),,False
getRoundAvailableToken(uint),,False
getRoundMaxPerUser(uint),,False
getRoundRate(uint),,False
