Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
reclaimToken(),owner,False
transferOwnership(address),pendingOwner,False
claimOwnership(),"owner, pendingOwner, owner, pendingOwner, pendingOwner",False
reclaimContract(address),owner,True
"tokenFallback(address,uint256,bytes)",,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
"mint(address,uint256)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
VITToken(),,False
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
"VITTokenSale(address,uint256,uint256,uint256,uint256,)","RESTRICTED_PERIOD_DURATION, fundingRecipient, startTime, endTime, refundEndTime, vitPerWei, strategicPartnersPools, vitToken",False
"function()externalpayableonlyDuringSale{addressrecipient=msg.sender;uint256cappedWeiReceived=msg.value;uint256weiAlreadyParticipated=participationHistory[recipient];if(saleDuringRestrictedPeriod()){uint256participationCap=participationCaps[recipient];cappedWeiReceived=Math.min256(cappedWeiReceived,participationCap.sub(weiAlreadyParticipated));}require(cappedWeiReceived>0);uint256tokensLeftInSale=MAX_TOKENS_SOLD.sub(tokensSold);uint256weiLeftInSale=tokensLeftInSale.div(vitPerWei);uint256weiToParticipate=Math.min256(cappedWeiReceived,weiLeftInSale);participationHistory[recipient]=weiAlreadyParticipated.add(weiToParticipate);uint256tokensToIssue=weiToParticipate.mul(vitPerWei);if(tokensLeftInSale.sub(tokensToIssue)<vitPerWei){tokensToIssue=tokensLeftInSale;}refundableEther[recipient]=refundableEther[recipient].add(weiToParticipate);claimableTokens[recipient]=claimableTokens[recipient].add(tokensToIssue);totalClaimableTokens=totalClaimableTokens.add(tokensToIssue);tokensSold=tokensSold.add(tokensToIssue);issueTokens(address(this),tokensToIssue);uint256refund=msg.value.sub(weiToParticipate);if(refund>0){msg.sender.transfer(refund);}}()","participationHistory, participationCaps, MAX_TOKENS_SOLD, tokensSold, vitPerWei, participationHistory, vitPerWei, vitPerWei, refundableEther, refundableEther, claimableTokens, claimableTokens, totalClaimableTokens, totalClaimableTokens, tokensSold, tokensSold",True
"setRestrictedParticipationCap(,uint256)",participationCaps,False
finalize(),"tokensSold, MAX_TOKENS_SOLD, fundingRecipient, MAX_TOKENS_SOLD, tokensSold, vitToken",False
finalizeRefunds(),"finalizedRefund, finalizedRefund, fundingRecipient",True
reclaimToken(),"vitToken, totalClaimableTokens, owner",True
claimTokens(uint256),"claimableTokens, claimableTokens, refundableEther, refundableEther, claimableTokens, totalClaimableTokens, totalClaimableTokens, vitToken, finalizedRefund, fundingRecipient",True
claimAllTokens(),claimableTokens,True
refundEther(uint256),"refundableEther, claimableTokens, refundableEther, claimableTokens, totalClaimableTokens, totalClaimableTokens, vitToken, fundingRecipient",True
refundAllEther(),refundableEther,True
