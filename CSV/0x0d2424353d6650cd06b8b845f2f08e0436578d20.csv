Function Name,State Variables Modified,Can Transfer Ether
transferOwnership(address),"owner, owner",False
balanceOf(address),,False
"transfer(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,True
"approve(address,uint256)",,True
"allowance(address,address)",,False
"mint(address,uint256)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
getQuorumPercent(),"isVotingActive, ballotStarted, initialQuorumPercent, initialQuorumPercent, initialQuorumPercent",False
vote(bytes),,True
isDataYes(bytes),,False
isDataNo(bytes),,False
unlock(),isLocked,False
"transfer(address,uint256)","isLocked, lastMovement, lastMovement",True
"transferFrom(address,address,uint256)","isLocked, lastMovement, lastMovement",True
"approve(address,uint256)",isLocked,False
"burnFrom(address,uint256)","totalSupply, totalSupply",True
claimTokens(address),"owner, token, token, owner",True
MultiOwnable(),multiOwnableCreator,True
setupOwners(),"multiOwnableCreator, ownerRegistry, ownerRegistry",True
getOwners(),,False
function()publicpayable{if(whitelist[msg.sender]){buyForWhitelisted();}else{buyTokens();}}(),whitelist,True
setTokenContract(address),"token, token",False
buyForWhitelisted(),"token, whitelist, weiRaised, weiRaised, raisedByAddress, raisedByAddress, token",True
buyTokens(),"token, saleCapUsd, weiRaised, weiRaised, weiRaised, raisedByAddress, raisedByAddress, token",True
finalizeByAdmin(),,False
getTokenRateEther(),tokenRateUsd,False
whitelistInvestor(address),"whitelist, whitelist, whitelistedInvestorCounter",False
whitelistInvestors(),"whitelist, whitelist, whitelistedInvestorCounter",False
blacklistInvestor(address),"whitelist, whitelist, whitelistedInvestorCounter, whitelistedInvestorCounter",False
"claimTokens(address,address)","token, token",True
vote(bytes),,True
isDataYes(bytes),,False
isDataNo(bytes),,False
getQuorumPercent(),"ballotStarted, initialQuorumPercent",False
Treasury(address),,False
function()publicpayable{require(msg.sender==address(crowdsaleContract));Deposit(msg.value);}(),crowdsaleContract,True
setVotingProxy(address),"votingProxyContract, votingProxyContract",False
setCrowdsaleContract(address),"crowdsaleContract, crowdsaleContract",False
setTokenContract(address),"tokenContract, tokenContract",False
setCrowdsaleFinished(),"crowdsaleContract, crowdsaleContract, withdrawChunk, weiUnlocked, withdrawChunk, isCrowdsaleFinished",True
withdrawTeamFunds(),"isCrowdsaleFinished, weiUnlocked, weiWithdrawed, weiUnlocked, weiWithdrawed, weiWithdrawed, weiUnlocked",True
getWeiRaised(),crowdsaleContract,False
enableRefunds(),"votingProxyContract, isRefundsEnabled",True
refundInvestor(uint256),"isRefundsEnabled, tokenContract, refundsIssued, percentLeft, crowdsaleContract, percentLeft, tokenContract, refundsIssued, refundsIssued",True
percentLeftFromTotalRaised(),,False
"claimTokens(address,address)","token, token",True
startRefundInvestorsBallot(),"treasuryContract, currentIncreaseWithdrawalTeamBallot, currentIncreaseWithdrawalTeamBallot, currentRefundInvestorsBallot, currentRefundInvestorsBallot, tokenContract, currentRefundInvestorsBallot, tokenContract",False
getDaysPassedSinceLastRefundBallot(),currentRefundInvestorsBallot,False
getDaysPassedSinceLastTeamFundsBallot(),currentIncreaseWithdrawalTeamBallot,False
proxyIncreaseWithdrawalChunk(),"currentIncreaseWithdrawalTeamBallot, treasuryContract",True
proxyEnableRefunds(),"currentRefundInvestorsBallot, treasuryContract",True
claimTokens(address),"owner, token, token, owner",True
