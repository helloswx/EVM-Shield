Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
totalSupply(),,False
"transfer(address,uint256)","balances, balances, balances, balances, balances",True
balanceOf(address),balances,False
"transferFrom(address,address,uint256)","balances, allowed, balances, balances, balances, balances, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
"mint(address,uint256)","balances, balances",False
finishMinting(),mintingFinished,False
burn(uint256),,True
constructor(),"INITIAL_SUPPLY, balances, INITIAL_SUPPLY, INITIAL_SUPPLY",True
constructor(address),,False
function()public{require(lib.delegatecall(msg.data));}(),,True
quotaOf(address),"balances, minimalFreeze",False
"constructor(address,uint256,uint256)","minimalFreeze, timeoutBlocks, factory, xrt, factory",True
constructor(address),factory,True
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setOwner(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
PublicResolver(),ens,False
"setAddr(bytes32,address)",,False
"setContent(bytes32,bytes32)",,False
"setMultihash(bytes32,bytes)",,False
"setName(bytes32,string)","name, name",False
"setABI(bytes32,uint256,bytes)",,False
"setPubkey(bytes32,bytes32,bytes32)",,False
"setText(bytes32,string,string)",,False
"text(bytes32,string)",,False
pubkey(bytes32),,False
"ABI(bytes32,uint256)",,False
name(bytes32),,False
content(bytes32),,False
multihash(bytes32),,False
addr(bytes32),,False
supportsInterface(bytes4),,False
"constructor(address,address,)","robotLiabilityLib, lighthouseLib, xrt",False
setENS(),"ens, ens, resolver, ens",False
winnerFromGas(uint256),,False
"createLiability(bytes,bytes)","robotLiabilityLib, xrt, token, xrt, totalGasUtilizing, gasUtilizing",True
"createLighthouse(uint256,uint256,string)","ens, lighthouseLib, isLighthouse, ens, ens, resolver, resolver",False
liabilityFinalized(uint256),"gasUtilizing, totalGasUtilizing, gasUtilizing, xrt, gasUtilizing",True
