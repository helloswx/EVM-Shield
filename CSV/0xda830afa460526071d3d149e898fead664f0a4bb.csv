Function Name,State Variables Modified,Can Transfer Ether
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
Controlled(),controller,True
changeController(address),controller,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",totalSupply,False
"destroyTokens(address,uint)",totalSupply,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, token, token, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
startSale(),"campaignState, campaignState, tCampaignStart, t_1st_StageEnd, t_2nd_StageEnd, tCampaignEnd",False
pauseSale(),"campaignState, paused",False
resumeSale(),"campaignState, paused",False
closeSale(),"campaignState, campaignState",False
"setParticipantWhitelist(address,bool,uint256)",participantWhitelist,False
"setMultipleParticipantWhitelist(,,)",,False
investorCount(),joinedCrowdsale,False
contractBalance(),,False
refund(),"campaignState, participantList, participantList, participantList, participantList, participantList, participantList, participantList, participantList, participantList, amountRefunded, amountRefunded",True
allocateInvestors(),"campaignState, campaignState, tCampaignEnd, investorsProcessed, investorsBatchSize, joinedCrowdsale, joinedCrowdsale, investorsProcessed, investorsProcessed, joinedCrowdsale, participantList, isWhiteListed, participantWhitelist, participantWhitelist, participantWhitelist, participantWhitelist, preCrowd_tokens_scaled, maxPreCrowdAllocationPerInvestor, maxPreCrowdAllocationPerInvestor, tokensRemainingPreCrowd, tokensRemainingPreCrowd, participantList, joinedCrowdsale, participantList, joinedCrowdsale, tokensRemainingPreCrowd, tokensRemainingPreCrowd, participantList, participantList, participantList, isWhiteListed, participantWhitelist, participantWhitelist, participantWhitelist, participantWhitelist, stage_1_tokens_scaled, maxStage1AllocationPerInvestor, maxStage1AllocationPerInvestor, tokensRemainingStage1, tokensRemainingStage1, participantList, joinedCrowdsale, participantList, joinedCrowdsale, tokensRemainingStage1, tokensRemainingStage1, participantList, participantList, participantList, isWhiteListed, participantWhitelist, participantWhitelist, participantWhitelist, participantWhitelist, stage_2_tokens_scaled, maxStage2AllocationPerInvestor, maxStage2AllocationPerInvestor, tokensRemainingStage2, tokensRemainingStage2, participantList, joinedCrowdsale, participantList, joinedCrowdsale, tokensRemainingStage2, tokensRemainingStage2, participantList, participantList, participantList, isWhiteListed, participantWhitelist, participantWhitelist, participantWhitelist, participantWhitelist, stage_3_tokens_scaled, maxStage3AllocationPerInvestor, maxStage3AllocationPerInvestor, tokensRemainingStage3, tokensRemainingStage3, participantList, joinedCrowdsale, participantList, joinedCrowdsale, tokensRemainingStage3, tokensRemainingStage3, participantList, participantList, participantList",False
finalizeCampaign(),"campaignState, campaignState, tCampaignEnd, campaignState, tokensGenerated, PRCT100_D_TEAM, tokensGenerated, PRCT100_R_TEAM, tokensGenerated, PRCT100_R2, FIXEDREWARD_MM, dteamVaultAddr1, dteamVaultAddr2, dteamVaultAddr3, dteamVaultAddr4, rteamVaultAddr, r2VaultAddr, mmVaultAddr, hardcap, tokensGenerated, reserveVaultAddr, token, tFinalized, tFinalized",False
retrieveFunds(),"campaignState, trusteeVaultAddr",True
emergencyFinalize(),"campaignState, token",False
"preallocate(address,uint,uint)","campaignState, scale, participantList, participantList, joinedCrowdsale, participantList, participantList, participantList, participantList, amountRaised, amountRaised",False
"airdrop(address,uint)","campaignState, scale, participantList, participantList, joinedCrowdsale, participantList, participantList",False
"multiAirdrop(,)",campaignState,False
setInvestorsBatchSize(uint256),investorsBatchSize,False
setMaxPreCrowdAllocationPerInvestor(uint256),maxPreCrowdAllocationPerInvestor,False
setMaxStage1AllocationPerInvestor(uint256),maxStage1AllocationPerInvestor,False
setMaxStage2AllocationPerInvestor(uint256),maxStage2AllocationPerInvestor,False
setMaxStage3AllocationPerInvestor(uint256),maxStage3AllocationPerInvestor,False
setdteamVaultAddr1(address),dteamVaultAddr1,False
setdteamVaultAddr2(address),dteamVaultAddr2,False
setdteamVaultAddr3(address),dteamVaultAddr3,False
setdteamVaultAddr4(address),dteamVaultAddr4,False
setrteamVaultAddr(address),rteamVaultAddr,False
setr2VaultAddr(address),r2VaultAddr,False
setmmVaultAddr(address),mmVaultAddr,False
settrusteeVaultAddr(address),trusteeVaultAddr,False
setopVaultAddr(address),opVaultAddr,False
toggleWhitelist(bool),isWhiteListed,False
proxy_contribution(address),,False
claimTokens(address),"controller, controller",True
