Function Name,State Variables Modified,Can Transfer Ether
setGod(address),godAddress,False
setManager(address),managerAddress,False
setBursar(address),bursarAddress,False
destroy(),godAddress,False
pause(),paused,False
unpause(),paused,False
"socialIdentityToCardId(uint256,uint256)",socialIdentityMappings,False
"lookUpClaimerAddress(uint256,address)",claimerAddressToCardIdMappings,False
totalNumberOfCards(),allCards,False
tokensOfOwner(address),"ownerAddressToCardCount, cardIdToOwner",False
CryptoFamousStorage(),"godAddress, managerAddress, bursarAddress",True
"function()externalpayable{FallbackEtherReceived(msg.sender,msg.value);}()",,True
"authorized_setCardPerkText(uint256,string)",cardIdToPerkText,False
setAuthorizedLogicContractAddress(address),authorizedLogicContractAddress,False
"authorized_changeOwnership(address,address,uint256)",,False
"authorized_createCard(uint256,uint256,address,address)",,False
"authorized_updateSaleInfo(uint256,uint256)",cardIdToSaleInfo,False
"authorized_updateCardClaimerAddress(uint256,address)",allCards,False
"authorized_updateCardReserved1(uint256,uint8)",allCards,False
authorized_triggerStashedPayoutTransfer(uint256),"allCards, cardIdToStashedPayout, cardIdToStashedPayout, totalStashedPayouts",True
authorized_recordStashedPayout(uint256),"cardIdToStashedPayout, totalStashedPayouts",False
authorized_recordFailedOldOwnerTransfer(address),"addressToFailedOldOwnerTransferAmount, totalFailedOldOwnerTransferAmounts",False
authorized_recordPlatformFee(),,False
netContractBalance(),"totalStashedPayouts, totalFailedOldOwnerTransferAmounts",False
bursarPayOutNetContractBalance(address),bursarAddress,True
withdrawFailedOldOwnerTransferAmount(),"addressToFailedOldOwnerTransferAmount, addressToFailedOldOwnerTransferAmount, totalFailedOldOwnerTransferAmounts",True
CryptoFamous(address),"godAddress, managerAddress, bursarAddress, verifierAddress, storageContract",True
"function()externalpayable{FallbackEtherReceived(msg.sender,msg.value);}()",,True
"setEconomyParameters(uint128,uint128,uint128,uint128,uint128,uint128,uint128)",,False
setVerifier(address),verifierAddress,False
"claimTwitterId(uint256,address,uint8,bytes32,bytes32)",TWITTER,False
"claimSocialNetworkIdentity(uint256,uint256,address,uint8,bytes32,bytes32)",,False
"setCardPerkText(uint256,string)",storageContract,True
stealCardWithTwitterId(uint256),TWITTER,False
"stealCardWithSocialIdentity(uint256,uint256)",,False
stealCardWithId(uint256),,False
"claimTwitterIdIfNeededThenStealCardWithTwitterId(uint256,address,uint8,bytes32,bytes32,uint256)","TWITTER, TWITTER",False
"claimIfNeededThenSteal(uint256,uint256,address,uint8,bytes32,bytes32,uint256,uint256)",,False
"currentPriceInfoOf(uint256,uint256)","storageContract, PLATFORM_FEE_RATE, OWNER_TAKE_SHARE, CARD_TAKE_SHARE, storageContract",False
"decayedPriceFrom(uint256,uint256)","INITIAL_CARD_PRICE, PURCHASE_PREMIUM_RATE, HOURLY_VALUE_DECAY_RATE, MIN_CARD_PRICE, MIN_CARD_PRICE, MIN_CARD_PRICE",False
decayedPriceOfTwitterId(uint256),TWITTER,False
"decayedPriceOfSocialIdentity(uint256,uint256)",storageContract,False
decayedPriceOfCard(uint256),storageContract,False
ownerOfTwitterId(uint256),TWITTER,False
"ownerOfSocialIdentity(uint256,uint256)","storageContract, storageContract",False
claimerOfTwitterId(uint256),TWITTER,False
"claimerOfSocialIdentity(uint256,uint256)","storageContract, storageContract",False
twitterIdOfClaimerAddress(address),TWITTER,False
"socialIdentityOfClaimerAddress(uint256,address)","storageContract, storageContract",False
withdrawContractBalance(address),bursarAddress,True
