Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
"setOwner(bytes32,address)",,False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
supportsInterface(bytes4),,False
addr(bytes32),,False
"setAddr(bytes32,address)",,False
hash(bytes32),,False
"setHash(bytes32,bytes32)",,False
isSigner(address),signers,False
addSigner(address),,False
renounceSigner(),,True
totalSupply(),_totalSupply,False
balanceOf(address),"_balances, owner",False
"allowance(address,address)","_allowed, owner",False
"transfer(address,uint256)",,True
"approve(address,uint256)",_allowed,True
"transferFrom(address,address,uint256)","_allowed, _allowed, _allowed",True
"increaseAllowance(address,uint256)","_allowed, _allowed, _allowed",True
"decreaseAllowance(address,uint256)","_allowed, _allowed, _allowed",True
burn(uint256),,True
"burnFrom(address,uint256)",,False
"constructor(address,uint,uint,uint)","owner, wallet, maxTokenSold, ceiling, priceFactor, stage",True
"setup(,address)","token, ambix, token, maxTokenSold, stage",False
startAuction(),"stage, startBlock",False
calcCurrentTokenPrice(),"stage, stage, finalPrice",False
updateStage(),stage,False
bid(bytes),"maxTokenSold, totalReceived, ceiling, totalReceived, wallet, bids, totalReceived",True
claimTokens(),"bids, finalPrice, bids, token",True
calcStopPrice(),"totalReceived, maxTokenSold",False
calcTokenPrice(),"priceFactor, startBlock",False
"demand(bytes,bytes,address,uint256,address,address,uint256,uint256,bytes32,bytes)",,False
"offer(bytes,bytes,address,uint256,address,address,uint256,uint256,bytes32,bytes)",,False
"finalize(bytes,bool,bytes)",,False
providersLength(),providers,False
quotaOf(address),"stakes, minimalStake",False
refill(uint256),,False
withdraw(uint256),,False
"createLiability(bytes,bytes)",,False
"finalizeLiability(address,bytes,bool,bytes)",,False
wnFromGas(uint256),,False
"createLighthouse(uint256,uint256,string)",,False
"createLiability(bytes,bytes)",,False
"liabilityCreated(,uint256)",,False
"liabilityFinalized(,uint256)",,False
isMinter(address),minters,False
addMinter(address),,False
renounceMinter(),,True
"mint(address,uint256)",,False
"constructor(string,string,uint8)","_name, _symbol, _decimals",False
name(),_name,False
symbol(),_symbol,False
decimals(),_decimals,False
constructor(uint256),,True
"setup(,uint256,uint256)","factory, minimalStake, timeoutInBlocks, factory, xrt",True
refill(uint256),"xrt, stakes, minimalStake, providers, indexOf, providers, stakes",True
withdraw(uint256),"stakes, stakes, xrt, stakes, stakes, xrt, indexOf, providers, providers, providers, providers, indexOf",True
"createLiability(bytes,bytes)","factory, factory",False
"finalizeLiability(address,bytes,bool,bytes)","factory, factory",False
decision(),,False
setup(),"factory, factory, xrt",True
"demand(bytes,bytes,address,uint256,address,address,uint256,uint256,bytes32,bytes)","factory, model, objective, token, cost, lighthouse, validator, validatorFee, demandHash, promisee, demandHash",True
"offer(bytes,bytes,address,uint256,address,address,uint256,uint256,bytes32,bytes)","factory, model, objective, token, cost, lighthouse, validator, lighthouseFee, offerHash, promisor, offerHash",True
"finalize(bytes,bool,bytes)","lighthouse, isFinalized, promisor, isFinalized, result, validator, isSuccess, xrt, validator, validatorFee, isSuccess, validator, cost, token, isSuccess, promisor, promisee, cost, isSuccess, result",True
"constructor(address,address,,,)","liabilityCode, lighthouseCode, auction, ens, xrt",False
wnFromGas(uint256),"auction, totalGasConsumed, gasEpoch, gasPrice, auction",False
"createLighthouse(uint256,uint256,string)","_name, ens, lighthouse, lighthouseCode, lighthouse, xrt, lighthouse, _name, isLighthouse, lighthouse, ens, ens, ens, lighthouse",False
"createLiability(bytes,bytes)","liabilityCode, xrt, isLighthouse, xrt, token, xrt",True
"liabilityCreated(,uint256)","totalGasConsumed, gasConsumedOf",False
"liabilityFinalized(,uint256)","totalGasConsumed, gasConsumedOf, xrt, gasConsumedOf",False
