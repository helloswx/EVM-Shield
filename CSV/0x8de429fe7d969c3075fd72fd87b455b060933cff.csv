Function Name,State Variables Modified,Can Transfer Ether
"registerManyUsers(,uint256)",,False
"attachManyAddresses(,)",,False
detachManyAddresses(),,False
userCount(),,False
userId(address),,False
addressConfirmed(address),,False
validUntilTime(uint256),,False
suspended(uint256),,False
"extended(uint256,uint256)",,False
isAddressValid(address),,False
isValid(uint256),,False
"registerUser(address,uint256)",,False
"attachAddress(uint256,address)",,False
confirmSelf(),,False
detachAddress(address),,False
detachSelf(),,False
detachSelfAddress(address),,False
suspendUser(uint256),,False
unsuspendUser(uint256),,False
suspendManyUsers(),,False
unsuspendManyUsers(),,False
"updateUser(uint256,uint256,bool)",,False
"updateManyUsers(,uint256,bool)",,False
"updateUserExtended(uint256,uint256,uint256)",,False
"updateManyUsersExtended(,uint256,uint256)",,False
rateWEIPerCHFCent(),,False
convertWEIToCHFCent(uint256),,False
convertCHFCentToWEI(uint256),,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
minimalAutoWithdraw(),,False
minimalBalance(),,False
basePriceCHFCent(),,False
token(),,False
vaultETH(),,False
vaultERC20(),,False
userRegistry(),,False
ratesProvider(),,False
sharePurchaseAgreementHash(),,False
startAt(),,False
endAt(),,False
raisedETH(),,False
raisedCHF(),,False
totalRaisedCHF(),,False
refundedETH(),,False
availableSupply(),,False
investorUnspentETH(uint256),,False
investorInvestedCHF(uint256),,False
investorAcceptedSPA(uint256),,False
investorAllocations(uint256),,False
investorTokens(uint256),,False
investorCount(),,False
defineSPA(bytes32),,False
acceptSPA(bytes32),,False
investETH(),,False
"addOffChainInvestment(address,uint256)",,False
"updateSchedule(uint256,uint256)",,False
"allocateTokens(address,uint256)",,False
"allocateManyTokens(,)",,False
fundETH(),,False
refundManyUnspentETH(),,False
refundUnspentETH(address),,False
withdrawETHFunds(),,False
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
authorityAddress(),,False
"defineAuthority(string,address)",,False
"constructor(,,,address,address)","token, userRegistry, ratesProvider, vaultERC20, vaultETH",False
"function()externalpayable{require(msg.data.length==0,""TOS05"");investETH();}()",,False
token(),token,False
vaultETH(),vaultETH,False
vaultERC20(),vaultERC20,False
userRegistry(),userRegistry,False
ratesProvider(),ratesProvider,False
sharePurchaseAgreementHash(),sharePurchaseAgreementHash,False
startAt(),startAt,False
endAt(),endAt,False
raisedETH(),raisedETH,False
raisedCHF(),raisedCHF,False
totalRaisedCHF(),totalRaisedCHF,False
refundedETH(),refundedETH,False
availableSupply(),"token, vaultERC20, token, vaultERC20",False
investorUnspentETH(uint256),,False
investorInvestedCHF(uint256),,False
investorAcceptedSPA(uint256),,False
investorAllocations(uint256),,False
investorTokens(uint256),,False
investorCount(),investorCount,False
minimalAutoWithdraw(),,False
minimalBalance(),minimalBalance,False
basePriceCHFCent(),,False
updateMinimalBalance(uint256),minimalBalance,False
defineSPA(bytes32),sharePurchaseAgreementHash,False
acceptSPA(bytes32),"sharePurchaseAgreementHash, userRegistry, investorCount",True
investETH(),,True
"addOffChainInvestment(address,uint256)",,False
"updateSchedule(uint256,uint256)","startAt, endAt",False
"allocateTokens(address,uint256)","userRegistry, allocatedTokens, allocatedTokens, allocatedTokens",False
"allocateManyTokens(,)",,False
fundETH(),,False
refundManyUnspentETH(),,False
refundUnspentETH(address),"userRegistry, refundedETH, refundedETH",True
withdrawETHFunds(),"minimalBalance, minimalBalance, vaultETH, vaultETH",True
withdrawAllETHFunds(),"vaultETH, vaultETH",True
