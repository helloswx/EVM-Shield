Function Name,State Variables Modified,Can Transfer Ether
withdraw(),"balanceOf, balanceOf",True
constructor(),,False
setQuestionFee(uint256),arbitrator_question_fees,True
createTemplate(string),"templates, template_hashes",True
"createTemplateAndAskQuestion(string,string,address,uint32,uint32,uint256)",arbitrator,False
"askQuestion(uint256,string,address,uint32,uint32,uint256)","templates, arbitrator, arbitrator, arbitrator",True
fundAnswerBounty(bytes32),"questions, questions, questions",True
"submitAnswer(bytes32,bytes32,uint256)",questions,True
"submitAnswerCommitment(bytes32,bytes32,uint256,address)","commitments, questions, commitments",True
"submitAnswerReveal(bytes32,bytes32,uint256,uint256)","commitments, commitments, commitments, commitments, questions, questions",True
"notifyOfArbitrationRequest(bytes32,address,uint256)","questions, questions",False
"submitAnswerByArbitrator(bytes32,bytes32,address)",questions,False
isFinalized(bytes32),"questions, questions",False
getFinalAnswer(bytes32),questions,False
resultFor(bytes32),questions,False
"getFinalAnswerIfMatches(bytes32,bytes32,address,uint32,uint256)","questions, arbitrator, questions, questions, questions, questions",False
"claimWinnings(bytes32,,,,)","question_claims, question_claims, question_claims, questions, questions, question_claims, question_claims, question_claims, question_claims, questions",False
"claimMultipleAndWithdrawBalance(,,,,,)",,False
getContentHash(bytes32),questions,False
getArbitrator(bytes32),questions,False
getOpeningTS(bytes32),questions,False
getTimeout(bytes32),questions,False
getFinalizeTS(bytes32),questions,False
isPendingArbitration(bytes32),questions,False
getBounty(bytes32),questions,False
getBestAnswer(bytes32),questions,False
getHistoryHash(bytes32),questions,False
getBond(bytes32),questions,False
"createDispute(uint,bytes)",,False
arbitrationCost(bytes),,False
"appeal(uint,bytes)",,True
"appealCost(uint,bytes)",,False
appealPeriod(uint),,False
disputeStatus(uint),,False
currentRuling(uint),,False
"rule(uint,uint)",,False
"constructor(,bytes)","arbitrator, arbitratorExtraData",False
"rule(uint,uint)",,True
"constructor(,bytes,)","deployer, realitio",True
setMetaEvidence(string),"deployer, deployer",True
"requestArbitration(bytes32,uint)","arbitrator, arbitratorExtraData, disputeIDToQuestionID, questionIDToDisputer, realitio, arbitrator",True
"reportAnswer(bytes32,bytes32,bytes32,uint,address,bool)","realitio, questionIDToRuled, realitio, questionIDToAnswer, questionIDToDisputer, questionIDToAnswer, questionIDToRuled",False
getDisputeFee(bytes32),"arbitrator, arbitratorExtraData",False
