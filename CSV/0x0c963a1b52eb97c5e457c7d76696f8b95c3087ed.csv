Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),"owner, owner",False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
constructor(),"owner, period, duration, percentagePerPeriod, percentagePerPeriod, percentagePerPeriod, percentagePerPeriod",True
balanceOf(address),"balances, released",False
"vesting(address,uint256)","balances, balances, balances, balances",False
release(address),"balances, period, balances, released, balances, balances, balances, duration, balances, percentagePerPeriod, balances, released, released, balances, balances, owner",True
totalSupply(),,False
"transfer(address,uint256)","balances, balances, balances, balances, balances",True
balanceOf(address),balances,False
"transferFrom(address,address,uint256)","balances, balances, balances, balances, balances",True
"approve(address,uint256)",,True
"allowance(address,address)",,False
"increaseApproval(address,uint)",,True
"decreaseApproval(address,uint)",,True
burn(uint256),,True
constructor(),"balances, owner, balances, owner, tokenReserve, tokenReserve, remainingTokens, cap, remainingTokensForICO, tokenReserveForICO, remainingTokensForPrivateSales, tokenReserveForPrivateSales, tokenVestingContract, owner, tokenReserve",False
"function()externalpayable{require(!haltedICO);require(currentStage==Stages.icoStart);require(msg.value>0);require(remainingTokensForICO>0);require(minTransaction<=msg.value);require(maxTransaction>=msg.value);uint256weiAmount=msg.value;uint256bonusTokens;uint256tokens=weiAmount.mul(basePrice).div(1ether);uint256returnWei=0;if(totalSalesInEther.add(weiAmount)<=discountUntilSales&&!buyerGetDiscount[msg.sender]){bonusTokens=tokens.div(10);totalSalesInEther=totalSalesInEther.add(weiAmount);buyerGetDiscount[msg.sender]=true;}if(tokensSoldInICO.add(tokens.add(bonusTokens))>tokenReserveForICO){uint256newTokens=tokenReserveForICO.sub(tokensSoldInICO);bonusTokens=newTokens.sub(tokens);if(bonusTokens<=0){bonusTokens=0;}tokens=newTokens.sub(bonusTokens);returnWei=tokens.div(basePrice).div(1ether);}tokensSoldInICO=tokensSoldInICO.add(tokens.add(bonusTokens));remainingTokensForICO=tokenReserveForICO.sub(tokensSoldInICO);tokensSold=tokensSold.add(tokens.add(bonusTokens));remainingTokens=cap.sub(tokensSold);if(returnWei>0){msg.sender.transfer(returnWei);emitTransfer(address(this),msg.sender,returnWei);}balances[msg.sender]=balances[msg.sender].add(tokens);balances[owner]=balances[owner].sub(tokens);emitTransfer(address(this),msg.sender,tokens);owner.transfer(weiAmount);}()","haltedICO, remainingTokensForICO, minTransaction, maxTransaction, basePrice, totalSalesInEther, discountUntilSales, buyerGetDiscount, totalSalesInEther, totalSalesInEther, buyerGetDiscount, tokensSoldInICO, tokenReserveForICO, tokenReserveForICO, tokensSoldInICO, basePrice, tokensSoldInICO, tokensSoldInICO, remainingTokensForICO, tokenReserveForICO, tokensSoldInICO, tokensSold, tokensSold, remainingTokens, cap, tokensSold, balances, balances, balances, owner, balances, owner, owner",True
"sendPrivate(address,uint256)","tokenVestingContract, remainingTokensForPrivateSales, tokenReserveForPrivateSales, tokensSoldInPrivateSales, tokensSoldInPrivateSales, tokensSoldInPrivateSales, remainingTokensForPrivateSales, tokenReserveForPrivateSales, tokensSoldInPrivateSales, tokensSold, tokensSold, remainingTokens, cap, tokensSold, balances, tokenVestingContract, balances, tokenVestingContract, tokenVestingContract, balances, owner, balances, owner, tokenVestingContract",False
release(address),tokenVestingContract,False
startIco(),,False
haltICO(),haltedICO,True
resumeICO(),haltedICO,True
finalizeIco(),,False
setDiscountUntilSales(uint256),discountUntilSales,False
setBasePrice(uint256),basePrice,False
setMinTransaction(uint256),minTransaction,False
setMaxTransaction(uint256),maxTransaction,False
addTokenSoldInICO(uint256),"tokensSoldInICO, tokensSoldInICO, remainingTokensForICO, tokenReserveForICO, tokensSoldInICO, tokensSold, tokensSold, remainingTokens, cap",False
addTokenSoldInPrivateSales(uint256),"tokensSoldInPrivateSales, tokensSoldInPrivateSales, remainingTokensForPrivateSales, tokenReserveForPrivateSales, tokensSoldInPrivateSales, tokensSold, tokensSold, remainingTokens, cap",False
