Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
Owned(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
"C4FEscrow(address,uint256,address,uint256,uint8)","owner, newOwner, C4FID, requester, provider, startTime, deadline, status, arbitrationCosts, requesterLocked, providerLocked, providerCompleted, requesterDisputed, providerDisputed",False
getOwner(),owner,False
setOwner(address),"newOwner, owner, newOwner, owner, newOwner",False
getRequester(),requester,False
getProvider(),provider,False
getStartTime(),startTime,False
getDeadline(),deadline,False
changeDeadline(uint),"providerLocked, providerDisputed, providerCompleted, status, deadline, deadline",False
getStatus(),status,False
disputeFavor(),"requester, requesterDisputed, provider, providerDisputed, providerLocked",True
undisputeFavor(),"requester, requesterDisputed, provider, providerDisputed",True
setProvider(address),"providerLocked, requesterLocked, provider, provider",False
setProviderLock(bool),"providerLocked, providerLocked",False
setProviderCompleted(bool),providerCompleted,False
setRequesterLock(bool),"requesterLocked, requesterLocked",False
getRequesterLock(),requesterLocked,False
setStatus(uint8),"status, status",False
getTokenValue(),owner,False
completeFavor(),"provider, owner, provider, closeTime, status, provider",True
cancelFavor(),"providerLocked, deadline, providerCompleted, providerDisputed, status, owner, requester, closeTime, status",True
changeTokenOffer(uint256),"providerLocked, providerDisputed, providerCompleted, status, owner, requester",True
arbitrateC4FContract(uint8),"providerDisputed, requesterDisputed, arbitrationCosts, owner, requester, provider, status, closeTime, provider",True
C4FToken(),"symbol, name, decimals, _totalSupply, decimals, _salesprice, _minimumContribution, _endOfICO, _beginOfICO, _bonusRatio1, _bonusRatio2, _bonusTime1, _bonusTime2, _endOfPreICO, _percentSoldInPreICO, _maxTokenSoldPreICO, _totalSupply, _percentSoldInPreICO, _maxTokenSoldPreICO, _maxTokenSoldPreICO, _percentSoldInICO, _maxTokenSoldICO, _totalSupply, _percentSoldInPreICO, _percentSoldInICO, _maxTokenSoldICO, _maxTokenSoldICO, _total_sold, _commission, _commissionTarget, owner, _arbitrationPercent, _crowdsalePaused, owner, _totalSupply, owner, _totalSupply",False
setICOStart(uint),"_beginOfICO, _beginOfICO",False
setICOEnd(uint),"_endOfICO, _endOfICO",False
setPreICOEnd(uint),"_endOfPreICO, _endOfPreICO",False
setBonusDate1(uint),"_bonusTime1, _bonusTime1",False
setBonusDate2(uint),"_bonusTime2, _bonusTime2",False
totalSupply(),_totalSupply,False
balanceOf(address),,False
"whitelistAccount(address,uint)",,False
getWhitelistLimit(address),,False
pauseCrowdsale(),_crowdsalePaused,False
resumeCrowdsale(),_crowdsalePaused,False
setCommission(uint),_commission,False
setArbitrationPercentage(uint8),"_arbitrationPercent, _arbitrationPercent",False
setCommissionTarget(address),"_commissionTarget, _commissionTarget",False
getCommissionTarget(),_commissionTarget,False
"transfer(address,uint)",,True
"transferWithCommission(address,uint)","_commission, _commissionTarget, _commissionTarget, _commissionTarget",True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",,True
"allowance(address,address)",,False
"startFavorEscrow(uint256,uint256,uint)",_arbitrationPercent,True
"isFavorEscrow(uint,address)",,False
getEscrowCount(),,False
getEscrowAddress(uint),,False
"setC4FContractOwner(address,address)","newOwner, newOwner",False
"setC4FContractProvider(address,address)","provider, provider",False
"setC4FContractProviderLock(address,bool)",,False
"setC4FContractProviderCompleted(address,bool)",,False
"setC4FContractRequesterLock(address,bool)",,False
"setC4FContractStatus(address,uint8)",,False
"arbitrateC4FContract(address,uint8)",,False
"function()publiconlyDuringICOnotPausedpayable{uintbonusratio=100;if(now<=_bonusTime1){bonusratio=_bonusRatio1;}if(now<=_bonusTime2){bonusratio=_bonusRatio2;}require(msg.value>=_minimumContribution);if(msg.value>0){if(!(whitelisted_amount[msg.sender]>=msg.value))revert();whitelisted_amount[msg.sender]=whitelisted_amount[msg.sender].sub(msg.value);uint256token_amount=msg.value.mul(_salesprice);token_amount=token_amount.mul(bonusratio);token_amount=token_amount.div(100);uint256new_total=_total_sold.add(token_amount);if(now<=_endOfPreICO){if(new_total>_maxTokenSoldPreICO)revert();}if(new_total>_maxTokenSoldICO)revert();if(!transferInternal(msg.sender,token_amount))revert();_total_sold=new_total;if(!owner.send(msg.value))revert();}}()","_bonusTime1, _bonusRatio1, _bonusTime2, _bonusRatio2, _minimumContribution, _salesprice, _total_sold, _endOfPreICO, _maxTokenSoldPreICO, _maxTokenSoldICO, _total_sold, owner",True
