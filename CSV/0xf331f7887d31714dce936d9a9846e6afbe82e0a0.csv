Function Name,State Variables Modified,Can Transfer Ether
transferOwnership(address),owner,False
"Agricoin(uint,uint,address)","owner, payoutPeriodStart, payoutPeriodEnd, payers",True
activate(bool),"isActive, startDate, isActive, owner, isSuccessfulIco, totalSupply, totalSupplyOnIco",False
addPayer(address),payers,False
balanceOf(address),"balances, owner",False
posibleDividendsOf(address),"balances, owner",False
posibleRedemptionOf(address),"balances, owner",False
"transfer(address,uint)","balances, balances, payoutPeriodStart, payoutPeriodEnd, redemptionPayouts, amountOfRedemptionPayouts, balances, balances, balances, totalSupply",True
"transferFrom(address,address,uint)","balances, allowed, balances, balances",True
"approve(address,uint)",allowed,True
"allowance(address,address)",allowed,False
"mint(address,uint,bool)","isActive, balances, totalSupplyOnIco, balances, totalSupply",False
payDividends(),"payoutPeriodStart, payoutPeriodEnd, dividendPayouts, amountOfDividendsPayouts, dividendPayouts, amountOfDividendsPayouts, totalSupply, amountOfDividendsPayouts, amountOfDividendsPayouts",False
payRedemption(uint),"payoutPeriodStart, payoutPeriodEnd, redemptionPayouts, amountOfRedemptionPayouts, redemptionPayouts, amountOfRedemptionPayouts, totalSupply, redemptionPayouts, amountOfRedemptionPayouts, amountOfRedemptionPayouts, amountOfRedemptionPayouts",False
getUnpaid(),payoutPeriodEnd,True
recalculate(address),"isSuccessfulIco, balances, balances, balances, balances, balances, balances, amountOfDividendsPayouts, balances, amountOfRedemptionPayouts, balances, amountOfDividendsPayouts, balances, dividendPayouts, dividendPayouts, balances, balances, amountOfDividendsPayouts, balances, amountOfRedemptionPayouts, balances, redemptionPayouts, redemptionPayouts, balances, balances, amountOfRedemptionPayouts",False
"function()externalpayable{if(payoutPeriodStart>=now&&now<=payoutPeriodEnd){if(posibleDividendsOf(msg.sender)>0){uintdividendsAmount=posibleDividendsOf(msg.sender);GetDividends(msg.sender,dividendsAmount);balances[msg.sender].posibleDividends=0;msg.sender.transfer(dividendsAmount);}}}()","payoutPeriodStart, payoutPeriodEnd, balances",True
"Ico(address,uint,uint,uint,uint,uint,uint,uint,uint,uint,address)","owner, token, state, preIcoPrice, icoPrice, startPreIcoDate, endPreIcoDate, startIcoDate, endIcoDate, preIcoTarget, icoTarget, softCap, bounty",True
isActive(),state,False
isRunningPreIco(uint),"startPreIcoDate, endPreIcoDate",False
isRunningIco(uint),"startIcoDate, endIcoDate",False
"function()externalpayable{uintvalue;uintrest;uintamount;if(state==State.Failed){amount=invested[msg.sender]+investedOnPreIco[msg.sender];invested[msg.sender]=0;investedOnPreIco[msg.sender]=0;Refund(msg.sender,amount);msg.sender.transfer(amount+msg.value);return;}if(state==State.Expired){amount=invested[msg.sender];invested[msg.sender]=0;Refund(msg.sender,amount);msg.sender.transfer(amount+msg.value);return;}require(state==State.Runned);if(now>=endIcoDate){if(Agricoin(token).totalSupply()+Agricoin(token).totalSupplyOnIco()>=softCap){state=State.Finished;uintdecimals=Agricoin(token).decimals();uintsupply=Agricoin(token).totalSupply()+Agricoin(token).totalSupplyOnIco();if(supply>=1500000*decimals){Agricoin(token).mint(bounty,300000*decimals,true);}elseif(supply>=1150000*decimals){Agricoin(token).mint(bounty,200000*decimals,true);}elseif(supply>=800000*decimals){Agricoin(token).mint(bounty,100000*decimals,true);}Agricoin(token).activate(true);End(true);msg.sender.transfer(msg.value);return;}else{state=State.Expired;Agricoin(token).activate(false);msg.sender.transfer(msg.value);End(false);return;}}elseif(isRunningPreIco(now)){require(investedSumOnPreIco/preIcoPrice<preIcoTarget);if((investedSumOnPreIco+msg.value)/preIcoPrice>=preIcoTarget){value=preIcoTarget*preIcoPrice-investedSumOnPreIco;require(value!=0);investedSumOnPreIco=preIcoTarget*preIcoPrice;investedOnPreIco[msg.sender]+=value;Invested(msg.sender,value);Agricoin(token).mint(msg.sender,value/preIcoPrice,false);msg.sender.transfer(msg.value-value);return;}else{rest=msg.value%preIcoPrice;require(msg.value-rest>=preIcoPrice);investedSumOnPreIco+=msg.value-rest;investedOnPreIco[msg.sender]+=msg.value-rest;Invested(msg.sender,msg.value-rest);Agricoin(token).mint(msg.sender,msg.value/preIcoPrice,false);msg.sender.transfer(rest);return;}}elseif(isRunningIco(now)){require(investedSumOnIco/icoPrice<icoTarget);if((investedSumOnIco+msg.value)/icoPrice>=icoTarget){value=icoTarget*icoPrice-investedSumOnIco;require(value!=0);investedSumOnIco=icoTarget*icoPrice;invested[msg.sender]+=value;Invested(msg.sender,value);Agricoin(token).mint(msg.sender,value/icoPrice,true);msg.sender.transfer(msg.value-value);return;}else{rest=msg.value%icoPrice;require(msg.value-rest>=icoPrice);investedSumOnIco+=msg.value-rest;invested[msg.sender]+=msg.value-rest;Invested(msg.sender,msg.value-rest);Agricoin(token).mint(msg.sender,msg.value/icoPrice,true);msg.sender.transfer(rest);return;}}else{revert();}}()","state, state, state, endIcoDate, token, token, softCap, state, token, token, token, decimals, token, bounty, decimals, decimals, token, bounty, decimals, decimals, token, bounty, decimals, token, state, token, investedSumOnPreIco, preIcoPrice, preIcoTarget, investedSumOnPreIco, preIcoPrice, preIcoTarget, preIcoTarget, preIcoPrice, investedSumOnPreIco, investedSumOnPreIco, preIcoTarget, preIcoPrice, token, preIcoPrice, preIcoPrice, preIcoPrice, investedSumOnPreIco, token, preIcoPrice, investedSumOnIco, icoPrice, icoTarget, investedSumOnIco, icoPrice, icoTarget, icoTarget, icoPrice, investedSumOnIco, investedSumOnIco, icoTarget, icoPrice, token, icoPrice, icoPrice, icoPrice, investedSumOnIco, token, icoPrice",True
pauseIco(),"state, state",False
continueIco(),"state, state",False
endIco(),"state, state",False
getEthereum(),state,True
getEthereumFromPreIco(),"endPreIcoDate, state, state, investedSumOnPreIco, investedSumOnPreIco",True
