Function Name,State Variables Modified,Can Transfer Ether
initPricer(),"METDECMULT, tentimes, METDECMULT, tentimes, METDECMULT, hundredtimes, METDECMULT, hundredtimes, METDECMULT, thousandtimes",False
"priceAt(uint,uint)","METDECMULT, thousandtimes, METDECMULT, hundredtimes, METDECMULT, tentimes, METDECMULT, METDECMULT, minimumPriceInDailyAuction, minimumPriceInDailyAuction",False
"priceAtInitialAuction(uint,uint)","lastPurchasePrice, MULTIPLIER, lastPurchasePrice, MULTIPLIER, minimumPrice, minimumPrice",False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
constructor(),owner,True
changeOwnership(address),"owner, owner, owner",False
changeOwnership(address),"owner, newOwner",False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner",True
"initMintable(address,address,uint,uint)","autonomousConverter, minter, autonomousConverter, minter, _totalSupply, _balanceOf, _totalSupply",False
totalSupply(),_totalSupply,False
balanceOf(address),_balanceOf,False
setTokenPorter(address),tokenPorter,False
"mint(address,uint)","minter, tokenPorter, _balanceOf, _balanceOf, _totalSupply, _totalSupply",True
"destroy(address,uint)","autonomousConverter, tokenPorter, _balanceOf, _balanceOf, _totalSupply, _totalSupply",True
"initToken(address,address,uint,uint)",,False
"allowance(address,address)",_allowance,False
"transfer(address,uint256)","minter, autonomousConverter, minter, proceeds, _balanceOf, _balanceOf, _balanceOf, _balanceOf",True
"transferFrom(address,address,uint256)","minter, minter, minter, proceeds, proceeds, autonomousConverter, _allowance, _balanceOf, _balanceOf, _balanceOf, _balanceOf, _allowance, _allowance",True
"approve(address,uint256)",_allowance,True
multiTransfer(),,True
"approveMore(address,uint256)","_allowance, _allowance",True
"approveLess(address,uint256)","_allowance, _allowance",True
"initSmartToken(address,address,uint)",METDECMULT,False
"initMETToken(address,address,uint,uint)",,False
enableMETTransfers(),"transferAllowed, minter, transferAllowed",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
multiTransfer(),,False
setRoot(bytes32),roots,True
getRoot(address),roots,False
"rootsMatch(address,address)","roots, roots",False
"importMET(bytes8,bytes8,,bytes,,,,bytes)","tokenPorter, tokenPorter",False
"export(bytes8,address,address,uint,uint,bytes)","tokenPorter, tokenPorter",True
"subscribe(uint,uint,address)",subs,True
cancelSubscription(address),"subs, subs, subs, subs, subs",True
"getSubscription(address,address)",subs,False
subWithdraw(address),,True
multiSubWithdraw(),,True
"multiSubWithdrawFor(,)",,False
"init(address,address,address)","initialized, auctions, reserveToken, smartToken, initialized",False
handleFund(),auctions,True
getMetBalance(),,False
getEthBalance(),,False
getMetForEthResult(uint),,False
getEthForMetResult(uint),,False
convertEthToMet(uint),,True
"convertMetToEth(uint,uint)",,True
"initProceeds(address,address)","auctions, autonomousConverter, autonomousConverter, auctions",False
handleFund(),auctions,True
closeAuction(),"auctions, auctions, auctions, lastPurchaseTick, autonomousConverter",True
constructor(),"mintable, INITIAL_SUPPLY, METDECMULT",False
"function()publicpayablerunning{require(msg.value>0);uintamountForPurchase=msg.value;uintexcessAmount;if(currentAuction()>whichAuction(lastPurchaseTick)){proceeds.closeAuction();restartAuction();}if(isInitialAuctionEnded()){require(now>=dailyAuctionStartTime);if(lastPurchaseAuction[msg.sender]<currentAuction()){if(amountForPurchase>DAILY_PURCHASE_LIMIT){excessAmount=amountForPurchase.sub(DAILY_PURCHASE_LIMIT);amountForPurchase=DAILY_PURCHASE_LIMIT;}purchaseInTheAuction[msg.sender]=msg.value;lastPurchaseAuction[msg.sender]=currentAuction();}else{require(purchaseInTheAuction[msg.sender]<DAILY_PURCHASE_LIMIT);if(purchaseInTheAuction[msg.sender].add(amountForPurchase)>DAILY_PURCHASE_LIMIT){excessAmount=(purchaseInTheAuction[msg.sender].add(amountForPurchase)).sub(DAILY_PURCHASE_LIMIT);amountForPurchase=amountForPurchase.sub(excessAmount);}purchaseInTheAuction[msg.sender]=purchaseInTheAuction[msg.sender].add(msg.value);}}uint_currentTick=currentTick();uintweiPerToken;uinttokens;uintrefund;(weiPerToken,tokens,refund)=calcPurchase(amountForPurchase,_currentTick);require(tokens>0);if(now<initialAuctionEndTime&&(token.totalSupply()).add(tokens)>=INITIAL_SUPPLY){initialAuctionEndTime=now;dailyAuctionStartTime=((initialAuctionEndTime/1days)+1)*1days;}lastPurchaseTick=_currentTick;lastPurchasePrice=weiPerToken;assert(tokens<=mintable);mintable=mintable.sub(tokens);assert(refund<=amountForPurchase);uintethForProceeds=amountForPurchase.sub(refund);proceeds.handleFund.value(ethForProceeds)();require(token.mint(msg.sender,tokens));refund=refund.add(excessAmount);if(refund>0){if(purchaseInTheAuction[msg.sender]>0){purchaseInTheAuction[msg.sender]=purchaseInTheAuction[msg.sender].sub(refund);}msg.sender.transfer(refund);}emitLogAuctionFundsIn(msg.sender,ethForProceeds,tokens,lastPurchasePrice,refund);}()","lastPurchaseTick, proceeds, dailyAuctionStartTime, lastPurchaseAuction, DAILY_PURCHASE_LIMIT, DAILY_PURCHASE_LIMIT, DAILY_PURCHASE_LIMIT, purchaseInTheAuction, lastPurchaseAuction, purchaseInTheAuction, DAILY_PURCHASE_LIMIT, purchaseInTheAuction, DAILY_PURCHASE_LIMIT, purchaseInTheAuction, DAILY_PURCHASE_LIMIT, purchaseInTheAuction, purchaseInTheAuction, initialAuctionEndTime, token, INITIAL_SUPPLY, initialAuctionEndTime, dailyAuctionStartTime, initialAuctionEndTime, lastPurchaseTick, lastPurchasePrice, mintable, mintable, mintable, proceeds, token, purchaseInTheAuction, purchaseInTheAuction, purchaseInTheAuction, lastPurchasePrice",True
isRunning(),"genesisTime, genesisTime",False
currentTick(),,False
currentAuction(),,False
whichTick(uint),"genesisTime, genesisTime, timeScale",False
whichAuction(uint),"dailyAuctionStartTime, dailyAuctionStartTime, DAY_IN_MINUTES",False
heartbeat(),"chain, proceeds, token, token, proceeds, dailyAuctionStartTime, DAY_IN_SECONDS, timeScale, dailyAuctionStartTime, genesisTime, lastPurchasePrice",False
"initAuctions(uint,uint,uint,uint)","minted, initialized, genesisTime, genesisTime, initialAuctionEndTime, genesisTime, initialAuctionDuration, initialAuctionEndTime, initialAuctionEndTime, dailyAuctionStartTime, initialAuctionEndTime, dailyAuctionStartTime, initialAuctionEndTime, lastPurchaseTick, minimumPrice, timeScale, lastPurchasePrice, lastPurchasePrice, founders, tokenLockers, founders, initialized",False
"createTokenLocker(address,address)","founders, tokenLockers",False
"mintInitialSupply(,address,address,address)","minted, token, proceeds, token, proceeds, tokenLockers, token, INITIAL_FOUNDER_SUPPLY, token, INITIAL_AC_SUPPLY, minted",False
stopEverything(),"genesisTime, genesisTime, genesisTime, initialAuctionEndTime, genesisTime, dailyAuctionStartTime, genesisTime",False
isInitialAuctionEnded(),"initialAuctionEndTime, initialAuctionEndTime, token, INITIAL_SUPPLY",False
globalMetSupply(),"AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS, globalSupplyAfterPercentageLogic, INITIAL_SUPPLY, INITIAL_GLOBAL_DAILY_SUPPLY",False
globalDailySupply(),"INITIAL_GLOBAL_DAILY_SUPPLY, AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS, lastPurchaseTick, AUCTION_WHEN_PERCENTAGE_LOGIC_STARTS, globalSupplyAfterPercentageLogic, globalSupplyAfterPercentageLogic, INITIAL_GLOBAL_DAILY_SUPPLY, INITIAL_GLOBAL_DAILY_SUPPLY",False
currentPrice(),,False
dailyMintable(),,False
tokensOnThisChain(),token,False
currentMintable(),"mintable, lastPurchaseTick, mintable",False
prepareAuctionForNonOGChain(),"token, token, token, chain, lastPurchaseTick",True
"whatWouldPurchaseDo(uint,uint)","METDECMULT, mintable, mintable, mintable, METDECMULT",False
"constructor(address,address)","auctions, token",False
lockTokenLocker(),"auctions, auctions, auctions, locked",False
"deposit(address,uint)","token, deposited, deposited, deposited",False
withdraw(),"deposited, auctions, lastWithdrawTime, auctions, deposited, quarterlyWithdrawable, deposited, lastWithdrawTime, lastWithdrawTime, lastWithdrawTime, QUARTER, lastWithdrawTime, QUARTER, quarterlyWithdrawable, QUARTER, deposited, lastWithdrawTime, lastWithdrawTime, QUARTER, deposited, deposited, token",True
"export(address,bytes8,address,address,uint,uint,bytes)",,False
"importMET(bytes8,bytes8,,bytes,,,,bytes)",,False
"initTokenPorter(address,address)","auctions, token",False
setMinimumExportFee(uint),minimumExportFee,False
setExportFeePerTenThousand(uint),exportFee,False
setChainHopStartTime(uint),chainHopStartTime,False
setValidator(address),validator,False
"addDestinationChain(bytes8,address)",destinationChains,False
removeDestinationChain(bytes8),"destinationChains, destinationChains",False
claimReceivables(),"claimables, claimables",True
"importMET(bytes8,bytes8,,bytes,,,,bytes)","token, chainHopStartTime, validator, auctions, token, merkleRoots, mintHashes",True
"export(address,bytes8,address,address,uint,uint,bytes)","token, chainHopStartTime, destinationChains, token, minimumExportFee, exportFee, token, auctions, auctions, burnSequence, exportedBurns, auctions, claimables, claimables, auctions, auctions, exportedBurns, burnSequence, exportedBurns, burnHashes, burnSequence, supplyOnAllChains, token, burnSequence, exportedBurns, burnSequence, supplyOnAllChains, burnSequence, burnSequence",True
"mintToken(bytes8,address,uint,uint,bytes,bytes32,uint,)","validator, mintHashes, importSequence, token, auctions, token, validators, validators, token, validators, importSequence, importSequence",True
constructor(),"actions, actions, actions",False
setValidator(address),validator,False
updateVotingPeriod(uint),votingPeriod,False
"proposeNewValidator(address,uint)","validator, validator, validator, actions",True
"proposeRemoveValidator(address,uint)","validator, validator, validator, actions",True
proposeNewThreshold(uint),"validator, validator, actions",True
"voteForProposal(uint,bool)","proposals, proposals, proposals, proposals, proposals, proposals, proposals",True
closeProposal(uint),"proposals, proposals, validator, proposals, proposals, proposals, actions, proposals, proposals, proposals",False
addValidator(address),"isValidator, validators, isValidator, validators, threshold, threshold, threshold",True
removeValidator(address),"validators, isValidator, validators, validators, validators, validators, validators, validators, validators, threshold, validators, validators, threshold, threshold, validators, threshold",True
getValidatorsCount(),validators,False
updateThreshold(uint),"validators, threshold",False
"isNewThresholdValid(uint,uint)",,False
setProposalContract(address),proposals,False
setTokenPorter(address),tokenPorter,False
"initValidator(address,address,address)","tokenPorter, auctions, token",False
"attestHash(bytes32,bytes8,address,uint,uint,,bytes,uint)","hashAttestations, hashRefutation, tokenPorter, hashAttestations, attestationCount, attestationCount, threshold, hashClaimed, hashClaimed, tokenPorter, validators",True
"refuteHash(bytes32,address)","hashAttestations, hashRefutation, hashRefutation",True
