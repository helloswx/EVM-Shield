Function Name,State Variables Modified,Can Transfer Ether
owner(),_owner,False
isOwner(),_owner,True
renounceOwnership(),"_owner, _owner",False
transferOwnership(address),,True
"function()publicpayable{require(msg.value==0,""Blocking any incoming ETH."");}()",,False
setRelayContractAddress(address),relayContractAddress,False
"transferAnyERC20Token(address,uint)",owner,True
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
setProjectsContractAddress(address),projectsContractAddress,False
setMilestonesContractAddress(address),milestonesContractAddress,False
setEscrowFactoryContractAddress(address),escrowFactoryContractAddress,False
setArbitrationContractAddress(address),arbitrationContractAddress,False
setFeesWithdrawalAddress(address),feesWithdrawalAddress,False
setShareFee(uint8),shareFee,False
function()publicpayable{deposit();}(),,False
"initialize(address,address,uint8,address)","isInitialized, isInitialized, authorizedAddress, shareFee, relayContractAddress",True
"depositErc20(address,uint)","tokensBalance, tokensBalance",True
withdraw(uint),,True
"withdrawErc20(address,uint)",,True
blockFunds(uint),"balance, balance, balance, blockedBalance, blockedBalance",True
"blockTokenFunds(address,uint)","tokensBalance, tokensBalance, blockedTokensBalance, blockedTokensBalance",True
"distributeFunds(address,uint)","blockedBalance, shareFee, relayContractAddress, relayContractAddress, shareFee, blockedBalance, blockedBalance, withdrawalAllowanceForAddress, withdrawalAllowanceForAddress, owner, blockedBalance, blockedBalance, withdrawalAllowanceForAddress, withdrawalAllowanceForAddress",True
"distributeTokenFunds(address,address,uint)","blockedTokensBalance, shareFee, relayContractAddress, relayContractAddress, shareFee, blockedTokensBalance, blockedTokensBalance, tokensWithdrawalAllowanceForAddress, tokensWithdrawalAllowanceForAddress, owner, blockedTokensBalance, blockedTokensBalance, tokensWithdrawalAllowanceForAddress, tokensWithdrawalAllowanceForAddress",True
"withdrawForAddress(address,uint)","owner, balance, balance, withdrawalAllowanceForAddress, withdrawalAllowanceForAddress",True
"withdrawErc20ForAddress(address,address,uint)","owner, tokensBalance, tokensBalance, tokensWithdrawalAllowanceForAddress",True
"getTokenWithdrawalAllowance(address,address)",tokensWithdrawalAllowanceForAddress,False
deposit(),"balance, balance",True
unblockFunds(uint),"blockedBalance, blockedBalance, blockedBalance, balance, balance",True
"unblockTokenFunds(address,uint)","blockedTokensBalance, blockedTokensBalance, tokensBalance, tokensBalance",True
"transferAnyERC20Token(address,uint)",,False
constructor(address),libraryAddress,False
setLibraryAddress(address),"libraryAddress, libraryAddress",False
"createEscrow(address,address)","libraryAddress, relayContractAddress, relayContractAddress",False
disputeStartedFreeze(bytes32),,False
"disputeSettledTerminate(bytes32,address,uint8,address,uint8,bool,address)",,False
"checkEligibility(bytes32,address)",,False
canStartDispute(bytes32),,False
"startDispute(bytes32,address,int)",,False
acceptProposal(bytes32),,False
rejectProposal(bytes32),,False
"settleDispute(bytes32,uint,uint)",,False
getWithdrawalAddress(),,False
getFixedAndShareFees(),,False
getTimeLimitForReplyOnProposal(),,False
constructor(uint256),DOMAIN_SEPARATOR,False
"startProject(string,address,address,address,bytes,uint8,uint8,uint8,bool)","projects, projects, makerProjects, clientProjects",True
terminateProject(bytes32),"projects, relayContractAddress",True
completeProject(bytes32),"projects, projects, relayContractAddress, projects",True
"rateProjectSecondParty(bytes32,uint8)",projects,True
getProjectEscrowAddress(bytes32),projects,False
getProjectClient(bytes32),projects,False
getProjectMaker(bytes32),projects,False
getProjectArbiter(bytes32),projects,False
getProjectFeedbackWindow(bytes32),projects,False
getProjectMilestoneStartWindow(bytes32),projects,False
getProjectStartDate(bytes32),projects,False
makersAverageRating(address),,False
clientsAverageRating(address),,False
getClientProjects(address),clientProjects,False
getMakerProjects(address),makerProjects,False
checkIfProjectExists(bytes32),projects,False
getProjectEndDate(bytes32),projects,False
getProjectMilestonesCount(bytes32),projects,False
getProjectArbitrationFees(bytes32),"projectArbiterFixedFee, projectArbiterShareFee",False
"getInfoForDisputeAndValidate(bytes32,address,address,address)","projects, shareFee",False
"startMilestone(bytes32,uint,address,uint32)","projectMilestones, projectMilestones, relayContractAddress, projectMilestones",True
deliverLastMilestone(bytes32),"relayContractAddress, projectMilestones, projectMilestones",True
acceptLastMilestone(bytes32),"relayContractAddress, projectMilestones, projectMilestones",True
rejectLastDeliverable(bytes32),"relayContractAddress, projectMilestones, projectMilestones",True
disputeStartedFreeze(bytes32),"relayContractAddress, projectsContractAddress, projectMilestones, projectMilestones",True
"disputeSettledTerminate(bytes32,address,uint8,address,uint8,bool,address)","projectMilestones, projectMilestones, relayContractAddress, shareFee",True
"checkEligibility(bytes32,address)","relayContractAddress, projectsContractAddress",False
canStartDispute(bytes32),"projectMilestones, projectMilestones, relayContractAddress, projectsContractAddress",False
"terminateLastMilestone(bytes32,address)","relayContractAddress, projectsContractAddress, projectsContractAddress, projectMilestones, projectMilestones",True
isLastMilestoneAccepted(bytes32),"projectMilestones, projectMilestones",False
canClientTerminate(bytes32),"projectMilestones, projectMilestones",False
canMakerTerminate(bytes32),"relayContractAddress, projectsContractAddress, projectMilestones, projectMilestones",False
initialize(address),"isInitialized, isInitialized, owner, _owner",False
"function()externalpayable{emitReceived(msg.sender,msg.value);}()",,True
changeOwner(address),"owner, owner",True
"forwardFromOwner(address,uint,bytes)","owner, owner",True
"getHash(address,address,uint,bytes)",nonce,False
"forward(bytes,address,address,uint,bytes)","nonce, owner",False
"withdraw(address,uint)",owner,True
"withdrawERC20Token(address,address,uint)",owner,True
constructor(address),libraryAddress,False
setLibraryAddress(address),"libraryAddress, libraryAddress",False
createProxy(address),libraryAddress,False
