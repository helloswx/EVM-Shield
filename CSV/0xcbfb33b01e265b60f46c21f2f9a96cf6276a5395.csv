Function Name,State Variables Modified,Can Transfer Ether
owner(),owner,False
isOwner(),owner,True
renounceOwnership(),"owner, owner",False
"function()publicpayable{if(msg.value>0){require(msg.value>=0.1ether,""investment must be between 0.1 and 0.5 ether"");require(msg.value<=0.5ether,""investment must be between 0.1 and 0.5 ether"");uintexpect=MULTIPLIER.mul(msg.value);Queue.push(Deposit({depositor:msg.sender,deposit:msg.value,expects:expect,paymentTime:0}));amountRaised+=msg.value;if(depositors[msg.sender].length==0)depositorsCount+=1;depositors[msg.sender].push(Queue.length-1);advertisingAddress.send(m_advertisingPercent.mul(msg.value));adminsAddress.send(m_adminsPercent.mul(msg.value));}else{uintmoney=address(this).balance;require(money>=minBalanceForDistribution,""Not enough funds to pay"");uintQueueLen=Queue.length;uinttoSend=Queue[currentReceiverIndex].expects;uintmaxIterations=25;uintnum=0;uinti=0;while((currentReceiverIndex<QueueLen)&&(i<maxIterations)&&(money>=toSend)){money=money.sub(toSend);Queue[currentReceiverIndex].paymentTime=now;num=currentReceiverIndex;currentReceiverIndex+=1;i+=1;Queue[num].depositor.send(toSend);toSend=Queue[currentReceiverIndex].expects;}}}()","MULTIPLIER, Queue, amountRaised, depositors, depositorsCount, depositors, Queue, advertisingAddress, m_advertisingPercent, adminsAddress, m_adminsPercent, minBalanceForDistribution, Queue, Queue, currentReceiverIndex, currentReceiverIndex, Queue, currentReceiverIndex, currentReceiverIndex, currentReceiverIndex, Queue, Queue, currentReceiverIndex",True
getNeedBalance(),"minBalanceForDistribution, minBalanceForDistribution",False
getDeposit(uint),Queue,False
getUserDepositsCount(address),depositors,False
getUserInfo(address),"depositors, depositors, Queue, Queue, Queue, Queue",False
