Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"allowance(address,address)",,False
"doesContractImplementInterface(address,bytes4)",,False
isEmpty(),,False
"contains(,uint)",,False
"getNext(,uint)",,False
"getPrev(,uint)",,False
getStart(),,False
getEnd(),,False
"insert(,uint,uint,uint)",,False
"remove(,uint)",,False
"getAttribute(,bytes32,string)",,False
"setAttribute(,bytes32,string,uint)",,False
constructor(address),"token, pollNonce, INITIAL_POLL_NONCE",False
requestVotingRights(uint),"token, voteTokenBalance, token",True
withdrawVotingRights(uint),"voteTokenBalance, voteTokenBalance, token",True
rescueTokens(uint),pollMap,True
rescueTokensInMultiplePolls(),,False
"commitVote(uint,bytes32,uint,uint)","voteTokenBalance, voteTokenBalance, voteTokenBalance, pollMap",True
"commitVotes(,,,)",,False
"validPosition(uint,uint,address,uint)",,False
"revealVote(uint,uint,uint)","pollMap, pollMap, pollMap, pollMap, pollMap, pollMap, pollMap",True
"revealVotes(,,)",,False
"getNumPassingTokens(address,uint,uint)",pollMap,False
"startPoll(uint,uint,uint)","pollNonce, pollNonce, pollMap, pollNonce, pollNonce, pollNonce",True
isPassed(uint),pollMap,False
getTotalNumberOfTokensForWinningOption(uint),"pollMap, pollMap",False
pollEnded(uint),pollMap,False
commitPeriodActive(uint),pollMap,False
revealPeriodActive(uint),pollMap,False
"didCommit(address,uint)",pollMap,False
"didReveal(address,uint)",pollMap,False
pollExists(uint),pollNonce,False
"getCommitHash(address,uint)",,False
"getNumTokens(address,uint)",,False
getLastNode(address),,False
getLockedTokens(address),,False
"getInsertPointForNumTokens(address,uint,uint)",,False
isExpired(uint),,False
"attrUUID(address,uint)",,False
"constructor(address,address,uint,uint,uint,uint,uint,uint,uint,uint,uint,uint,uint,uint,bytes4)","token, voting, REGISTRY_INTERFACE_REQUIREMENT",False
"proposeReparameterization(string,uint)","owner, REGISTRY_INTERFACE_REQUIREMENT, proposals, PROCESSBY, token, proposals",True
getNewRegistry(),params,False
challengeReparameterization(bytes32),"proposals, voting, challenges, proposals, token, voting",True
processProposal(bytes32),"proposals, proposals, token, proposals, token, PROCESSBY, proposals",True
"claimReward(uint,uint)","challenges, challenges, voting, challenges, challenges, challenges, challenges, challenges, token",True
"voterReward(address,uint,uint)","challenges, challenges, voting",False
canBeSet(bytes32),proposals,False
propExists(bytes32),proposals,False
challengeCanBeResolved(bytes32),"proposals, challenges, voting",False
challengeWinnerReward(uint),"voting, challenges, challenges, challenges",False
get(string),params,False
"tokenClaims(uint,address)",challenges,False
supportsInterface(bytes4),,False
"canReceiveListing(bytes32,uint,bool,address,uint,uint)",,False
"receiveListing(bytes32,uint,bool,address,uint,uint)",,False
getSupercedesRegistryInterfaceID(),,False
"constructor(address,address,address)","token, voting, parameterizer",False
"apply(bytes32,uint,string)","parameterizer, listings, parameterizer, numApplications, numApplications, totalStaked, totalStaked, token",True
"deposit(bytes32,uint)","listings, totalStaked, totalStaked, token",True
"withdraw(bytes32,uint)","listings, parameterizer, token",True
exit(bytes32),"listings, challenges",True
"challenge(bytes32,uint,string)","listings, parameterizer, challenges, voting, parameterizer, parameterizer, parameterizer, challenges, parameterizer, token",True
updateStatus(bytes32),,False
"claimReward(uint,uint)","challenges, challenges, voting, challenges, challenges, challenges, challenges, challenges, token",True
"voterReward(address,uint,uint)","challenges, challenges, voting",False
canBeWhitelisted(bytes32),"listings, listings, challenges",False
isHuman(address),humans,False
isWhitelisted(bytes32),listings,False
appWasMade(bytes32),listings,False
challengeExists(bytes32),"listings, challenges",False
challengeCanBeResolved(bytes32),"listings, voting",False
determineReward(uint),"challenges, voting, voting, challenges, challenges, challenges",False
"tokenClaims(uint,address)",challenges,False
listingExists(bytes32),listings,False
migrateListing(bytes32),"parameterizer, listings, token, listings",False
