Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),"owner, owner",False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
constructor(),,False
function()external{}(),,False
reclaimEther(),owner,True
reclaimToken(),owner,False
"tokenFallback(address,uint256,bytes)",,False
reclaimContract(address),owner,True
totalSupply(),,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
constructor(),lockExceptions,False
lock(),locked,False
unlock(),locked,False
"setTradeException(address,bool)",lockExceptions,True
canTrade(address),"locked, lockExceptions",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
"approve(address,uint256)",,False
"increaseApproval(address,uint)",,False
"decreaseApproval(address,uint)",,False
"initialize(,)","initialized, initialized",False
burn(uint256),,True
setCrowdsale(address),crowdsaleAddress,False
getBonusPercent(address),participants,False
"isValidPurchase(address,uint256)",participants,False
"addParticipant(address,uint256,uint256)","participants, participants",False
"addParticipants(,uint256,uint256)","participants, participants",False
revokeParticipant(address),participants,False
revokeParticipants(),participants,False
"recordPurchase(address,uint256)","crowdsaleAddress, participants",True
"constructor(address,uint256,uint256,uint256)","startTime, tokensPerEther, minimumPurchase",False
setBonusPool(address),bonusPool,False
setWhitelist(address),,False
start(),"saleActive, startTime, endTime, bonusPool, saleActive",False
end(),"saleActive, bonusPool, saleActive, endTime, owner",True
withdrawEth(),owner,True
withdrawTokens(),"saleActive, bonusPool",True
function()externalpayable{buyTokensInternal(msg.sender);}(),,True
buyTokens(),,True
buyTokensFor(address),,False
setExchangeRate(uint256),"tokensPerEther, tokensPerEther",False
validPurchase(uint256),"minimumPurchase, saleActive",False
validCrowdsale(),,False
