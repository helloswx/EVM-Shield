Function Name,State Variables Modified,Can Transfer Ether
"senderIsAdvocate(address,address)",,False
"senderIsListener(address,address)",,False
"senderIsSpeaker(address,address)",,False
"senderIsPosition(address,address)",,False
getAdvocate(address),,False
"nameIsAdvocate(address,address)",,False
"nameIsPosition(address,address)",,False
"initialize(address,address,address,address)",,False
"determinePosition(address,address)",,False
"receiveApproval(address,uint256,address,bytes)",,False
"constructor(string,address,string,string,string,bytes32,address)","name, originId, datHash, database, keyValue, contentId, typeId, vaultAddress",False
function()externalpayable{}(),,False
"transferEth(address,uint256)",,True
"transferERC20(address,address,uint256)",,True
isCompromised(address),,False
nonces(address),,False
incrementNonce(address),,False
ethAddressToNameId(address),,False
"setNameNewAddress(address,address)",,False
nameIdToEthAddress(address),,False
constructor(),theAO,True
transferOwnership(address),"theAO, theAO",True
"setWhitelist(address,bool)","theAO, whitelist",True
nonces(address),,False
incrementNonce(address),,False
"createPool(address,bool,uint256)",,False
"constructor(string,address,string,string,string,bytes32,address)",typeId,False
"constructor(uint256,string,string)","totalSupply, decimals, balanceOf, totalSupply, name, symbol",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
burn(uint256),"balanceOf, balanceOf, totalSupply",True
"burnFrom(address,uint256)","balanceOf, allowance, balanceOf, allowance, totalSupply",True
isTAO(address),,False
isName(address),,False
isValidERC20TokenAddress(address),,False
"isTheAO(address,address,address)",,True
PERCENTAGE_DIVISOR(),_PERCENTAGE_DIVISOR,False
MULTIPLIER_DIVISOR(),_MULTIPLIER_DIVISOR,False
"deployTAO(string,address,string,string,string,bytes32,address)",,False
"deployName(string,address,string,string,string,bytes32,address)",,False
"calculateWeightedMultiplier(uint256,uint256,uint256,uint256)",,False
"calculatePrimordialMultiplier(uint256,uint256,uint256,uint256,uint256)","_MULTIPLIER_DIVISOR, _MULTIPLIER_DIVISOR, _MULTIPLIER_DIVISOR",False
"calculateNetworkBonusPercentage(uint256,uint256,uint256,uint256,uint256)","_PERCENTAGE_DIVISOR, _PERCENTAGE_DIVISOR, _PERCENTAGE_DIVISOR",False
"calculateNetworkBonusAmount(uint256,uint256,uint256,uint256,uint256)",_PERCENTAGE_DIVISOR,False
"calculateMaximumBurnAmount(uint256,uint256,uint256)",,False
"calculateMultiplierAfterBurn(uint256,uint256,uint256)",,False
"calculateMultiplierAfterConversion(uint256,uint256,uint256)",,False
numDigits(uint256),,False
constructor(address),,False
transferOwnership(address),theAO,False
"setWhitelist(address,bool)",whitelist,False
setNameFactoryAddress(address),"nameFactoryAddress, _nameFactory",False
setNameTAOPositionAddress(address),"nameTAOPositionAddress, _nameTAOPosition",False
setNameAccountRecoveryAddress(address),"nameAccountRecoveryAddress, _nameAccountRecovery, nameAccountRecoveryAddress",False
"constructor(string,string,address)","name, symbol, powerOfTen, decimals",False
transferOwnership(address),theAO,False
"setWhitelist(address,bool)",whitelist,False
setNameTAOPositionAddress(address),nameTAOPositionAddress,False
"transferFrom(address,address,uint256)",,True
"mint(address,uint256)",,False
"whitelistBurnFrom(address,uint256)","balanceOf, balanceOf, balanceOf, totalSupply, totalSupply",False
"constructor(string,string,address,address)",,False
setNameFactoryAddress(address),"nameFactoryAddress, _nameFactory",False
setNameTAOPositionAddress(address),"nameTAOPositionAddress, _nameTAOPosition",False
setNameAccountRecoveryAddress(address),"nameAccountRecoveryAddress, _nameAccountRecovery, nameAccountRecoveryAddress",False
sumBalanceOf(address),"balanceOf, positionFromOthers, totalAdvocatedTAOLogos",False
availableToPositionAmount(address),"balanceOf, totalPositionOnOthers",True
"positionFrom(address,address,uint256)","positionFromOthers, positionFromOthers, positionOnOthers, positionOnOthers, totalPositionOnOthers, totalPositionOnOthers, positionFromOthers, positionFromOthers",False
"unpositionFrom(address,address,uint256)","positionOnOthers, positionOnOthers, positionOnOthers, totalPositionOnOthers, totalPositionOnOthers, positionFromOthers, positionFromOthers",False
"addAdvocatedTAOLogos(address,uint256)","_nameTAOPosition, advocatedTAOLogos, advocatedTAOLogos, totalAdvocatedTAOLogos, totalAdvocatedTAOLogos",False
"transferAdvocatedTAOLogos(address,address)","_nameTAOPosition, totalAdvocatedTAOLogos, advocatedTAOLogos, advocatedTAOLogos, advocatedTAOLogos, totalAdvocatedTAOLogos, totalAdvocatedTAOLogos, advocatedTAOLogos, advocatedTAOLogos, totalAdvocatedTAOLogos, totalAdvocatedTAOLogos",False
"constructor(address,address,address,address,address,address)",,False
setTAOFactoryAddress(address),"taoFactoryAddress, _taoFactory",False
setPathosAddress(address),"pathosAddress, _pathos",False
setEthosAddress(address),"ethosAddress, _ethos",False
setLogosAddress(address),"logosAddress, _logos",False
isExist(address),pools,False
"createPool(address,bool,uint256)","pools, pools",False
"updatePoolStatus(address,bool)","pools, pools, _taoFactory",False
"updatePoolEthosCap(address,bool,uint256)","pools, _pathos, pools, pools, _taoFactory",False
"stakeEthos(address,uint256)","pools, _nameFactory, _ethos, _ethos, contractTotalEthosLot, poolTotalEthosLot, contractTotalEthosLot, ethosLots, _ethos, _ethos, ownerEthosLots, totalEthosStaked, totalEthosStaked, namePoolEthosStaked, namePoolEthosStaked, contractTotalEthos, contractTotalEthos, _ethos",True
ownerTotalEthosLot(address),ownerEthosLots,False
"ownerEthosLotIds(address,uint256,uint256)","ownerEthosLots, ownerEthosLots",False
availablePathosToStake(address),"pools, _ethos, _pathos",False
"stakePathos(address,uint256)","pools, _nameFactory, _pathos, contractTotalPathosStake, totalPathosStaked, totalPathosStaked, namePoolPathosStaked, namePoolPathosStaked, contractTotalPathos, contractTotalPathos, contractTotalPathosStake, _pathos, _logos, _pathos",True
withdrawLogos(bytes32),"ethosLots, _nameFactory, contractTotalLogosWithdrawn, contractTotalLogosWithdrawn, poolTotalLogosWithdrawn, poolTotalLogosWithdrawn, totalLogosWithdrawn, totalLogosWithdrawn, namePoolLogosWithdrawn, namePoolLogosWithdrawn, _logos",True
lotLogosAvailableToWithdraw(bytes32),"ethosLots, _pathos, _pathos, _pathos",False
