Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
balanceOf(address),,False
"transfer(address,uint256)",,False
"updateParameters(address,uint,uint,uint,uint,uint)","lots, lastChangesIndex, feeWallet, feePercent, starts, duration, interval, ticketPrice, lastChangesIndex",False
"getLotInvested(uint,address)",lots,False
"getTicketInfo(uint,uint)",lots,False
getCurLotIndex(),"starts, lastChangesIndex, starts, interval, duration, lastChangesIndex",False
constructor(),"starts, ticketPrice, feePercent, feeWallet, interval, duration, interval, feeWallet, feePercent, starts, duration, interval, ticketPrice",False
setFeeWallet(address),feeWallet,False
getNotPayableTime(uint),"starts, interval, duration, lastChangesIndex, interval",False
"function()publicpayablenotContract(msg.sender)started{require(RANGE.mul(RANGE).mul(address(this).balance.add(msg.value))>0,""Balance limit error!"");require(msg.value>=ticketPrice,""Not enough funds to buy ticket!"");uintcurLotIndex=getCurLotIndex();require(now<getNotPayableTime(curLotIndex),""Game finished!"");Lotstoragelot=lots[curLotIndex];require(RANGE.mul(RANGE)>lot.ticketsCount,""Ticket count limit exceeded!"");uintnumTicketsToBuy=msg.value.div(ticketPrice);uinttoInvest=ticketPrice.mul(numTicketsToBuy);if(lot.invested[msg.sender]==0){lot.players.push(msg.sender);lot.playersCount=lot.playersCount.add(1);}lot.invested[msg.sender]=lot.invested[msg.sender].add(toInvest);for(uinti=0;i<numTicketsToBuy;i++){lot.tickets[lot.ticketsCount].owner=msg.sender;emitTicketPurchased(address(this),curLotIndex,lot.ticketsCount,msg.sender,ticketPrice);lot.ticketsCount=lot.ticketsCount.add(1);}lot.summaryInvested=lot.summaryInvested.add(toInvest);uintrefund=msg.value.sub(toInvest);msg.sender.transfer(refund);}()","RANGE, RANGE, ticketPrice, lots, RANGE, RANGE, ticketPrice, ticketPrice, ticketPrice",True
canUpdate(),"starts, lots",False
isProcessNeeds(),"starts, lots, lotProcessIndex, lotProcessIndex",False
prepareToRewardProcess(),"lots, lotProcessIndex, lotProcessIndex, LIMIT, LIMIT, RANGE, feePercent, PERCENT_RATE, feeWallet, summaryPayed, summaryPayed, lotProcessIndex, lotProcessIndex, lotProcessIndex",True
"retrieveTokens(address,address)",,True
