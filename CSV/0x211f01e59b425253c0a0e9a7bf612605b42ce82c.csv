Function Name,State Variables Modified,Can Transfer Ether
"receiveApproval(address,uint256,address,bytes)",,False
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
Controlled(),controller,True
changeController(address),controller,False
"Pinakion(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
contribute(uint),,False
requestRN(uint),,False
getRN(uint),,False
getUncorrelatedRN(uint),,True
contribute(uint),reward,False
getRN(uint),"randomNumber, randomNumber",False
saveRN(uint),"randomNumber, randomNumber, reward, reward",True
saveRN(uint),"randomNumber, randomNumber, randomNumber, randomNumber, reward, reward",True
"constructor(,bytes)","arbitrator, arbitratorExtraData",False
"rule(uint,uint)",,True
"createDispute(uint,bytes)",,False
arbitrationCost(bytes),,False
"appeal(uint,bytes)",,True
"appealCost(uint,bytes)",,False
disputeStatus(uint),,False
currentRuling(uint),,False
"constructor(,,,address)","pinakion, rng, lastPeriodChange, timePerPeriod, governor",False
"receiveApproval(address,uint,address,bytes)","pinakion, jurors",True
withdraw(uint),"jurors, session, pinakion",True
passPeriod(),"lastPeriodChange, timePerPeriod, period, period, rnBlock, rng, rnBlock, period, period, randomNumber, rng, rnBlock, randomNumber, period, period, period, period, period, period, period, session, segmentSize, rnBlock, randomNumber, lastPeriodChange, period, session",False
activateTokens(uint),"jurors, minActivatedToken, session, session, segmentSize, segmentSize, segmentSize",True
"voteRuling(uint,uint,)","disputes, jurors, session, session",True
"penalizeInactiveJuror(address,uint,)","disputes, jurors, period, session, session, minActivatedToken, alpha, jurors, jurors, governor, governor",True
oneShotTokenRepartition(uint),"disputes, session, jurors, jurors, governor, governor, jurors, jurors",False
"multipleShotTokenRepartition(uint,uint)","disputes, session, jurors, jurors, governor, governor, jurors, jurors",False
amountJurors(uint),disputes,False
"validDraws(address,uint,)","jurors, disputes, session, session, period, randomNumber, segmentSize",False
"createDispute(uint,bytes)","disputes, disputes, period, session, session, arbitrationFeePerJuror",True
"appeal(uint,bytes)","disputes, session",True
executeRuling(uint),disputes,False
arbitrationCost(bytes),arbitrationFeePerJuror,False
"appealCost(uint,bytes)","disputes, maxAppeals, NON_PAYABLE_AMOUNT",False
getStakePerDraw(),"alpha, minActivatedToken",False
"getVoteAccount(uint,uint,uint)",disputes,False
"getVoteRuling(uint,uint,uint)",disputes,False
"getWinningChoice(uint,uint)",disputes,False
"getWinningCount(uint,uint)",disputes,False
"getVoteCount(uint,uint,uint)",disputes,False
"getLastSessionVote(uint,address)",disputes,False
"isDrawn(uint,address,uint)","disputes, jurors, session, session, period, segmentSize, randomNumber, segmentSize",False
currentRuling(uint),disputes,False
disputeStatus(uint),"disputes, session, session, period, period",False
"executeOrder(bytes32,uint,address)",,True
setRng(),rng,False
setArbitrationFeePerJuror(uint),arbitrationFeePerJuror,False
setDefaultNumberJuror(uint16),defaultNumberJuror,False
setMinActivatedToken(uint),minActivatedToken,False
setTimePerPeriod(),timePerPeriod,False
setAlpha(uint),alpha,False
setMaxAppeals(uint),maxAppeals,False
setGovernor(address),governor,False
