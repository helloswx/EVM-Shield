Function Name,State Variables Modified,Can Transfer Ether
"transferSoldToken(address,address,uint256)",,False
balanceOf(address),,False
totalSupply(),,False
register(address),,False
unregister(address),,False
isRegistered(address),,False
"PriIcoSale2(address,uint,uint,address,address)","owner, beneficiary, fundingEthGoal, pricePerEther, tokenReward, whiteListMge",True
startIco(),"owner, icoProceeding, icoProceeding",True
endIco(),"owner, icoProceeding, icoProceeding, beneficiary, raisedEthAmt",True
setEnableWhiteList(bool),owner,True
resistWhiteList(address),"owner, whiteListMge, whiteListMge",True
removeWhiteList(address),"owner, whiteListMge, whiteListMge",True
"function()publicpayable{require(icoProceeding);require(raisedEthAmt<fundingEthGoal);require(msg.value>=0.1ether);if(enableWhiteList){require(whiteListMge.isRegistered(msg.sender));}uintamount=msg.value;uintremainToGoal=fundingEthGoal-raisedEthAmt;uintreturnAmt=0;if(remainToGoal<amount){returnAmt=msg.value.sub(remainToGoal);amount=remainToGoal;}uinttokenCount=amount.mul(pricePerEther);if(tokenReward.transferSoldToken(address(this),msg.sender,tokenCount)){raisedEthAmt=raisedEthAmt.add(amount);totalSoldTokenCount=totalSoldTokenCount.add(tokenCount);funderEthAmt[msg.sender]=funderEthAmt[msg.sender].add(amount);emitFundTransfer(msg.sender,amount,true);if(returnAmt>0){msg.sender.transfer(returnAmt);icoProceeding=false;emitReturnExcessAmount(msg.sender,returnAmt);}}}()","icoProceeding, raisedEthAmt, fundingEthGoal, whiteListMge, fundingEthGoal, raisedEthAmt, pricePerEther, tokenReward, raisedEthAmt, raisedEthAmt, totalSoldTokenCount, totalSoldTokenCount, funderEthAmt, funderEthAmt, icoProceeding",True
checkGoalReached(),"owner, raisedEthAmt, fundingEthGoal, icoProceeding",True
safeWithdrawal(),"owner, beneficiary, beneficiary",True
