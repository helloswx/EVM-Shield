Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
isOwner(),owner,True
"transfer(address,uint)",,False
balanceOf(address),,False
burn(uint),,False
"function()publicpayable{if(state==CrowdsaleState.Ended){msg.sender.transfer(msg.value);refundParticipant(msg.sender);}else{require(state==CrowdsaleState.Started,""Crowdsale currently inactive"");processPayment(msg.sender,msg.value,"""");}}()","state, state",True
"proxyExchange(address,uint,string,bytes32)","externalPaymentDescriptions, externalPaymentDescriptions, participantExternalPaymentChecksums",False
"startCrowdsale(address,address)","state, token, token, state",False
pauseCrowdsale(),"state, state",False
unPauseCrowdsale(),"state, state",False
endCrowdsale(bool),"state, crowdsaleEndedSuccessfully, suspendedPayments, owner",True
markParticipantIdentifiend(address),"participants, participants, participants, suspendedPayments, suspendedPayments, participants, participants, participants, participantSuspendedExternalPaymentChecksums, suspendedExternalPayments, suspendedExternalPayments, participants, participantSuspendedExternalPaymentChecksums",False
unidentifyParticipant(address),participants,False
returnSuspendedPayments(address),,False
updateUnidentifiedSaleLimit(uint),unidentifiedSaleLimit,False
updateMinSale(uint),minSale,False
refund(address),,False
burnLeftoverTokens(uint8),"state, token, token",False
"updateExchangeRate(uint8,uint,uint)",exchangeRates,False
ban(address),bannedParticipants,False
unBan(address),bannedParticipants,False
updateRevertSuspendedPayment(bool),revertSuspendedPayment,False
setAdmin(address),admin,False
transwerFunds(uint),"RELEASE_THRESHOLD, tokensSold, owner",True
isCrowdsaleSuccessful(),"state, crowdsaleEndedSuccessfully",False
