Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
balanceOf(address),,False
"transfer(address,uint256)","vestedAddress, asideTokensMintDate, VESTING_DELAY",True
"transferFrom(address,address,uint256)","vestedAddress, asideTokensMintDate, VESTING_DELAY",True
"approve(address,uint256)",,True
"allowance(address,address)",,False
checkRegistrationStatus(address),,False
"changeRegistrationStatusForSilverWhiteList(address,bool)",,False
"changeRegistrationStatusForGoldWhiteList(address,bool)",,False
"massChangeRegistrationStatusForSilverWhiteList(,bool)",,False
"massChangeRegistrationStatusForGoldWhiteList(,bool)",,False
setWhitelister(address),whiteLister,False
BCDToken(),,False
"function()publicpayable{require(currentState==State.PresaleRunning||currentState==State.Round1Running||currentState==State.Round2Running);if(msg.value<100finney){revert();}if(!silverWhiteList[msg.sender]&&!goldWhiteList[msg.sender]){revert();}uint256ethSent=msg.value;uint256ethToUse=ethSent;if(!goldWhiteList[msg.sender]){if(contributors[msg.sender]>=MAX_ETHER_FOR_SILVER_WHITELIST){revert();}if(contributors[msg.sender].add(ethToUse)>MAX_ETHER_FOR_SILVER_WHITELIST){ethToUse=MAX_ETHER_FOR_SILVER_WHITELIST.sub(contributors[msg.sender]);}}uint256ethAvailable=getRemainingEthersForCurrentRound();uintrate=getBCDTRateForCurrentRound();if(ethAvailable<=ethToUse){privateSetState(getEndedStateForCurrentRound());ethToUse=ethAvailable;}uint256tokenToSend=ethToUse.mul(rate);tokensSold=tokensSold.add(tokenToSend);etherRaisedDuringICO=etherRaisedDuringICO.add(ethToUse);balances[msg.sender]=balances[msg.sender].add(tokenToSend);contributors[msg.sender]=contributors[msg.sender].add(ethToUse);if(ethToUse<ethSent){msg.sender.transfer(ethSent.sub(ethToUse));}Transfer(0x0,msg.sender,tokenToSend);}()","currentState, currentState, currentState, MAX_ETHER_FOR_SILVER_WHITELIST, MAX_ETHER_FOR_SILVER_WHITELIST, MAX_ETHER_FOR_SILVER_WHITELIST, tokensSold, tokensSold, etherRaisedDuringICO, etherRaisedDuringICO",True
withdraw(),"etherRaisedDuringICO, softCap",True
mintAsideTokens(),"reserveAddress, communityAddress, vestedAddress, softCap, asideTokensHaveBeenMinted, asideTokensHaveBeenMinted, asideTokensMintDate, totalSupply, tokensSold, reserveAddress, RESERVE_ALLOCATION_PER_MILLE_RATIO, communityAddress, COMMUNITY_ALLOCATION_PER_MILLE_RATIO, vestedAddress, FOUNDERS_ALLOCATION_PER_MILLE_RATIO, totalSupply, tokensSold, owner",True
"setTokenAsideAddresses(address,address,address)","asideTokensHaveBeenMinted, reserveAddress, communityAddress, vestedAddress",False
"updateCapsAndRate(uint,uint,uint,uint)","presaleCap, round1Cap, softCap, rateETH_BCDT",False
getRemainingEthersForCurrentRound(),"currentState, asideTokensHaveBeenMinted, currentState, currentState, presaleCap, etherRaisedDuringICO, currentState, currentState, round1Cap, etherRaisedDuringICO, currentState, currentState, totalSupply, tokensSold, rateETH_BCDT",False
getBCDTRateForCurrentRound(),"currentState, currentState, currentState, currentState, rateETH_BCDT, rateETH_BCDT, currentState, rateETH_BCDT, rateETH_BCDT, currentState, rateETH_BCDT",False
setState(),,False
