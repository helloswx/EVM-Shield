Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),owner,False
constructor(),"rId, activated",False
"function()isHuman()isActivated()publicpayable{require(owner!=msg.sender,""owner cannot buy."");require(address(this)!=msg.sender,""contract cannot buy."");require(rounds[rId].state==ROUND_STATE_LIVE,""this round not start yet, please wait."");require(msg.data.length>9,""data struct not valid"");require(msg.data.length%9==1,""data struct not valid"");require(uint(msg.data[0])<BUY_LIMIT_CAP,""out of buy limit one time."");require(msg.value==uint(msg.data[0])*price,""price not right, please check."");uinti=1;while(i<msg.data.length){uint_times=uint(msg.data[i++]);uint_goldKeys=uint(msg.data[i++]);bool_joinBonus=uint(msg.data[i++])>0;uint[]memory_numbers=newuint[](6);for(uintj=0;j<6;j++){_numbers[j]=uint(msg.data[i++]);}for(uintk=0;k<_times;k++){bool_useGoldKey=false;if(_goldKeys>0&&goldKeyRepo[msg.sender]>0){_goldKeys--;goldKeyRepo[msg.sender]--;_useGoldKey=true;}tickets[rId].push(LottoModels.Ticket(rId,msg.sender,now,_numbers,_joinBonus,_useGoldKey));}}rounds[rId].ethIn=addition(rounds[rId].ethIn,msg.value);uint_amount=msg.value*4/10;rounds[rId].prizePool=addition(rounds[rId].prizePool,_amount);rounds[rId].bonusPool=addition(rounds[rId].bonusPool,_amount);rounds[rId].teamFee=addition(rounds[rId].teamFee,division(_amount,2));internalIncreaseGoldKeyCounter(_amount);emitBuyTicket(rId,msg.sender,msg.data,rounds[rId].prizePool,rounds[rId].bonusPool);}()","owner, rounds, rId, ROUND_STATE_LIVE, BUY_LIMIT_CAP, price, goldKeyRepo, goldKeyRepo, tickets, rId, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rId, rounds, rId, rounds, rId",True
lockRound(uint),"rounds, rId, ROUND_STATE_LIVE, rounds, rId, rounds, rId, ROUND_STATE_LOCKED, rId, ROUND_STATE_LOCKED",False
"drawRound(uint,string)","rounds, rId, ROUND_STATE_LOCKED, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rounds, rId, ROUND_STATE_DRAWED, rId, ROUND_STATE_DRAWED, rounds, rId",False
"endRound(uint,uint,,,bool)","rounds, rId, ROUND_STATE_DRAWED, rounds, rId, ROUND_STATE_ENDED, rounds, rId, rounds, rId, rounds, rId, rounds, rId, unIssuedGoldKeys, goldKeyKeepers, goldKeyRepo, goldKeyKeepers, goldKeyKeepers, unIssuedGoldKeys, goldKeyRepo, goldKeyKeepers, goldKeyKeepers, goldKeyKeepers, unIssuedGoldKeys, unIssuedGoldKeys, unIssuedGoldKeys, unIssuedGoldKeys, rounds, rId, rId, ROUND_STATE_ENDED",False
newRound(),"rounds, rId, ROUND_STATE_ENDED, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rId, ROUND_STATE_LIVE",False
calcWinNumbers(string),,False
getKeys(),goldKeyRepo,True
getRoundByRId(uint),"rId, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds, rounds",False
dumpPrize(),"rounds, rId, ROUND_STATE_LIVE, rounds, rId, rounds, rId, rounds, rId, rounds, rId, rId",False
activate(),"activated, rId",False
deactivate(),"activated, rId",False
selfDestroy(),rId,True
transferToOwner(uint),rId,True
