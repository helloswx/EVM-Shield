Function Name,State Variables Modified,Can Transfer Ether
"tokenFallback(address,uint,bytes)",,False
RUNEToken(),"totalSupply, totalSupply",True
function()publicpayable{revert();}(),,False
balanceOf(address),owner,False
"approve(address,uint256)",,True
"safeApprove(address,uint256,uint256)",,True
"allowance(address,address)",owner,False
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
"transfer(address,uint,bytes,string)",,True
"transfer(address,uint,bytes)",,True
burn(uint256),totalSupply,True
"burnFrom(address,uint256)",totalSupply,True
supportsInterface(bytes4),,False
constructor(),InterfaceId_ERC165,False
supportsInterface(bytes4),supportedInterfaces,False
balanceOf(address),,False
ownerOf(uint256),,False
"approve(address,uint256)",,False
getApproved(uint256),,False
"setApprovalForAll(address,bool)",,False
"isApprovedForAll(address,address)",,False
"transferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256,bytes)",,False
"constructor(bytes4,bool)",,False
"onERC721Received(address,address,uint256,bytes)",,False
constructor(),InterfaceId_ERC721,False
balanceOf(address),ownedTokensCount,False
ownerOf(uint256),"tokenOwner, owner, owner",False
"approve(address,uint256)","owner, owner, owner, tokenApprovals, owner",True
getApproved(uint256),tokenApprovals,False
"setApprovalForAll(address,bool)",operatorApprovals,True
"isApprovedForAll(address,address)",operatorApprovals,False
"transferFrom(address,address,uint256)",,True
"safeTransferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256,bytes)",,True
totalSupply(),,False
"tokenOfOwnerByIndex(address,uint256)",,False
tokenByIndex(uint256),,False
name(),,False
symbol(),,False
tokenURI(uint256),,False
"constructor(string,string)","name_, symbol_, InterfaceId_ERC721Enumerable, InterfaceId_ERC721Metadata",False
name(),name_,False
symbol(),symbol_,False
tokenURI(uint256),tokenURIs,False
"tokenOfOwnerByIndex(address,uint256)",ownedTokens,False
totalSupply(),allTokens,False
tokenByIndex(uint256),"totalSupply, allTokens",False
constructor(),owner,True
function()publicpayable{revert();}(),,False
"mint(address,uint256)",,False
burn(uint256),,False
"setTokenURI(uint256,string)",,False
"_removeTokenFrom(address,uint256)",,False
constructor(),"owner, whitelistAdmins, owner",True
isWhitelisted(address),whitelist,False
addWhitelistAdmin(address),whitelistAdmins,False
removeWhitelistAdmin(address),"owner, whitelistAdmins",False
whitelistAddress(address),whitelist,False
whitelistAddresses(),whitelist,False
unWhitelistAddress(address),whitelist,False
unWhitelistAddresses(),whitelist,False
constructor(),owner,True
"function()publicpayable{require(!tokensWithdrawn,""Tokens withdrawn. No more purchases possible."");uintruneRemaining=(RuneToken.balanceOf(this).add(totalRuneWithdrawn)).sub(totalRunePurchased);uinttoForward=msg.value;uintweiToReturn=0;uintpurchaseAmount=msg.value*runeToWeiRatio;if(runeRemaining<purchaseAmount){purchaseAmount=runeRemaining;uintprice=purchaseAmount.div(runeToWeiRatio);weiToReturn=msg.value.sub(price);toForward=toForward.sub(weiToReturn);}uintethBefore=totalRunePurchased.div(runeToWeiRatio);uintethAfter=ethBefore.add(toForward);if(ethBefore<=winAmount0&&ethAfter>winAmount0){collectibleAllocation[CollectibleIndex0]=msg.sender;emitTokenWon(CollectibleIndex0,msg.sender);}if(ethBefore<winAmount1&&ethAfter>=winAmount1){collectibleAllocation[CollectibleIndex1]=msg.sender;emitTokenWon(CollectibleIndex1,msg.sender);}if(ethBefore<winAmount2&&ethAfter>=winAmount2){collectibleAllocation[CollectibleIndex2]=msg.sender;emitTokenWon(CollectibleIndex2,msg.sender);}if(ethBefore<winAmount3&&ethAfter>=winAmount3){collectibleAllocation[CollectibleIndex3]=msg.sender;emitTokenWon(CollectibleIndex3,msg.sender);}if(ethBefore<winAmount4&&ethAfter>=winAmount4){collectibleAllocation[CollectibleIndex4]=msg.sender;emitTokenWon(CollectibleIndex4,msg.sender);}if(ethBefore<winAmount5&&ethAfter>=winAmount5){collectibleAllocation[CollectibleIndex5]=msg.sender;emitTokenWon(CollectibleIndex5,msg.sender);}runeAllocation[msg.sender]=runeAllocation[msg.sender].add(purchaseAmount);totalRunePurchased=totalRunePurchased.add(purchaseAmount);proceedsAddress.transfer(toForward);if(weiToReturn>0){address(msg.sender).transfer(weiToReturn);}}()","tokensWithdrawn, RuneToken, totalRuneWithdrawn, totalRunePurchased, runeToWeiRatio, runeToWeiRatio, totalRunePurchased, runeToWeiRatio, winAmount0, winAmount0, collectibleAllocation, CollectibleIndex0, CollectibleIndex0, winAmount1, winAmount1, collectibleAllocation, CollectibleIndex1, CollectibleIndex1, winAmount2, winAmount2, collectibleAllocation, CollectibleIndex2, CollectibleIndex2, winAmount3, winAmount3, collectibleAllocation, CollectibleIndex3, CollectibleIndex3, winAmount4, winAmount4, collectibleAllocation, CollectibleIndex4, CollectibleIndex4, winAmount5, winAmount5, collectibleAllocation, CollectibleIndex5, CollectibleIndex5, runeAllocation, runeAllocation, totalRunePurchased, totalRunePurchased, proceedsAddress",True
setMaximumNonWhitelistAmount(uint256),maximumNonWhitelistAmount,False
withdrawRune(),"withdrawalsAllowed, WhitelistContract, runeAllocation, runeAllocation, maximumNonWhitelistAmount, maximumNonWhitelistAmount, runeAllocation, runeAllocation, runeAllocation, totalRuneWithdrawn, totalRuneWithdrawn, RuneToken",True
ownerWithdrawRune(),"tokensWithdrawn, RuneToken, owner, RuneToken, totalRunePurchased, totalRuneWithdrawn",True
allowWithdrawals(),withdrawalsAllowed,False
distributeTo(address),"runeAllocation, runeAllocation, runeAllocation, RuneToken",True
