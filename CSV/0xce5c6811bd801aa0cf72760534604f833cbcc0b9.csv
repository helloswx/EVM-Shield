Function Name,State Variables Modified,Can Transfer Ether
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
"setOwner(bytes32,address)",,False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
PublicResolver(),ens,False
supportsInterface(bytes4),,False
addr(bytes32),,False
"setAddr(bytes32,address)",,False
content(bytes32),,False
"setContent(bytes32,bytes32)",,False
name(bytes32),,False
"setName(bytes32,string)",,False
"ABI(bytes32,uint256)",,False
"setABI(bytes32,uint256,bytes)",,False
pubkey(bytes32),,False
"setPubkey(bytes32,bytes32,bytes32)",,False
"text(bytes32,string)",,False
"setText(bytes32,string,string)",,False
initialize(address),,False
"hasPermission(address,address,bytes32,bytes)",,False
transferToVault(address),,False
allowRecoverability(address),,False
getRecoveryVault(),,False
acl(),,False
"hasPermission(address,address,bytes32,bytes)",,False
"setApp(bytes32,bytes32,address)",,False
"getApp(bytes32,bytes32)",,False
kernel(),KERNEL_POSITION,False
appId(),APP_ID_POSITION,False
getInitializationBlock(),INITIALIZATION_BLOCK_POSITION,False
hasInitialized(),,False
isPetrified(),PETRIFIED_BLOCK,False
constructor(),,False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
transferToVault(address),"ERROR_DISALLOWED, ERROR_VAULT_NOT_CONTRACT, ETH",True
allowRecoverability(address),,False
getRecoveryVault(),,False
"execScript(bytes,bytes,)",,False
executorType(),,False
addScriptExecutor(),,False
disableScriptExecutor(uint256),,False
getScriptExecutor(bytes),,False
getEVMScriptExecutor(bytes),,False
getEVMScriptRegistry(),"KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID",False
"canPerform(address,bytes32,)",,True
getRecoveryVault(),,False
"initialize(,bytes32)","ERROR_NO_NODE_OWNERSHIP, ens, rootNode",False
"createName(bytes32,address)",,False
"createNameAndPoint(bytes32,address)",,False
deleteName(bytes32),"ens, ERROR_NAME_DOESNT_EXIST, ens, rootNode, ens, ens",False
pointRootNode(address),rootNode,False
proxyType(),,False
implementation(),,False
isDepositable(),DEPOSITABLE_POSITION,False
"function()externalpayable{if(gasleft()<FWD_GAS_LIMIT){require(msg.value>0&&msg.data.length==0);require(isDepositable());emitProxyDeposit(msg.sender,msg.value);}else{addresstarget=implementation();delegatedFwd(target,msg.data);}}()",FWD_GAS_LIMIT,True
"constructor(,bytes32,bytes)",,True
"constructor(,bytes32,bytes)",,False
implementation(),,False
proxyType(),UPGRADEABLE,False
"constructor(,bytes32,bytes)",,False
implementation(),,False
proxyType(),FORWARDING,False
"newAppProxy(,bytes32)",,False
"newAppProxy(,bytes32,bytes)",,False
"newAppProxyPinned(,bytes32)",,False
"newAppProxyPinned(,bytes32,bytes)",,False
"canPerform(address,address,bytes32,)",,False
initialize(address),"ERROR_AUTH_INIT_KERNEL, CREATE_PERMISSIONS_ROLE",True
"createPermission(address,address,bytes32,address)",,False
"grantPermission(address,address,bytes32)",,False
"grantPermissionP(address,address,bytes32,)",EMPTY_PARAM_HASH,False
"revokePermission(address,address,bytes32)",NO_PERMISSION,False
"setPermissionManager(address,address,bytes32)",,False
"removePermissionManager(address,bytes32)",,False
"createBurnedPermission(address,bytes32)",BURN_ENTITY,False
"burnPermissionManager(address,bytes32)",BURN_ENTITY,False
"getPermissionParamsLength(address,address,bytes32)","permissionParams, permissions",False
"getPermissionParam(address,address,bytes32,uint)","permissionParams, permissions",False
"getPermissionManager(address,bytes32)",permissionManager,False
"hasPermission(address,address,bytes32,bytes)",,False
"hasPermission(address,address,bytes32,)","permissions, NO_PERMISSION, permissions, ANY_ENTITY, NO_PERMISSION, ANY_ENTITY",False
"hasPermission(address,address,bytes32)",,False
"evalParams(bytes32,address,address,bytes32,)",EMPTY_PARAM_HASH,False
initialize(),versionsNextIndex,False
"newVersion(,address,bytes)","versionsNextIndex, versions, ERROR_INVALID_VERSION, ERROR_INVALID_BUMP, versionsNextIndex, versions, versionIdForSemantic, latestVersionIdForContract",False
getLatest(),versionsNextIndex,False
getLatestForContractAddress(address),latestVersionIdForContract,False
getBySemanticVersion(),versionIdForSemantic,False
getByVersionId(uint),"versionsNextIndex, ERROR_INEXISTENT_VERSION, versions",False
getVersionsCount(),versionsNextIndex,False
"isValidBump(,)",,False
initialize(),"registrar, ens, registrar, registrar, registrar, registrar, ERROR_INIT_PERMISSIONS, ERROR_INIT_PERMISSIONS",False
"newRepo(string,address)",,False
"newRepoWithVersion(string,address,,address,bytes)",,False
constructor(bool),,False
"initialize(,address)","KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, KERNEL_DEFAULT_ACL_APP_ID, KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, recoveryVaultAppId, KERNEL_DEFAULT_VAULT_APP_ID",False
"newAppInstance(bytes32,address)",,False
"newAppInstance(bytes32,address,bytes,bool)","KERNEL_APP_BASES_NAMESPACE, KERNEL_APP_ADDR_NAMESPACE",False
"newPinnedAppInstance(bytes32,address)",,False
"newPinnedAppInstance(bytes32,address,bytes,bool)","KERNEL_APP_BASES_NAMESPACE, KERNEL_APP_ADDR_NAMESPACE",False
"setApp(bytes32,bytes32,address)",,False
setRecoveryVaultAppId(bytes32),recoveryVaultAppId,False
CORE_NAMESPACE(),KERNEL_CORE_NAMESPACE,False
APP_BASES_NAMESPACE(),KERNEL_APP_BASES_NAMESPACE,False
APP_ADDR_NAMESPACE(),KERNEL_APP_ADDR_NAMESPACE,False
KERNEL_APP_ID(),KERNEL_CORE_APP_ID,False
DEFAULT_ACL_APP_ID(),KERNEL_DEFAULT_ACL_APP_ID,False
"getApp(bytes32,bytes32)",apps,False
getRecoveryVault(),"apps, KERNEL_APP_ADDR_NAMESPACE, recoveryVaultAppId",False
acl(),"KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID",False
"hasPermission(address,address,bytes32,bytes)",,False
constructor(),"apps, KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID",False
proxyType(),UPGRADEABLE,False
implementation(),"apps, KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID",False
initialize(),executorsNextIndex,False
addScriptExecutor(),"executorsNextIndex, executors",False
disableScriptExecutor(uint256),"executors, ERROR_EXECUTOR_DISABLED",False
enableScriptExecutor(uint256),"executors, ERROR_EXECUTOR_ENABLED",False
getScriptExecutor(bytes),executors,False
"execScript(bytes,bytes,)","SCRIPT_START_LOCATION, ERROR_BLACKLISTED_CALL, ERROR_INVALID_LENGTH, ERROR_CALL_REVERTED",True
executorType(),EXECUTOR_TYPE,False
constructor(),"baseReg, baseCallScript",False
newEVMScriptRegistry(),"EVMSCRIPT_REGISTRY_APP_ID, baseReg, baseCallScript",False
"constructor(,,)","regFactory, baseKernel, baseACL",False
newDAO(address),"baseKernel, regFactory, baseACL, baseACL, regFactory, regFactory, regFactory, regFactory, regFactory",False
ENS(),,True
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
"setOwner(bytes32,address)",,False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
newENS(address),"ens, ENS_ROOT, ETH_TLD_LABEL, ens, ens, ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, ens, PUBLIC_RESOLVER_NODE, PUBLIC_RESOLVER_NODE, ens, ETH_TLD_NODE, ens, ENS_ROOT, ens, ens",False
"constructor(,,,,,)","daoFactory, registryBase, repoBase, ensSubdomainRegistrarBase, ens",False
"newAPM(bytes32,bytes32,address)","ens, ens, ens, daoFactory, ENS_SUB_APP_NAME, ensSubdomainRegistrarBase, APM_APP_NAME, registryBase, REPO_APP_NAME, repoBase, ens, ens, APM_APP_NAME, registryBase, ENS_SUB_APP_NAME, ensSubdomainRegistrarBase, REPO_APP_NAME, repoBase",False
