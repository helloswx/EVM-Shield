Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approveAndCall(address,uint,bytes)",,False
"signedTransferHash(address,address,uint,uint,uint)",,False
"signedTransferCheck(address,address,uint,uint,uint,bytes,address)",,False
"signedTransfer(address,address,uint,uint,uint,bytes,address)",,False
"signedApproveHash(address,address,uint,uint,uint)",,False
"signedApproveCheck(address,address,uint,uint,uint,bytes,address)",,False
"signedApprove(address,address,uint,uint,uint,bytes,address)",,False
"signedTransferFromHash(address,address,address,uint,uint,uint)",,False
"signedTransferFromCheck(address,address,address,uint,uint,uint,bytes,address)",,False
"signedTransferFrom(address,address,address,uint,uint,uint,bytes,address)",,False
"signedApproveAndCallHash(address,address,uint,bytes,uint,uint)",,False
"signedApproveAndCallCheck(address,address,uint,bytes,uint,uint,bytes,address)",,False
"signedApproveAndCall(address,address,uint,bytes,uint,uint,bytes,address)",,False
"mint(address,uint,bool)",,False
unlockAccount(address),,False
disableMinting(),,False
enableTransfers(),,False
certified(address),,False
Owned(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
DeveryVesting(address),crowdsale,False
"addEntryInDays(address,uint,uint)",,False
"addEntryInMonths(address,uint,uint)",,False
"addEntryInYears(address,uint,uint)",,False
tokenShare(address),"entries, totalProportion, totalTokens, totalProportion",False
"vested(address,uint)","startDate, startDate, entries, totalProportion, totalTokens, totalProportion, startDate, startDate",False
withdrawable(address),"entries, totalProportion",False
withdraw(),"entries, totalProportion, crowdsale",True
withdrawn(address),entries,False
finalise(),"crowdsale, totalTokens, crowdsale, startDate",True
DeveryCrowdsale(),vestingTeamWallet,False
setBTTSToken(address),"startDate, bttsToken, bttsToken",False
setPICOPSCertifier(address),"startDate, picopsCertifier, picopsCertifier",False
setWallet(address),"wallet, wallet",False
setReserveWallet(address),"reserveWallet, reserveWallet",False
setStartDate(uint),"startDate, startDate",False
setFirstPeriodEndDate(uint),"startDate, firstPeriodEndDate, firstPeriodEndDate",False
setEndDate(uint),"firstPeriodEndDate, endDate, endDate",False
setUsdPerKEther(uint),"startDate, usdPerKEther, usdPerKEther",False
setFirstPeriodCap(uint),"MIN_CONTRIBUTION_ETH, firstPeriodCap, firstPeriodCap",False
capEth(),"CAP_USD, usdPerKEther",False
presaleEth(),presaleToken,False
crowdsaleEth(),,False
"eveFromEth(uint,uint)","PRESALE_BONUS_PERCENT, PRESALEPLUSCROWDSALE_EVE",False
evePerEth(),,False
usdPerEve(),usdPerKEther,False
generateTokensForPresaleAccounts(),"bttsToken, presaleProcessed, presaleToken, bttsToken, presaleEthAmountsProcessed, presaleEthAmountsProcessed, accountEthAmount, accountEthAmount, PRESALE_BONUS_PERCENT, PER_ACCOUNT_ADDITIONAL_TOKENS, usdPerKEther, contributedEth, contributedEth, contributedUsd, contributedUsd, generatedEve, generatedEve, PRESALE_BONUS_PERCENT, contributedEth, contributedUsd, generatedEve, bttsToken, presaleEthAmountsProcessed, presaleToken, presaleProcessed",False
"function()publicpayable{require(!finalised);uintethAmount=msg.value;if(msg.sender==owner){require(msg.value==MIN_CONTRIBUTION_ETH);}else{require(now>=startDate&&now<=endDate);if(now<=firstPeriodEndDate){require(accountEthAmount[msg.sender].add(ethAmount)<=firstPeriodCap);require(picopsCertifier.certified(msg.sender));}}require(contributedEth<capEth());require(msg.value>=MIN_CONTRIBUTION_ETH);uintethRefund=0;if(contributedEth.add(ethAmount)>capEth()){ethAmount=capEth().sub(contributedEth);ethRefund=msg.value.sub(ethAmount);}uintusdAmount=ethAmount.mul(usdPerKEther).div(10**uint(3+18));uinteveAmount=eveFromEth(ethAmount,0);if(picopsCertifier.certified(msg.sender)&&!bonusTokensAllocate[msg.sender]){eveAmount=eveAmount.add(PER_ACCOUNT_ADDITIONAL_TOKENS);bonusTokensAllocate[msg.sender]=true;}generatedEve=generatedEve.add(eveAmount);contributedEth=contributedEth.add(ethAmount);contributedUsd=contributedUsd.add(usdAmount);accountEthAmount[msg.sender]=accountEthAmount[msg.sender].add(ethAmount);bttsToken.mint(msg.sender,eveAmount,false);if(ethAmount>0){wallet.transfer(ethAmount);}Contributed(msg.sender,ethAmount,ethRefund,accountEthAmount[msg.sender],usdAmount,0,eveAmount,contributedEth,contributedUsd,generatedEve);if(ethRefund>0){msg.sender.transfer(ethRefund);}}()","finalised, owner, MIN_CONTRIBUTION_ETH, startDate, endDate, firstPeriodEndDate, accountEthAmount, firstPeriodCap, picopsCertifier, contributedEth, MIN_CONTRIBUTION_ETH, contributedEth, contributedEth, usdPerKEther, picopsCertifier, PER_ACCOUNT_ADDITIONAL_TOKENS, generatedEve, generatedEve, contributedEth, contributedEth, contributedUsd, contributedUsd, accountEthAmount, accountEthAmount, bttsToken, wallet, accountEthAmount, contributedEth, contributedUsd, generatedEve",True
finalise(),"finalised, endDate, contributedEth, generatedEve, TEAM_PERCENT_EVE, RESERVE_PERCENT_EVE, TEAM_PERCENT_EVE, RESERVE_PERCENT_EVE, generatedEve, generatedEve, generatedEve, generatedEve, generatedEve, generatedEve, generatedEve, generatedEve, TARGET_EVE, generatedEve, TARGET_EVE, generatedEve, TARGET_EVE, bttsToken, vestingTeamWallet, bttsToken, reserveWallet, bttsToken, vestingTeamWallet, finalised",False
