Function Name,State Variables Modified,Can Transfer Ether
balanceOf(address),,False
"transfer(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)",,True
"approve(address,uint256)",,True
"allowance(address,address)",,False
"QravityTeamTimelock(,address)",controller,False
"release(address,uint256)","controller, releasedAmount, releasedAmount",True
availableAmount(uint256),"releasedAmount, releasedAmount",False
availablePercent(uint256),,False
"QCOToken(address,address,address,address,address,address)","stateControl, whitelistControl, withdrawControl, tokenAssignmentControl, endBlock, ETH_QCO, totalSupply, maxTotalSupply, soldTokens, teamWallet, reserves, reserves, totalSupply, reserves, totalSupply, reserves, totalSupply",False
"function()payablepublicrequireState(States.Ico){require(whitelist[msg.sender]==true);require(msg.value>0);require(msg.data.length<4);require(block.number<endBlock);uint256soldToTuserWithBonus=calcBonus(msg.value);issueTokensToUser(msg.sender,soldToTuserWithBonus);ethPossibleRefunds[msg.sender]=ethPossibleRefunds[msg.sender].add(msg.value);}()","whitelist, endBlock, ethPossibleRefunds, ethPossibleRefunds",True
getCurrentBonusFactor(),pauseOffset,False
getNextCutoffTime(),pauseOffset,False
calcBonus(uint256),ETH_QCO,False
"updateEthICOVariables(uint256,uint256)","state, state, endBlock, ETH_QCO",False
startICO(),endBlock,False
"addPresaleAmount(address,uint256)","state, state",False
endICO(),,False
anyoneEndICO(),endBlock,False
addToWhitelist(address),whitelist,False
pause(),pauseLastStart,False
abort(),,False
resumeICO(),"pauseOffset, pauseOffset, pauseLastStart",False
requestRefund(),"ethPossibleRefunds, ethPossibleRefunds, ethPossibleRefunds",True
requestPayout(uint),,True
"rescueToken(,address)",,True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)",,True
