Function Name,State Variables Modified,Can Transfer Ether
Owned(),owner,True
proposeOwnership(address),"newOwnerCandidate, newOwnerCandidate",True
acceptOwnership(),"newOwnerCandidate, owner, owner, newOwnerCandidate, newOwnerCandidate, owner",True
changeOwnership(address),"owner, owner, newOwnerCandidate, owner",False
removeOwnership(address),"owner, newOwnerCandidate",False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"allowance(address,address)",,False
"Escapable(address,address)","escapeHatchCaller, escapeHatchDestination",False
isTokenEscapable(address),escapeBlacklist,False
escapeHatch(address),"escapeBlacklist, escapeHatchDestination, token, token, escapeHatchDestination",True
changeHatchEscapeCaller(address),escapeHatchCaller,False
"LiquidPledgingBase(address,address,address)",vault,False
addValidPlugin(bytes32),,False
removeValidPlugin(bytes32),,False
useWhitelist(bool),usePluginWhitelist,False
isValidPlugin(address),usePluginWhitelist,False
getCodeHash(address),,False
Controlled(),controller,True
changeController(address),controller,False
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, token, token, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
"LPPCampaign(,string,string,address,address)","liquidPledging, token, tokenFactory, initPending",True
changeReviewer(address),newReviewer,False
acceptNewReviewer(),"newReviewer, reviewer, newReviewer, newReviewer",True
"beforeTransfer(uint64,uint64,uint64,uint64,uint)","liquidPledging, liquidPledging, liquidPledging, idProject",True
"afterTransfer(uint64,uint64,uint64,uint64,uint)","liquidPledging, liquidPledging, liquidPledging, liquidPledging, token, liquidPledging",True
cancelCampaign(),"liquidPledging, idProject",False
"transfer(uint64,uint,uint64)","liquidPledging, idProject",True
isCanceled(),"liquidPledging, idProject",False
"sendTransaction(address,uint,bytes)",,True
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
