Function Name,State Variables Modified,Can Transfer Ether
"safeAdd(uint,uint)",,False
"safeSub(uint,uint)",,False
"safeMul(uint,uint)",,False
"safeDiv(uint,uint)",,False
constructor(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
constructor(),"symbol, name, decimals, totalSupply, tokenOwner, freeCrawDeadline, tokenOwner, totalSupply, tokenOwner, totalSupply",False
"managerAccount(address,uint256)",frozenAccountByOwner,False
totalSupply(),totalSupply,False
balanceOf(address),,False
"transfer(address,uint)",frozenAccountByOwner,True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",frozenAccountByOwner,True
"allowance(address,address)",,False
"approveAndCall(address,uint)",,True
constructor(),"beneficiary, minGoal, maxGoal, price, fundingGoalReached, crowdsaleClosed, amountRaised, tokenAmountRasied, bonus01, bonus01Start, bonus01End, bonus02, bonus02Start, bonus02End, bonus, perPrice, perDeadLine, perAmountRaised, perTokenAmount, perTokenAmountMax",False
"function()publicpayable{require(!crowdsaleClosed);require(msg.sender!=tokenOwner);if(block.timestamp>freeCrawDeadline){crowdsaleClosed=true;revert();}uintamount=msg.value;uint256returnTokenAmount=0;if(block.timestamp<perDeadLine){if(perTokenAmount>=perTokenAmountMax){revert();}perAmountRaised=safeAdd(perAmountRaised,amount);returnTokenAmount=safeMul(amount,perPrice);perTokenAmount=safeAdd(perTokenAmount,returnTokenAmount);}else{fundBalance[msg.sender]=safeAdd(fundBalance[msg.sender],amount);if((amountRaised>=bonus01Start)&&(amountRaised<bonus01End)){bonus=bonus01;}elseif((amountRaised>=bonus02Start)&&(amountRaised<bonus02End)){bonus=bonus02;}else{bonus=0;}amountRaised=safeAdd(amountRaised,amount);returnTokenAmount=safeMul(amount,price);returnTokenAmount=safeAdd(returnTokenAmount,safeDiv(safeMul(returnTokenAmount,bonus),100));}totalRaised=safeAdd(totalRaised,amount);tokenAmountRasied=safeAdd(tokenAmountRasied,returnTokenAmount);fundTransfer(msg.sender,returnTokenAmount);emitFundTransfer(msg.sender,amount,true);if(amountRaised>=minGoal){fundingGoalReached=true;}if(amountRaised>=maxGoal){fundingGoalReached=true;crowdsaleClosed=true;}}()","crowdsaleClosed, tokenOwner, freeCrawDeadline, crowdsaleClosed, perDeadLine, perTokenAmount, perTokenAmountMax, perAmountRaised, perAmountRaised, perPrice, perTokenAmount, perTokenAmount, fundBalance, fundBalance, amountRaised, bonus01Start, amountRaised, bonus01End, bonus, bonus01, amountRaised, bonus02Start, amountRaised, bonus02End, bonus, bonus02, bonus, amountRaised, amountRaised, price, bonus, totalRaised, totalRaised, tokenAmountRasied, tokenAmountRasied, amountRaised, minGoal, fundingGoalReached, amountRaised, maxGoal, fundingGoalReached, crowdsaleClosed",True
checkGoalReached(),"amountRaised, minGoal, fundingGoalReached, beneficiary, amountRaised, crowdsaleClosed",False
safeWithdrawal(),"fundingGoalReached, beneficiary, fundBalance, fundBalance, fundingGoalReached, beneficiary, beneficiary, perAmountRaised",True
perSaleWithDrawal(),"beneficiary, perAmountRaised, perAmountRaised, beneficiary, perAmountRaised, perAmountRaised",True
