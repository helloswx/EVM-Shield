Function Name,State Variables Modified,Can Transfer Ether
"receiveApproval(address,uint256,address,bytes)",,False
constructor(),theAO,True
transferOwnership(address),"theAO, theAO",True
"setWhitelist(address,bool)","theAO, whitelist",True
isCompromised(address),,False
"initialize(address,address,address)",,False
"isKeyExist(address,address)",,False
getDefaultKey(address),,False
"whitelistAddKey(address,address)",,False
"senderIsAdvocate(address,address)",,False
"senderIsListener(address,address)",,False
"senderIsSpeaker(address,address)",,False
"senderIsPosition(address,address)",,False
getAdvocate(address),,False
"nameIsAdvocate(address,address)",,False
"nameIsPosition(address,address)",,False
"initialize(address,address,address,address)",,False
"determinePosition(address,address)",,False
"getSettingValuesByTAOName(address,string)",,False
getSettingTypes(),,False
settingTypeLookup(uint256),,False
"createPrimordialLot(address,uint256,uint256,uint256)",,False
"createWeightedMultiplierLot(address,uint256,uint256)",,False
lotById(bytes32),,False
totalLotsByAddress(address),,False
"createBurnLot(address,uint256,uint256)",,False
"createConvertLot(address,uint256,uint256)",,False
"constructor(uint256,string,string)","totalSupply, decimals, balanceOf, totalSupply, name, symbol",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
burn(uint256),"balanceOf, balanceOf, totalSupply",True
"burnFrom(address,uint256)","balanceOf, allowance, balanceOf, allowance, totalSupply",True
nonces(address),,False
incrementNonce(address),,False
ethAddressToNameId(address),,False
"setNameNewAddress(address,address)",,False
nameIdToEthAddress(address),,False
"constructor(string,address,string,string,string,bytes32,address)","name, originId, datHash, database, keyValue, contentId, typeId, vaultAddress",False
function()externalpayable{}(),,False
"transferEth(address,uint256)",,True
"transferERC20(address,address,uint256)",,True
"constructor(string,address,string,string,string,bytes32,address)",typeId,False
isTAO(address),,False
isName(address),,False
isValidERC20TokenAddress(address),,False
"isTheAO(address,address,address)",,True
PERCENTAGE_DIVISOR(),_PERCENTAGE_DIVISOR,False
MULTIPLIER_DIVISOR(),_MULTIPLIER_DIVISOR,False
"deployTAO(string,address,string,string,string,bytes32,address)",,False
"deployName(string,address,string,string,string,bytes32,address)",,False
"calculateWeightedMultiplier(uint256,uint256,uint256,uint256)",,False
"calculatePrimordialMultiplier(uint256,uint256,uint256,uint256,uint256)","_MULTIPLIER_DIVISOR, _MULTIPLIER_DIVISOR, _MULTIPLIER_DIVISOR",False
"calculateNetworkBonusPercentage(uint256,uint256,uint256,uint256,uint256)","_PERCENTAGE_DIVISOR, _PERCENTAGE_DIVISOR, _PERCENTAGE_DIVISOR",False
"calculateNetworkBonusAmount(uint256,uint256,uint256,uint256,uint256)",_PERCENTAGE_DIVISOR,False
"calculateMaximumBurnAmount(uint256,uint256,uint256)",,False
"calculateMultiplierAfterBurn(uint256,uint256,uint256)",,False
"calculateMultiplierAfterConversion(uint256,uint256,uint256)",,False
numDigits(uint256),,False
"receiveApproval(address,uint256,address,bytes)",,False
"constructor(string,string,address,address,address)","name, symbol, powerOfTen, decimals",False
transferOwnership(address),theAO,False
"setWhitelist(address,bool)",whitelist,False
setNameTAOPositionAddress(address),"nameTAOPositionAddress, _nameTAOPosition, nameTAOPositionAddress",False
setNamePublicKeyAddress(address),"namePublicKeyAddress, _namePublicKey, namePublicKeyAddress",False
setNameAccountRecoveryAddress(address),"nameAccountRecoveryAddress, _nameAccountRecovery, nameAccountRecoveryAddress",False
"transferEth(address,uint256)",,True
"freezeAccount(address,bool)",frozenAccount,False
"setPrices(uint256,uint256)","sellPrice, buyPrice",False
"mint(address,uint256)",,False
"stakeFrom(address,uint256)","balanceOf, balanceOf, balanceOf, stakedBalance, stakedBalance",False
"unstakeFrom(address,uint256)","stakedBalance, stakedBalance, stakedBalance, balanceOf, balanceOf",False
"escrowFrom(address,address,uint256)","balanceOf, balanceOf, balanceOf, escrowedBalance, escrowedBalance",False
"mintEscrow(address,uint256)","escrowedBalance, escrowedBalance, totalSupply, totalSupply",False
"unescrowFrom(address,uint256)","escrowedBalance, escrowedBalance, escrowedBalance, balanceOf, balanceOf",False
"whitelistBurnFrom(address,uint256)","balanceOf, balanceOf, balanceOf, totalSupply, totalSupply",False
"whitelistTransferFrom(address,address,uint256)",,True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance",True
"transferBetweenPublicKeys(address,address,address,uint256)","_nameTAOPosition, _nameAccountRecovery, _namePublicKey, _namePublicKey",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
burn(uint256),"balanceOf, balanceOf, totalSupply",True
"burnFrom(address,uint256)","balanceOf, allowance, balanceOf, allowance, totalSupply",True
buy(),"buyPrice, buyPrice",True
sell(uint256),"sellPrice, sellPrice, sellPrice",True
"constructor(uint256,string,string,address,address)",,False
transferOwnership(address),theAO,False
"setWhitelist(address,bool)",whitelist,False
setAOIonAddress(address),"aoIonAddress, _aoIon",False
setNameTAOPositionAddress(address),nameTAOPositionAddress,False
"transferERC20(address,address,uint256)",,True
"addERC20Token(address,uint256,uint256)","erc20TokenIdLookup, totalERC20Tokens, erc20TokenIdLookup, totalERC20Tokens, erc20Tokens, totalERC20Tokens",False
"setPrice(address,uint256)","erc20TokenIdLookup, erc20Tokens, erc20TokenIdLookup",False
"setMaxQuantity(address,uint256)","erc20TokenIdLookup, erc20Tokens, erc20TokenIdLookup",False
"setActive(address,bool)","erc20TokenIdLookup, erc20Tokens, erc20TokenIdLookup",False
"whitelistTransferFrom(address,address,uint256)",,True
getById(uint256),"erc20Tokens, erc20Tokens",False
getByAddress(address),"erc20TokenIdLookup, erc20TokenIdLookup",False
"receiveApproval(address,uint256,address,bytes)","erc20TokenIdLookup, erc20Tokens, erc20TokenIdLookup, _aoIon, balanceOf, balanceOf, totalSupply, totalSupply, totalTokenExchanges, totalAddressTokenExchanges, totalTokenExchanges, tokenExchangeIdLookup, totalTokenExchanges, tokenExchanges, totalTokenExchanges",True
getTokenExchangeById(bytes32),"tokenExchangeIdLookup, tokenExchanges, tokenExchangeIdLookup",False
"constructor(string,string,address,address,address,address,address)","powerOfTen, decimals",False
setAOIonLotAddress(address),"aoIonLotAddress, _aoIonLot",False
setSettingTAOId(address),settingTAOId,False
setAOSettingAddress(address),"aoSettingAddress, _aoSetting",False
"setAODevTeamAddresses(address,address)","aoDevTeam1, aoDevTeam2",False
setAOETHAddress(address),"aoethAddress, _aoeth",False
"setPrimordialPrices(uint256,uint256)","primordialSellPrice, primordialBuyPrice",False
endNetworkExchange(),"networkExchangeEnded, networkExchangeEnded",False
"stakePrimordialFrom(address,uint256,uint256)","primordialBalanceOf, ownerWeightedMultiplier, primordialBalanceOf, primordialBalanceOf, primordialStakedBalance, primordialStakedBalance",False
"unstakePrimordialFrom(address,uint256,uint256)","primordialStakedBalance, primordialStakedBalance, primordialStakedBalance, primordialBalanceOf, primordialBalanceOf",False
"whitelistTransferPrimordialFrom(address,address,uint256)",,False
buyPrimordial(),"networkExchangeEnded, totalEthForPrimordial, totalEthForPrimordial",True
buyPrimordialWithAOETH(uint256),"networkExchangeEnded, totalRedeemedAOETH, totalRedeemedAOETH, _aoeth",True
"transferPrimordial(address,uint256)",,True
"transferPrimordialFrom(address,address,uint256)","primordialAllowance, primordialAllowance, primordialAllowance",True
"transferPrimordialBetweenPublicKeys(address,address,address,uint256)","_nameTAOPosition, _nameAccountRecovery, _namePublicKey, _namePublicKey",True
"approvePrimordial(address,uint256)",primordialAllowance,True
"approvePrimordialAndCall(address,uint256,bytes)",,True
burnPrimordial(uint256),"primordialBalanceOf, ownerWeightedMultiplier, primordialBalanceOf, primordialBalanceOf, primordialTotalSupply, primordialTotalSupply, _aoIonLot, ownerWeightedMultiplier",True
"burnPrimordialFrom(address,uint256)","primordialBalanceOf, primordialAllowance, ownerWeightedMultiplier, primordialBalanceOf, primordialBalanceOf, primordialAllowance, primordialAllowance, primordialTotalSupply, primordialTotalSupply, _aoIonLot, ownerWeightedMultiplier",True
weightedMultiplierByAddress(address),ownerWeightedMultiplier,False
maxMultiplierByAddress(address),"_aoIonLot, ownerMaxMultiplier",False
calculateMultiplierAndBonus(uint256),"TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought, TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought, TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought",False
calculateMaximumBurnAmount(address),"primordialBalanceOf, ownerWeightedMultiplier, ownerMaxMultiplier",False
"calculateMultiplierAfterBurn(address,uint256)","primordialBalanceOf, ownerWeightedMultiplier",False
"calculateMultiplierAfterConversion(address,uint256)","primordialBalanceOf, ownerWeightedMultiplier",False
convertToPrimordial(uint256),"balanceOf, ownerWeightedMultiplier, _aoIonLot, ownerWeightedMultiplier",True
availablePrimordialForSale(),"TOTAL_PRIMORDIAL_FOR_SALE, primordialTotalBought",False
availablePrimordialForSaleInETH(),primordialBuyPrice,False
availableETH(),"_aoeth, totalRedeemedAOETH, primordialBuyPrice, primordialBuyPrice",False
"constructor(address,address)",,False
transferOwnership(address),theAO,False
"setWhitelist(address,bool)",whitelist,False
setNameFactoryAddress(address),"nameFactoryAddress, _nameFactory",False
setNameTAOPositionAddress(address),"nameTAOPositionAddress, _nameTAOPosition",False
setNameAccountRecoveryAddress(address),"nameAccountRecoveryAddress, _nameAccountRecovery, nameAccountRecoveryAddress",False
setAOIonAddress(address),"aoIonAddress, _aoIon",False
ethBalanceOf(address),,False
"erc20BalanceOf(address,address)",,False
AOBalanceOf(address),_aoIon,False
primordialAOBalanceOf(address),_aoIon,False
"transferEth(address,address,uint256)","_nameFactory, _nameAccountRecovery, _nameFactory, _nameAccountRecovery, _nameFactory",True
"transferERC20(address,address,address,uint256)","_nameFactory, _nameAccountRecovery, _nameFactory, _nameAccountRecovery, _nameFactory",True
"transferAO(address,address,uint256)","_aoIon, _nameFactory, _nameAccountRecovery, _nameFactory, _nameAccountRecovery, _aoIon, _nameFactory",True
"transferPrimordialAO(address,address,uint256)","_aoIon, _nameFactory, _nameAccountRecovery, _nameFactory, _nameAccountRecovery, _aoIon, _nameFactory",True
