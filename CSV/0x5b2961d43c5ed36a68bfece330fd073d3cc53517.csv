Function Name,State Variables Modified,Can Transfer Ether
"function()externalpayable{require(BankContract.getState()&&msg.value>=0.05ether);BankContract.setInfo(msg.sender,msg.value.mul(90).div(100));teamAddressOne.transfer(msg.value.mul(4).div(100));teamAddressTwo.transfer(msg.value.mul(4).div(100));teamAddressThree.transfer(msg.value.mul(2).div(100));address(BankContract).transfer(msg.value.mul(90).div(100));}()","BankContract, BankContract, teamAddressOne, teamAddressTwo, teamAddressThree, BankContract",True
"constructor(address,address)","BankContract, BankContract, CBCTokenContract, CBCTokenContract",False
"constructor(address,address)","BankContract, BankContract, CBCTokenContract, CBCTokenContract",False
constructor(),"currentDeadline, lastDeadline",False
setCBCTokenAddress(address),"CBCTokenContract, CBCTokenContract",False
setBearsAddress(address),"BearsContract, BearsContract",False
setBullsAddress(address),"BullsContract, BullsContract",False
getNow(),,False
getState(),currentDeadline,False
"setInfo(address,uint256)","BearsContract, BullsContract, BearsContract, depositBulls, depositBears, countOfBears, totalSupplyOfBears, totalSupplyOfBears, depositBears, depositBears, BullsContract, depositBears, depositBulls, countOfBulls, totalSupplyOfBulls, totalSupplyOfBulls, depositBulls, depositBulls, lastHero, currentDeadline, lastDeadline, currentDeadline, currentDeadline, currentDeadline, lastDeadline, jackPot",True
calculateProbability(),"winner, totalCBCSupplyOfBulls, CBCTokenContract, BullsContract, totalCBCSupplyOfBears, CBCTokenContract, BearsContract, totalSupplyOfBulls, totalSupplyOfBears, totalCBCSupplyOfBulls, totalCBCSupplyOfBulls, totalCBCSupplyOfBears, totalCBCSupplyOfBears, totalCBCSupplyOfBulls, totalCBCSupplyOfBears, totalCBCSupplyOfBears, totalCBCSupplyOfBulls, probabilityOfBears, totalSupplyOfBears, probabilityOfBears, probabilityOfBears, probabilityOfBears, probabilityOfBears, probabilityOfBulls, probabilityOfBears, totalCBCSupplyOfBulls, totalCBCSupplyOfBears, probabilityOfBulls, totalSupplyOfBulls, probabilityOfBulls, probabilityOfBulls, probabilityOfBulls, probabilityOfBulls, probabilityOfBears, probabilityOfBulls, totalCBCSupplyOfBulls, CBCTokenContract, BullsContract, totalCBCSupplyOfBears, CBCTokenContract, BearsContract",False
getWinners(),"winner, totalSupplyOfBulls, totalSupplyOfBears, totalCBCSupplyOfBulls, totalCBCSupplyOfBulls, probabilityOfBears, winner, probabilityOfBears, winner",False
"function()externalpayable{if(msg.value==0&&!getState()&&winner>0){require(depositBears[msg.sender]>0||depositBulls[msg.sender]>0);uintpayout=0;uintpayoutCBC=0;if(winner==1&&depositBears[msg.sender]>0){payout=calculateETHPrize(msg.sender);}if(winner==2&&depositBulls[msg.sender]>0){payout=calculateETHPrize(msg.sender);}if(payout>0){depositBears[msg.sender]=0;depositBulls[msg.sender]=0;msg.sender.transfer(payout);}if((winner==1&&depositBears[msg.sender]==0)||(winner==2&&depositBulls[msg.sender]==0)){payoutCBC=calculateCBCPrize(msg.sender);if(CBCTokenContract.balanceOf(address(BullsContract))>0)CBCTokenContract.transferFrom(address(BullsContract),address(this),CBCTokenContract.balanceOf(address(BullsContract)));if(CBCTokenContract.balanceOf(address(BearsContract))>0)CBCTokenContract.transferFrom(address(BearsContract),address(this),CBCTokenContract.balanceOf(address(BearsContract)));CBCTokenContract.transfer(msg.sender,payoutCBC);}if(msg.sender==lastHero){lastHeroHistory=lastHero;lastHero=address(0x0);msg.sender.transfer(jackPot);}}}()","winner, depositBears, depositBulls, winner, depositBears, winner, depositBulls, depositBears, depositBulls, winner, depositBears, winner, depositBulls, CBCTokenContract, BullsContract, CBCTokenContract, BullsContract, CBCTokenContract, BullsContract, CBCTokenContract, BearsContract, CBCTokenContract, BearsContract, CBCTokenContract, BearsContract, CBCTokenContract, lastHero, lastHeroHistory, lastHero, lastHero, jackPot",True
calculateETHPrize(address),"totalSupplyOfBears, totalSupplyOfBulls, depositBears, totalSupply, depositBears, totalSupplyOfBears, depositBulls, totalSupply, depositBulls, totalSupplyOfBulls",False
calculateCBCPrize(address),"totalCBCSupplyOfBears, totalCBCSupplyOfBulls, depositBears, totalSupply, depositBears, totalSupplyOfBears, depositBulls, totalSupply, depositBulls, totalSupplyOfBulls",False
constructor(),owner,True
transferOwnership(address),owner,False
constructor(),,True
getAuthorizer(uint),,False
isAuthorized(address),,False
addAuthorized(address),,False
"updateRate(string,uint)",rates,False
updateRates(),"rates, symbol, symbol",False
getRate(string),rates,False
balanceOf(address),,False
"transfer(address,uint)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
"transfer(address,uint)",,True
balanceOf(address),,False
"transferFrom(address,address,uint)",,True
"approve(address,uint)",,True
"allowance(address,address)",,False
"mint(address,uint)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
"burn(address,uint256)",,False
startTrading(),tradingStarted,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
createTokens(address),"exchangeRate, token, multisigVault",True
setAltDeposit(uint),altDeposits,False
"authorizedCreateTokens(address,uint)",token,False
authorizedStartTrading(),token,False
"authorizedBurnTokens(address,uint)",token,False
setHardCap(uint),,False
setStart(uint),start,False
setMultisigVault(address),multisigVault,False
setExchangeRate(address),exchangeRate,False
finishMinting(),"token, token, multisigVault, token, token, owner",True
retrieveTokens(address),"token, multisigVault, token",True
function()externalpayable{createTokens(msg.sender);}(),,True
