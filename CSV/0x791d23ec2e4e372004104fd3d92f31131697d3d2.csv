Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),owner,False
"receiveApproval(address,uint256,address,bytes)",,False
"constructor(uint256,string,string)","totalSupply, initialSupply, balanceOf, balanceOf, totalSupply, name, tokenName, symbol, tokenSymbol",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance, allowance",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
burn(uint256),"balanceOf, balanceOf, balanceOf, totalSupply, totalSupply",True
"burnFrom(address,uint256)","balanceOf, allowance, balanceOf, balanceOf, allowance, allowance, totalSupply, totalSupply",True
constructor(),"tokenHolderExist, tokenHolders",True
"freezeAccount(address,bool)",frozenAccount,False
"function()payablepublic{require(icoEndDate>now);require(icoStartDate<now);uintethervalueWEI=msg.value;uint256token=ethervalueWEI.mul(exchangeRate);uint256totalTokens=token.add(purchaseBonus(token));tokensSold=tokensSold.add(totalTokens);_transfer(this,msg.sender,totalTokens);forwardEherToOwner();}()","icoEndDate, icoStartDate, exchangeRate, tokensSold, tokensSold",True
purchaseBonus(uint256),icoStartDate,False
isICORunning(),"icoEndDate, icoStartDate",False
withdrawTokens(),"icoEndDate, withdrawTokensOnlyOnce, totalTokensForICO, tokensSold, withdrawTokensOnlyOnce",True
checkDividendPaymentAvailable(),"dividendStartDate, dividendMonthCounter, tokenHolders",False
runDividendPayment(),"dividendStartDate, dividendMonthCounter, totalSupply, balanceOf, tokenHolderIndex, tokenHolders, balanceOf, tokenHolders, tokenHolderIndex, monthlyAllocation, tokenHolders, tokenHolderIndex, tokenHolderIndex, tokenHolderIndex, dividendMonthCounter, monthlyAllocation, monthlyAllocation, monthlyAllocation, tokenHolderIndex",True
