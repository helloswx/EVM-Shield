Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
destroy(),owner,False
destroyAndSend(address),,False
supportsInterface(bytes4),,False
balanceOf(address),,False
ownerOf(uint256),,False
"approve(address,uint256)",,False
getApproved(uint256),,False
"setApprovalForAll(address,bool)",,False
"isApprovedForAll(address,address)",,False
"transferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256,bytes)",,False
totalSupply(),,False
"tokenOfOwnerByIndex(address,uint256)",,False
tokenByIndex(uint256),,False
name(),,False
symbol(),,False
tokenURI(uint256),,False
constructor(),InterfaceId_ERC165,False
supportsInterface(bytes4),supportedInterfaces,False
"onERC721Received(address,address,uint256,bytes)",,False
constructor(),InterfaceId_ERC721,False
balanceOf(address),ownedTokensCount,False
ownerOf(uint256),"tokenOwner, owner, owner",False
"approve(address,uint256)","owner, owner, owner, tokenApprovals, owner",True
getApproved(uint256),tokenApprovals,False
"setApprovalForAll(address,bool)",operatorApprovals,True
"isApprovedForAll(address,address)",operatorApprovals,False
"transferFrom(address,address,uint256)",,True
"safeTransferFrom(address,address,uint256)",,False
"safeTransferFrom(address,address,uint256,bytes)",,True
"constructor(string,string)","name_, symbol_, InterfaceId_ERC721Enumerable, InterfaceId_ERC721Metadata",False
name(),name_,False
symbol(),symbol_,False
tokenURI(uint256),tokenURIs,False
"tokenOfOwnerByIndex(address,uint256)",ownedTokens,False
totalSupply(),allTokens,False
tokenByIndex(uint256),allTokens,False
"mintFor(uint,address)","mintedCars, MAX_CARS, token, tankSizes, token, mintedCars",False
"giveaway(uint256,uint256,uint,bool,address)","token, owner, token, tankSizes, savedTypes, token, mintedCars, giveawayCar",False
"setTokenMeta(,,)","token, tankSizes, savedTypes, availableIds",False
attachPreOrder(address),,False
attachToken(address),"token, token",False
constructor(address),"factory, carTypeTotalSupply, UNKNOWN_TYPE, carTypeTotalSupply, SUV_TYPE, carTypeTotalSupply, TANKER_TYPE, carTypeTotalSupply, HOVERCRAFT_TYPE, carTypeTotalSupply, TANK_TYPE, carTypeTotalSupply, LAMBO_TYPE, carTypeTotalSupply, DUNE_BUGGY, carTypeTotalSupply, MIDGRADE_TYPE2, carTypeTotalSupply, MIDGRADE_TYPE3, carTypeTotalSupply, HATCHBACK, carTypeTotalSupply, REGULAR_TYPE2, carTypeTotalSupply, REGULAR_TYPE3, maxTankSizes, SUV_TYPE, maxTankSizes, TANKER_TYPE, maxTankSizes, HOVERCRAFT_TYPE, maxTankSizes, TANK_TYPE, maxTankSizes, LAMBO_TYPE, maxTankSizes, DUNE_BUGGY, maxTankSizes, MIDGRADE_TYPE2, maxTankSizes, MIDGRADE_TYPE3, maxTankSizes, HATCHBACK, maxTankSizes, REGULAR_TYPE2, maxTankSizes, REGULAR_TYPE3, maxBznTankSizeOfPremiumCarWithIndex, maxBznTankSizeOfPremiumCarWithIndex, maxBznTankSizeOfPremiumCarWithIndex, maxBznTankSizeOfPremiumCarWithIndex, maxBznTankSizeOfPremiumCarWithIndex, maxBznTankSizeOfMidGradeCarWithIndex, maxBznTankSizeOfMidGradeCarWithIndex, maxBznTankSizeOfMidGradeCarWithIndex, maxBznTankSizeOfRegularCarWithIndex, maxBznTankSizeOfRegularCarWithIndex, maxBznTankSizeOfRegularCarWithIndex, isTypeSpecial, HOVERCRAFT_TYPE, isTypeSpecial, TANK_TYPE, isTypeSpecial, LAMBO_TYPE",False
isCarSpecial(uint256),isSpecial,False
getCarType(uint256),carType,False
"mint(uint256,string,uint,uint256,address)","carTypeSupply, carTypeTotalSupply, maxTankSizes, premiumTotalSupplyForCar, midGradeTotalSupplyForCar, regularTotalSupplyForCar, carType, isSpecial, isTypeSpecial, carTypeSupply, carTypeSupply, tankSizes",False
isPremium(uint),"SUV_TYPE, TANKER_TYPE, HOVERCRAFT_TYPE, TANK_TYPE, LAMBO_TYPE",False
isMidGrade(uint),"DUNE_BUGGY, MIDGRADE_TYPE2, MIDGRADE_TYPE3",False
isRegular(uint),"HATCHBACK, REGULAR_TYPE2, REGULAR_TYPE3",False
getTotalSupplyForType(uint),carTypeSupply,False
getPremiumCarsForVariant(uint),premiumTotalSupplyForCar,False
getMidgradeCarsForVariant(uint),midGradeTotalSupplyForCar,False
getRegularCarsForVariant(uint),regularTotalSupplyForCar,False
getPremiumCarSupply(uint),premiumTotalSupplyForCar,False
getMidgradeCarSupply(uint),midGradeTotalSupplyForCar,False
getRegularCarSupply(uint),regularTotalSupplyForCar,False
exists(uint256),,False
function()publicpayable{}(),,False
"constructor(address,address,address)","token, factory, escrow, percentIncrease, percentBase, percentIncrease, percentBase, percentIncrease, percentBase, percentIncrease, percentBase, percentIncrease, percentBase, commissionRate, OPENSEA",False
"setCommission(address,uint256)","COMMISSION_PERCENT, COMMISSION_PERCENT, commissionRate",False
"setPercentIncrease(uint256,uint256,uint)","percentIncrease, percentBase",False
openShop(uint),"PREMIUM_CATEGORY, premiumOpen, MID_GRADE_CATEGORY, midgradeOpen, REGULAR_CATEGORY, regularOpen",False
"setTypePrice(uint,uint256)","currentTypePrice, currentTypePrice",False
withdraw(uint256),owner,True
"reserveManyTokens(,uint)","PREMIUM_CATEGORY, premiumOpen, MID_GRADE_CATEGORY, midgradeOpen, REGULAR_CATEGORY, regularOpen, GAS_REQUIREMENT, currentTypePrice, escrow",True
"buyBulkPremiumCar(address,,address)",PREMIUM_CATEGORY,False
"buyBulkMidGradeCar(address,,address)",MID_GRADE_CATEGORY,False
"buyBulkRegularCar(address,,address)",REGULAR_CATEGORY,False
"buyCar(address,uint,bool,address,uint)","PREMIUM_CATEGORY, MID_GRADE_CATEGORY, REGULAR_CATEGORY, PREMIUM_CATEGORY, premiumHold, premiumOpen, MID_GRADE_CATEGORY, midGradeHold, midgradeOpen, REGULAR_CATEGORY, regularHold, regularOpen, currentTypePrice, factory, PREMIUM_CATEGORY, premiumCarsBought, premiumHold, MID_GRADE_CATEGORY, midGradeCarsBought, midGradeHold, REGULAR_CATEGORY, regularCarsBought, regularHold, COMMISSION_PERCENT, commissionRate",True
priceFor(uint),"percentIncrease, percentBase, currentTypePrice",False
sold(uint256),token,False
