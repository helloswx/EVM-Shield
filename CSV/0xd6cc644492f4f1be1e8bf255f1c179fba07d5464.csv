Function Name,State Variables Modified,Can Transfer Ether
change_owner(address),new_owner,False
claim_ownership(),"new_owner, owner, new_owner",True
constructor(),locked_forever,False
"init_register_contract(bytes32,address)",,False
lock_resolver_forever(),locked_forever,False
get_contract(bytes32),,False
get_contract(bytes32),resolver,False
"find(,bytes32)",,False
"get(,uint256)",,False
total(),,False
start(),,False
start_item(),,False
end(),,False
end_item(),,False
"valid(,uint256)",,False
"valid_item(,bytes32)",,False
"previous(,uint256)",,False
"previous_item(,bytes32)",,False
"next(,uint256)",,False
"next_item(,bytes32)",,False
"find(,uint256)",,False
"get(,uint256)",,False
"append(,uint256)",,False
"remove_item(,uint256)",,False
total(),,False
start(),,False
start_item(),,False
end(),,False
end_item(),,False
"valid(,uint256)",,False
"valid_item(,uint256)",,False
"previous(,uint256)",,False
"previous_item(,uint256)",,False
"next(,uint256)",,False
"next_item(,uint256)",,False
"find(,address)",,False
"get(,uint256)",,False
"find(,bytes32,uint256)",,False
"get(,bytes32,uint256)",,False
"append(,bytes32,uint256)",,False
"remove_item(,bytes32,uint256)",,False
"total(,bytes32)",,False
"start(,bytes32)",,False
"start_item(,bytes32)",,False
"end(,bytes32)",,False
"end_item(,bytes32)",,False
"valid(,bytes32,uint256)",,False
"valid_item(,bytes32,uint256)",,False
"previous(,bytes32,uint256)",,False
"previous_item(,bytes32,uint256)",,False
"next(,bytes32,uint256)",,False
"next_item(,bytes32,uint256)",,False
"append(,address)",,False
"remove_item(,address)",,False
total(),,False
start(),,False
start_item(),,False
end(),,False
end_item(),,False
"valid(,uint256)",,False
"valid_item(,address)",,False
"previous(,uint256)",,False
"previous_item(,address)",,False
"next(,uint256)",,False
"next_item(,address)",,False
"append(,bytes32,address)",,False
"remove_item(,bytes32,address)",,False
"total(,bytes32)",,False
"start(,bytes32)",,False
"start_item(,bytes32)",,False
"end(,bytes32)",,False
"end_item(,bytes32)",,False
"valid(,bytes32,uint256)",,False
"valid_item(,bytes32,address)",,False
"previous(,bytes32,uint256)",,False
"previous_item(,bytes32,address)",,False
"next(,bytes32,uint256)",,False
"next_item(,bytes32,address)",,False
"find(,bytes32)",,False
"get(,uint256)",,False
"append(,bytes32)",,False
"remove_item(,bytes32)",,False
total(),,False
start(),,False
start_item(),,False
end(),,False
end_item(),,False
"valid(,uint256)",,False
"valid_item(,bytes32)",,False
"previous(,uint256)",,False
"previous_item(,bytes32)",,False
"next(,uint256)",,False
"next_item(,bytes32)",,False
"append(,bytes32,bytes32)",,False
"remove_item(,bytes32,bytes32)",,False
"total(,bytes32)",,False
"start(,bytes32)",,False
"start_item(,bytes32)",,False
"end(,bytes32)",,False
"end_item(,bytes32)",,False
"valid(,bytes32,uint256)",,False
"valid_item(,bytes32,bytes32)",,False
"previous(,bytes32,uint256)",,False
"previous_item(,bytes32,bytes32)",,False
"next(,bytes32,uint256)",,False
"next_item(,bytes32,bytes32)",,False
constructor(address),,False
"setWhitelisted(address,bool)",whitelist,True
"countVotes(,)",,False
"listVotes(,,bool)",,False
"readVote(,address)",,False
"revealVote(,address,bool,uint256)",,False
readVersion(),,False
"readProposalMilestone(,uint256)",,False
"addProposalVersion(,bytes32,,uint256)",,False
constructor(address),,False
readProposal(bytes32),,True
readProposalProposer(bytes32),,False
readTotalPrlActions(bytes32),,False
"readPrlAction(bytes32,uint256)",,False
readProposalDraftVotingResult(bytes32),,True
"readProposalVotingResult(bytes32,uint256)",,True
readProposalDraftVotingTime(bytes32),,True
"readProposalVotingTime(bytes32,uint256)",,True
"readDraftVotingCount(bytes32,)",,True
"readVotingCount(bytes32,uint256,)",,True
"readVotingRoundVotes(bytes32,uint256,,bool)",,True
"readDraftVote(bytes32,address)",,True
"readComittedVote(bytes32,uint256,address)",,True
"readVote(bytes32,uint256,address)",,True
getFirstProposal(),,False
getLastProposal(),,False
getNextProposal(bytes32),,False
getPreviousProposal(bytes32),,False
getFirstProposalInState(bytes32),,True
getLastProposalInState(bytes32),,True
"getNextProposalInState(bytes32,bytes32)",,True
"getPreviousProposalInState(bytes32,bytes32)",,True
"readProposalVersion(bytes32,bytes32)",,False
readProposalFunding(bytes32),,True
"readProposalMilestone(bytes32,uint256)",,True
getFirstProposalVersion(bytes32),,False
getLastProposalVersion(bytes32),,False
"getNextProposalVersion(bytes32,bytes32)",,False
"getPreviousProposalVersion(bytes32,bytes32)",,False
isDraftClaimed(bytes32),,False
"isClaimed(bytes32,uint256)",,False
readProposalCollateralStatus(bytes32),,True
readProposalCollateralAmount(bytes32),,False
readProposalDocs(bytes32),,False
"readIfMilestoneFunded(bytes32,uint256)",,True
"addProposal(bytes32,address,,uint256,bool)",,True
"editProposal(bytes32,bytes32,,uint256)",,True
"changeFundings(bytes32,,uint256)",,True
"addProposalDoc(bytes32,bytes32)",,True
finalizeProposal(bytes32),,True
"updateProposalEndorse(bytes32,address)",,True
"setProposalDraftPass(bytes32,bool)",,True
"setProposalPass(bytes32,uint256,bool)",,True
"setProposalDraftVotingTime(bytes32,uint256)",,True
"setProposalVotingTime(bytes32,uint256,uint256)",,True
"setDraftVotingClaim(bytes32,bool)",,True
"setVotingClaim(bytes32,uint256,bool)",,True
"setProposalCollateralStatus(bytes32,uint256)",,True
"setProposalCollateralAmount(bytes32,uint256)",,True
"updateProposalPRL(bytes32,uint256,bytes32,uint256)",,True
"addDraftVote(bytes32,address,bool,uint256)",,True
"commitVote(bytes32,bytes32,address,uint256)",,True
"revealVote(bytes32,address,bool,uint256,uint256)",,True
closeProposal(bytes32),,True
archiveProposal(bytes32),,True
"setMilestoneFunded(bytes32,uint256)",,True
constructor(address),,False
redeemBadge(address),redeemedBadge,True
setCarbonVoteBonusClaimed(address),carbonVoteBonusClaimed,True
updateTotalLockedDGDStake(uint256),totalLockedDGDStake,True
updateTotalModeratorLockedDGDs(uint256),totalModeratorLockedDGDStake,True
"updateUserDGDStake(address,uint256,uint256)","actualLockedDGD, lockedDGDStake",True
readUserDGDStake(address),"actualLockedDGD, lockedDGDStake",False
addToParticipantList(address),,True
removeFromParticipantList(address),,True
addToModeratorList(address),,True
removeFromModeratorList(address),,True
isInParticipantList(address),,False
isInModeratorsList(address),,False
readFirstModerator(),,False
readLastModerator(),,False
readNextModerator(address),,False
readPreviousModerator(address),,False
readTotalModerators(),,False
readFirstParticipant(),,False
readLastParticipant(),,False
readNextParticipant(address),,False
readPreviousParticipant(address),,False
readTotalParticipant(),,False
constructor(address),,False
"listModerators(uint256,bool)",,False
"listModeratorsFrom(address,uint256,bool)",,False
"listParticipants(uint256,bool)",,False
"listParticipantsFrom(address,uint256,bool)",,False
"listProposals(uint256,bool)",,False
"listProposalsFrom(bytes32,uint256,bool)",,False
"listProposalsInState(bytes32,uint256,bool)",,True
"listProposalsInStateFrom(bytes32,bytes32,uint256,bool)",,True
"listProposalVersions(bytes32,uint256,bool)",,False
"listProposalVersionsFrom(bytes32,bytes32,uint256,bool)",,False
read_role(uint256),,False
read_group(uint256),,False
read_user_role_id(address),,False
read_user(address),,False
read_first_group(),,False
read_last_group(),,False
read_previous_group_from_group(uint256),,False
read_next_group_from_group(uint256),,False
read_total_groups(),,False
read_first_user_in_group(bytes32),,False
read_last_user_in_group(bytes32),,False
"read_next_user_in_group(bytes32,address)",,False
"read_previous_user_in_group(bytes32,address)",,False
read_total_users_in_group(bytes32),,False
constructor(address),,False
"create_group(uint256,bytes32,bytes32)",,True
"create_role(uint256,bytes32)",,True
"update_add_user_to_group(uint256,address,bytes32)",,True
update_remove_group_user(address),,True
"update_kyc(address,bytes32,uint256)",,True
read_kyc_info(address),,False
is_kyc_approved(address),,False
constructor(address),"uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs",False
updateUintConfigs(),"uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs",True
readUintConfigs(),"uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs, uintConfigs",False
constructor(address),,False
addNonDigixProposalCountInQuarter(uint256),"proposalCountByQuarter, proposalCountByQuarter",True
constructor(address),,False
setStartOfFirstQuarter(uint256),startOfFirstQuarter,True
"setNewContractAddresses(address,address,address)","newDaoContract, newDaoFundingManager, newDaoRewardsManager",True
updateForDaoMigration(),isReplacedByNewDao,True
constructor(address),,False
"addSpecialProposal(bytes32,address,,,)",,True
readProposal(bytes32),,False
readProposalProposer(bytes32),,False
readConfigs(bytes32),,False
"readVotingCount(bytes32,)",,True
readVotingTime(bytes32),,True
"commitVote(bytes32,bytes32,address)",,True
"readComittedVote(bytes32,address)",,True
"setVotingTime(bytes32,uint256)",,True
readVotingResult(bytes32),,True
"setPass(bytes32,bool)",,True
"setVotingClaim(bytes32,bool)",,True
isClaimed(bytes32),,True
"readVote(bytes32,address)",,True
"revealVote(bytes32,address,bool,uint256)",,True
constructor(address),,False
"addQuarterPoint(address,uint256,uint256)",,True
"addModeratorQuarterPoint(address,uint256,uint256)",,True
"getQuarterPoint(address,uint256)",,False
"getQuarterModeratorPoint(address,uint256)",,False
getTotalQuarterPoint(uint256),,False
getTotalQuarterModeratorPoint(uint256),,False
"increaseReputation(address,uint256)",,True
"reduceReputation(address,uint256)",,True
getReputation(address),,False
getTotalReputation(),,False
constructor(address),,False
"updateQuarterInfo(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)","allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo",True
"updateClaimableDGX(address,uint256)",claimableDGXs,True
"updateLastParticipatedQuarter(address,uint256)",lastParticipatedQuarter,True
"updatePreviousLastParticipatedQuarter(address,uint256)",previousLastParticipatedQuarter,True
"updateLastQuarterThatRewardsWasUpdated(address,uint256)",lastQuarterThatRewardsWasUpdated,True
"updateLastQuarterThatReputationWasUpdated(address,uint256)",lastQuarterThatReputationWasUpdated,True
addToTotalDgxClaimed(uint256),"totalDGXsClaimed, totalDGXsClaimed",True
readQuarterInfo(uint256),"allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo",False
readQuarterGeneralInfo(uint256),"allQuartersInfo, allQuartersInfo, allQuartersInfo",False
readQuarterModeratorInfo(uint256),"allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo",False
readQuarterParticipantInfo(uint256),"allQuartersInfo, allQuartersInfo, allQuartersInfo, allQuartersInfo",False
readDgxDistributionDay(uint256),allQuartersInfo,False
readTotalEffectiveDGDLastQuarter(uint256),allQuartersInfo,False
readTotalEffectiveModeratorDGDLastQuarter(uint256),allQuartersInfo,False
readRewardsPoolOfLastQuarter(uint256),allQuartersInfo,False
constructor(address),,False
getIntermediateResults(bytes32),,False
resetIntermediateResults(bytes32),,True
"setIntermediateResults(bytes32,address,uint256,uint256,uint256)",,True
isDaoNotReplaced(),,False
isLockingPhase(),,False
isMainPhase(),,False
currentQuarterNumber(),,False
currentTimeInQuarter(),,False
getUintConfig(bytes32),,False
"calculateDemurrage(uint256,uint256)",,False
getAddressConfig(bytes32),,False
getBytesConfig(bytes32),,False
isParticipant(address),,False
isModerator(address),,False
"constructor(address,address)",dgxDemurrageCalculatorAddress,False
calculateAdditionalLockedDGDStake(uint256),,False
minimumDraftQuorum(bytes32),,False
"draftQuotaPass(uint256,uint256)",,False
"minimumVotingQuorum(bytes32,uint256)",,True
minimumVotingQuorumForSpecial(),,False
"votingQuotaPass(uint256,uint256)",,False
"votingQuotaForSpecialPass(uint256,uint256)",,False
"calculateUserEffectiveBalance(uint256,uint256,uint256,uint256,uint256,uint256)",,False
"calculateDemurrage(uint256,uint256)",dgxDemurrageCalculatorAddress,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
constructor(address),,False
calculateUserRewardsForLastParticipatingQuarter(address),,False
"constructor(address,address)",ADDRESS_DGX_TOKEN,False
moveDGXsToNewDao(address),"ADDRESS_DGX_TOKEN, ADDRESS_DGX_TOKEN",True
claimRewards(),ADDRESS_DGX_TOKEN,True
updateRewardsAndReputationBeforeNewQuarter(address),,True
calculateGlobalRewardsBeforeNewQuarter(uint256),,False
