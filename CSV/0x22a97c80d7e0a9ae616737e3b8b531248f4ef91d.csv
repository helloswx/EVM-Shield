Function Name,State Variables Modified,Can Transfer Ether
transferOwnership(address),"owner, owner",False
transferOwnership(address),pendingOwner,False
claimOwnership(),"owner, pendingOwner, owner, pendingOwner, pendingOwner",False
reclaimContract(address),owner,True
function()external{}(),,False
reclaimEther(),owner,True
balanceOf(address),,False
"transfer(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
reclaimToken(),"token, token, owner",False
"tokenFallback(address,uint256,bytes)",,False
"transferFrom(address,address,uint256)",,True
"approve(address,uint256)",,True
"allowance(address,address)",,False
"mint(address,uint256)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
stage(),"token, timeMode, startTime, finishTime, amountRaised, fundingThreshold, fundingGoal, amountRaised",False
"Campaign(string,address,string,string,bytes32)","id, beneficiary, name, website, whitePaperHash",False
"setParams(,,,)","fundingGoal, fundingThreshold, fundingGoal, tokenPrice, timeMode, startTime, finishTime, bonusMode, bonusLevels, bonusRates, fundingThreshold, fundingThreshold, fundingGoal, startTime, finishTime, timeMode, startTime, bonusLevels, bonusRates",False
"createToken(string,string,uint8,,,)","fundingGoal, token, timeMode, minContribution, tokenPrice, token, minContribution, minContribution",False
"function()publicpayableatStage(Stage.InProgress){require(minContribution<=msg.value);contributions[msg.sender]=contributions[msg.sender].add(msg.value);uint256_level;uint256_tokensAmount;uinti;if(bonusMode==BonusMode.AmountRaised){_level=amountRaised;uint256_value=msg.value;uint256_weightedRateSum=0;uint256_stepAmount;for(i=0;i<bonusLevels.length;i++){if(_level<=bonusLevels[i]){_stepAmount=bonusLevels[i].sub(_level);if(_value<=_stepAmount){_level=_level.add(_value);_weightedRateSum=_weightedRateSum.add(_value.mul(bonusRates[i]));_value=0;break;}else{_level=_level.add(_stepAmount);_weightedRateSum=_weightedRateSum.add(_stepAmount.mul(bonusRates[i]));_value=_value.sub(_stepAmount);}}}_weightedRateSum=_weightedRateSum.add(_value.mul(1ether));_tokensAmount=_weightedRateSum.div(1ether).mul(10**uint256(token.decimals())).div(tokenPrice);}else{_tokensAmount=msg.value.mul(10**uint256(token.decimals())).div(tokenPrice);if(bonusMode==BonusMode.Block){_level=block.number;}if(bonusMode==BonusMode.Timestamp){_level=block.timestamp;}if(bonusMode==BonusMode.ContributionAmount){_level=msg.value;}for(i=0;i<bonusLevels.length;i++){if(_level<=bonusLevels[i]){_tokensAmount=_tokensAmount.mul(bonusRates[i]).div(1ether);break;}}}amountRaised=amountRaised.add(msg.value);require(amountRaised<=fundingGoal);require(token.mint(msg.sender,_tokensAmount));Contribution(msg.sender,msg.value);if(fundingGoal<=amountRaised){earlySuccessTimestamp=block.timestamp;earlySuccessBlock=block.number;token.finishMinting();EarlySuccess();}}()","minContribution, contributions, contributions, bonusMode, amountRaised, bonusLevels, bonusLevels, bonusLevels, bonusRates, bonusRates, token, tokenPrice, token, tokenPrice, bonusMode, bonusMode, bonusMode, bonusLevels, bonusLevels, bonusRates, amountRaised, amountRaised, amountRaised, fundingGoal, token, fundingGoal, amountRaised, earlySuccessTimestamp, earlySuccessBlock, token",True
withdrawPayout(),"beneficiary, token, token, beneficiary, beneficiary",True
releaseTokens(),"token, token",False
withdrawRefund(),"contributions, contributions",True
"Token(string,string,uint8,,,,uint8)","name, symbol, decimals, timeMode, releaseTimes",False
"transfer(address,uint256)",mintingFinished,True
"transferFrom(address,address,uint256)",mintingFinished,True
timeLocked(address),"releaseTimes, timeMode, releaseTimes, releaseTimes",False
