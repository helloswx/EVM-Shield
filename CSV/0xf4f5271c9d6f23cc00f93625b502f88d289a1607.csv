Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
constructor(),owner,True
constructor(),"owners, owner, isOwner, owner",False
addOwner(address),"isOwner, owners",False
removeOwner(address),"owner, isOwner, owners, owners, owners, owners, owners, owners",False
"createWithdraw(address,uint)","withdrawCount, withdraws, withdrawCount, confirmations",True
isConfirmed(uint),"owners, confirmations, owners",False
confirmWithdraw(uint),confirmations,True
executeWithdraw(uint),withdraws,True
constructor(),"symbol, name, decimals, decimals, roundOneTotal, decimals, roundTwoTotal, decimals, owner, owner",False
setCurrentRate(uint),currentRate,False
setStarted(bool),started,False
setRoundNumber(uint),roundNumber,False
resetCurrentRoundSales(),currentRoundSales,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint)",,True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",,True
"allowance(address,address)",,False
"approveAndCall(address,uint,bytes)",,True
"function()publicpayable{require(started);require(msg.value>=minimalInvestment);require(currentRate!=0);require(roundNumber!=0);uinttokens;tokens=msg.value*currentRate;if(roundNumber==1){require(currentRoundSales.add(tokens)<=roundOneTotal);}if(roundNumber==2){require(currentRoundSales.add(tokens)<=roundTwoTotal);}balances[msg.sender]=balances[msg.sender].add(tokens);balances[owner]=balances[owner].sub(tokens);currentRoundSales=currentRoundSales.add(tokens);emitTransfer(owner,msg.sender,tokens);}()","started, minimalInvestment, currentRate, roundNumber, currentRate, roundNumber, currentRoundSales, roundOneTotal, roundNumber, currentRoundSales, roundTwoTotal, owner, owner, currentRoundSales, currentRoundSales, owner",True
"transferAnyERC20Token(address,uint)",owner,True
burn(uint),,True
