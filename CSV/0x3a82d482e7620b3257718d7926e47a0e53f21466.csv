Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
totalSupply(),,False
"transfer(address,uint256)","balances, balances, balances, balances, balances",True
balanceOf(address),balances,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transferFrom(address,address,uint256)","balances, allowed, balances, balances, balances, balances, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
"mint(address,uint256)","balances, balances",False
finishMinting(),mintingFinished,False
burn(uint256),,True
constructor(),"INITIAL_SUPPLY, balances, INITIAL_SUPPLY, INITIAL_SUPPLY",True
"constructor(address,uint,uint)","owner, wallet, ceiling, priceFactor, stage",True
"setup(address,address)","xrt, ambix, xrt, MAX_TOKENS_SOLD, stage",False
startAuction(),"stage, startBlock",False
"changeSettings(uint,uint)","ceiling, priceFactor",False
calcCurrentTokenPrice(),"stage, stage, finalPrice",False
updateStage(),stage,False
bid(address),"MAX_TOKENS_SOLD, totalReceived, ceiling, totalReceived, wallet, bids, totalReceived",True
claimTokens(address),"bids, finalPrice, bids, xrt",True
calcStopPrice(),"totalReceived, MAX_TOKENS_SOLD",False
calcTokenPrice(),"priceFactor, startBlock",False
"setSubnodeOwner(bytes32,bytes32,address)",,False
"setResolver(bytes32,address)",,False
"setOwner(bytes32,address)",,False
"setTTL(bytes32,uint64)",,False
owner(bytes32),,False
resolver(bytes32),,False
ttl(bytes32),,False
PublicResolver(),ens,False
"setAddr(bytes32,address)",,False
"setContent(bytes32,bytes32)",,False
"setMultihash(bytes32,bytes)",,False
"setName(bytes32,string)","name, name",False
"setABI(bytes32,uint256,bytes)",,False
"setPubkey(bytes32,bytes32,bytes32)",,False
"setText(bytes32,string,string)",,False
"text(bytes32,string)",,False
pubkey(bytes32),,False
"ABI(bytes32,uint256)",,False
name(bytes32),,False
content(bytes32),,False
multihash(bytes32),,False
addr(bytes32),,False
supportsInterface(bytes4),,False
constructor(address),,False
function()public{require(lib.delegatecall(msg.data));}(),,True
refill(uint256),,False
withdraw(uint256),,False
"to(address,bytes)",,False
function()external;(),,False
quotaOf(address),"balances, minimalFreeze",False
refill(uint256),"xrt, minimalFreeze, balances, members, members, balances",True
withdraw(uint256),"balances, balances, xrt, balances, balances, xrt, members, members, members, members",True
"to(address,bytes)",factory,True
function()externalkeepalivequotedmember{require(factory.call(msg.data));}(),factory,True
"constructor(address,uint256,uint256)","minimalFreeze, timeoutBlocks, factory, xrt, factory",True
"ask(bytes,bytes,,uint256,address,uint256,uint256,bytes32,bytes)",,False
"bid(bytes,bytes,,uint256,uint256,uint256,bytes32,bytes)",,False
"finalize(bytes,bytes,bool)",,False
"ask(bytes,bytes,,uint256,address,uint256,uint256,bytes32,bytes)","factory, model, objective, token, cost, validator, validatorFee, askHash, promisee, askHash",True
"bid(bytes,bytes,,uint256,uint256,uint256,bytes32,bytes)","factory, model, objective, token, cost, lighthouseFee, bidHash, promisor, bidHash",True
"finalize(bytes,bytes,bool)","isFinalized, promisor, result, isFinalized, validator, factory, token, promisor, cost, validator, isConfirmed, isConfirmed, token, promisor, cost, token, promisee, cost, validatorFee, factory, validator, validatorFee, factory",True
constructor(address),factory,True
"constructor(address,address,,,)","robotLiabilityLib, lighthouseLib, auction, xrt, ens",False
wnFromGas(uint256),"auction, totalGasUtilizing, gasEpoch, gasPrice, auction",False
"createLiability(bytes,bytes)","robotLiabilityLib, xrt, token, xrt, totalGasUtilizing, gasUtilizing",True
"createLighthouse(uint256,uint256,string)","ens, lighthouseLib, isLighthouse, ens, ens, ens",False
liabilityFinalized(uint256),"gasUtilizing, totalGasUtilizing, gasUtilizing, xrt, gasUtilizing",True
