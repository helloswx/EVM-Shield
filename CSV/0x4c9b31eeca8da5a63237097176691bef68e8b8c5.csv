Function Name,State Variables Modified,Can Transfer Ether
punkIndexToAddress(uint256),,False
balanceOf(address),,False
"transferPunk(address,uint)",,False
balanceOf(address),,False
"transfer(address,uint)",,False
constructor(),"CryptoPunksContract, contractOwner, borrower",True
transferContractOwnership(address),contractOwner,False
"setTerms(uint256,uint256,uint256,uint256)","CryptoPunksContract, loanAmount, annualInterestRate, loanTenor, punkIndex",False
claimCollateral(),"loanStart, loanTenor, CryptoPunksContract, lender, punkIndex",True
"function()payablepublic{if(msg.sender==borrower){require(now<=(loanStart+loanTenor));uint256loanPeriodCheck=(now-loanStart);interest=(((loanAmount*annualInterestRate)/10**18)*loanPeriodCheck)/365days;require(msg.value>=loanAmount+interest);loanPeriod=loanPeriodCheck;loanEnd=now;uint256change=msg.value-(loanAmount+interest);lender.transfer(loanAmount+interest);if(change>0){borrower.transfer(change);}CryptoPunk(CryptoPunksContract).transferPunk(borrower,punkIndex);}if(msg.sender!=borrower){require(loanStart==0);require(CryptoPunk(CryptoPunksContract).balanceOf(address(this))==1);require(CryptoPunk(CryptoPunksContract).punkIndexToAddress(punkIndex)==address(this));require(msg.value>=loanAmount);lender=msg.sender;loanStart=now;if(msg.value>loanAmount){msg.sender.transfer(msg.value-loanAmount);}borrower.transfer(loanAmount);}}()","borrower, loanStart, loanTenor, loanStart, interest, loanAmount, annualInterestRate, loanAmount, interest, loanPeriod, loanEnd, loanAmount, interest, lender, loanAmount, interest, borrower, CryptoPunksContract, borrower, punkIndex, borrower, loanStart, CryptoPunksContract, CryptoPunksContract, punkIndex, loanAmount, lender, loanStart, loanAmount, loanAmount, borrower, loanAmount",True
"transfer_targetToken(address,address,uint256)",,True
"reclaimPunkBeforeLoan(address,uint256)","loanStart, CryptoPunksContract",True
