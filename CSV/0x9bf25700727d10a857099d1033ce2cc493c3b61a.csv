Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
"receiveApproval(address,uint256,address,bytes)",,False
"TokenERC20(uint256,string,string)","totalSupply, balanceOf, totalSupply, avaliableSupply, balanceOf, name, symbol",False
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance, allowance",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
"increaseApproval(address,uint)","allowance, allowance, allowance",True
"decreaseApproval(address,uint)","allowance, allowance, allowance, allowance",True
burn(uint256),"balanceOf, balanceOf, balanceOf, totalSupply, totalSupply, avaliableSupply, avaliableSupply",True
"burnFrom(address,uint256)","balanceOf, allowance, balanceOf, balanceOf, allowance, allowance, totalSupply, totalSupply, avaliableSupply, avaliableSupply",True
"transferEthFromContract(address,uint256)",,True
"transferTokensFromContract(address,uint256)","avaliableSupply, avaliableSupply",True
pause(),paused,False
unpause(),paused,False
"changeRate(uint256,uint256)",buyPrice,False
"startCrowd(uint256,uint,uint,uint8,uint8)","avaliableSupply, startIcoDate, ICO, stage, stage",False
"transferWeb3js(address,uint256)",,False
StreamityContract(),,False
"function()publicpayable{assert(msg.value>=1ether/10);require(now>=ICO.startDate);if(now>=ICO.endDate){pauseInternal();emitCrowdSaleFinished(crowdSaleStatus());}if(0!=startIcoDate){if(now<startIcoDate){revert();}else{startIcoDate=0;}}if(paused==false){sell(msg.sender,msg.value);weisRaised=weisRaised.add(msg.value);}}()","ICO, ICO, startIcoDate, startIcoDate, startIcoDate, paused, weisRaised, weisRaised",True
"recover(bytes32,bytes)",,False
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
StreamityEscrow(address),"requestCancelationTime, streamityContractAddress",False
"pay(bytes32,address,address,uint256,uint256,bytes)",,False
function()publicpayable{availableForWithdrawal=availableForWithdrawal.add(msg.value);}(),"availableForWithdrawal, availableForWithdrawal",False
"payAltCoin(bytes32,address,address,uint256,uint256,bytes)",streamityContractAddress,True
"withdrawCommisionToAddress(address,uint256)","availableForWithdrawal, availableForWithdrawal, availableForWithdrawal",True
"withdrawCommisionToAddressAltCoin(address,uint256)",streamityContractAddress,True
getStatusDeal(bytes32),streamityTransfers,False
"releaseTokens(bytes32,uint256)","streamityTransfers, STATUS_DEAL_APPROVE, STATUS_DEAL_RELEASE, owner, streamityContractAddress, STATUS_DEAL_APPROVE, streamityTransfers",True
releaseTokensForce(bytes32),"streamityTransfers, STATUS_NO_DEAL, STATUS_DEAL_RELEASE, streamityContractAddress, streamityTransfers",True
"cancelSeller(bytes32,uint256)","streamityTransfers, STATUS_DEAL_WAIT_CONFIRMATION, STATUS_DEAL_RELEASE, streamityContractAddress, STATUS_DEAL_WAIT_CONFIRMATION, streamityTransfers",True
approveDeal(bytes32),"streamityTransfers, STATUS_DEAL_WAIT_CONFIRMATION, STATUS_DEAL_APPROVE",False
setStreamityContractAddress(address),streamityContractAddress,False
"transferToken(,address,uint256)",,True
"transferTokenFrom(,address,address,uint256)",,True
"approveToken(,address,uint256)",,False
