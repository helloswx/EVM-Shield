Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint)",,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
"checkRole(address,string)",roles,False
"hasRole(address,string)",roles,False
setPartner(address),"partner, partner",False
removePartner(),partner,False
setPartner(address),"partner, partner",False
removePartner(),partner,False
addOperater(address),ROLE_OPERATOR,False
removeOperater(address),ROLE_OPERATOR,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
"addRecord(address,uint256,uint256,string)",,False
"withdrawToken(uint256,address,uint256)",,False
"refundTokens(uint256,uint256,address)",,False
getLedger(uint256),"escrows, escrows, escrows",False
function()externalpayable{ethAmount[msg.sender]=ethAmount[msg.sender].add(msg.value);}(),"ethAmount, ethAmount",True
"constructor(string,address,address)","TOKEN_ETH, token20, toTime, maker, loanTokenName, status",False
"takerOrder(address,uint32,uint256)","status, taker, toTime, repaymentSum, loanTokenName, TOKEN_ETH, ethAmount, outLoanSum, maker, outLoanSum, token20, token20, outLoanSum, token20, maker, outLoanSum, status, taker, outLoanSum",True
executeOrder(),"toTime, status, loanTokenName, TOKEN_ETH, ethAmount, maker, repaymentSum, repaymentSum, lastRepaymentSum, taker, repaymentSum, token20, repaymentSum, lastRepaymentSum, token20, taker, repaymentSum, owner, status, maker, lastRepaymentSum",True
forceCloseOrder(),"status, toTime, status, status, loanTokenName, TOKEN_ETH, ethAmount, maker, maker, token20, token20, maker, owner, taker, toTime",True
"withdrawToken(address,uint256)","status, loanTokenName, TOKEN_ETH, ethAmount, ethAmount, ethAmount, token20",True
getPledgeStatus(),"status, status, status, status",False
createPledgeContract(uint256),"pledgeFactory, pledgeFactory, partner",False
batchCreatePledgeContract(),"pledgeFactory, partner",False
getEscrowPledge(uint256),pledgeFactory,False
"setTokenPool(string,address)",nameByPool,False
"setToken(string,address)",nameByToken,False
setPledgeFactory(address),pledgeFactory,False
includeTokenPool(string),nameByPool,False
includeToken(string),nameByToken,False
"constructor(uint256,address,address)","pledgeId, factory, status, escrowContract",False
function()externalpayable{require(status!=StatusChoices.PLEDGE_REFUND);if(maker!=address(0)){require(address(msg.sender)==maker);}verifyEthAccount[msg.sender]=verifyEthAccount[msg.sender].add(msg.value);}(),"status, maker, maker, verifyEthAccount, verifyEthAccount",True
"addRecord(string,address,uint256,string)","status, status, maker, pledgeTokenName, tokenPoolAddress, pledgeTokenName, factory, pledgeId, pledgeTokenName, factory, tokenPoolAddress, pledgeAccountSum, pledgeAccountSum, tokenPoolAddress, maker, pledgeAccountSum, pledgeId, pledgeTokenName, pledgeTokenName, TOKEN_ETH, verifyEthAccount, maker, tokenPoolAddress, token20, pledgeTokenName, token20, token20, tokenPoolAddress",True
appendEscrow(uint256),"status, pledgeTokenName, maker, loanTokenName, maker",False
withdrawToken(address),"status, status, status, tokenPoolAddress, pledgeId, maker, pledgeAccountSum, pledgeAccountSum, pledgeTokenName",False
"recycle(string,uint256)","status, TOKEN_ETH, owner, owner",True
_conclude(),"status, status, tokenPoolAddress, pledgeId, pledgeAccountSum, maker",False
_forceConclude(address),"status, status, tokenPoolAddress, pledgeId, pledgeAccountSum",False
getPledgeStatus(),"status, status",False
getOrderContract(),orderContract,False
getPledgeAccountSum(),pledgeAccountSum,False
getMakerAddress(),maker,False
getPledgeId(),pledgeId,False
"createPledgeContract(uint256,address)","isPledgeId, partner, isPledgeId, pledgeEscrowById, INIT_TOKEN_NAME",True
"batchCreatePledgeContract(,address)",,False
getEscrowPledge(uint256),"pledgeEscrowById, pledgeEscrowById",False
"tokenPoolOperater(address,address)",,True
"updatePledgeType(uint256,string)",pledgeEscrowById,True
