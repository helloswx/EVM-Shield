Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
renounceOwnership(),"owner, owner",False
transferOwnership(address),,True
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
totalSupply(),totalSupply_,False
"transfer(address,uint256)","balances, balances, balances, balances, balances",True
balanceOf(address),balances,False
"transferFrom(address,address,uint256)","balances, allowed, balances, balances, balances, balances, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint256)","allowed, allowed, allowed",True
"decreaseApproval(address,uint256)","allowed, allowed, allowed, allowed",True
getTokenProposalDetails(),,False
getExpiry(),,False
getContractType(),,False
isMasternodeOwner(address),,False
getLastPerUser(address),,False
getMiningReward(),,False
"constructor(address,uint,uint,uint)",,False
getTokenProposalDetails(),contractType,False
getExpiry(),,False
getContractType(),contractType,False
"constructor(address,uint,uint)",,False
getTokenProposalDetails(),contractType,False
getExpiry(),,False
getContractType(),contractType,False
isMasternodeOwner(address),,False
isTeamMember(address),,False
pushProposal(address),"proposalCounter, proposalPending, proposalList, proposalCounter, proposalCounter, proposalCounter, proposalPending, proposalCounter",False
discardRejectedProposal(),"proposalPending, proposalPending",False
LastProposalCanDiscard(),"proposalList, proposalCounter, proposalList, proposalCounter",False
getTokenProposalDetails(uint),proposalList,False
pastProposalTimeRules(),"proposalList, proposalCounter",False
becomeVoter(),"voterMap, voterMap, voterMap, votersCount, votersCount, votersCountTeam, votersCountTeam",True
voteProposal(uint),"voterMap, proposalCounter, voterProposals, proposalList, voterProposals, proposalList, votersCount, voterProposals, proposalList",True
reachedMajority(uint),proposalList,False
reachedMajorityForTeam(uint),proposalList,False
function()payablepublic{require(msg.value==AMOUNT_FOR_MASTERNODE&&msg.value!=0);receivedFunds();}(),,False
buyMasternode(),,False
getMiningReward(),,False
addOwnToken(),,False
listAcceptedTokens(),tokensList,False
getTokenDetails(address),,False
"depositCollateral(address,uint)","tokens, tokens, tokens",True
"withdrawCollateral(address,uint)","tokens, tokens, tokens",True
"addGenesis(address,bool)",,True
closeGenesis(),,False
isTeamMember(address),,False
isPartOf(uint),,False
belongsToUser(address),,False
isMasternodeOwner(address),,False
getLastPerUser(address),,False
_emergencyLoop(),,False
masternodeInfo(uint),,False
contractProgress(),,False
constructor(),"tokensMinted, maxSupplyForEra, totalSupply, difficulty, _MAXIMUM_TARGET, latestDifficultyPeriodStarted, balances, balances",True
"mint(uint256,bytes32)","tokensMinted, statistics, challengeNumber",True
getChallengeNumber(),challengeNumber,False
getMiningDifficulty(),"_MAXIMUM_TARGET, difficulty",False
getMiningTarget(),difficulty,False
getMiningReward(),"baseMiningReward, rewardEra",False
"getMintDigest(uint256,bytes32,bytes32)",,True
"checkMintSolution(uint256,bytes32,bytes32,uint)",,True
