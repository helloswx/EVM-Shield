Function Name,State Variables Modified,Can Transfer Ether
"function()publicpayable{if(msg.value>0)emitDeposit(msg.sender,msg.value);}()",,True
"constructor(,uint)","isOwner, isOwner, owners, required",False
addOwner(address),"isOwner, owners",False
removeOwner(address),"isOwner, owners, owners, owners, owners, owners, owners, required, owners, owners",False
"replaceOwner(address,address)","owners, owners, owners, isOwner, isOwner",False
changeRequirement(uint),required,False
"submitTransaction(address,uint,bytes)",,False
confirmTransaction(uint),confirmations,True
revokeConfirmation(uint),confirmations,True
executeTransaction(uint),"transactions, transactions, transactions, transactions, transactions",True
isConfirmed(uint),"owners, confirmations, owners, required",False
getConfirmationCount(uint),"owners, confirmations, owners",False
"getTransactionCount(bool,bool)","transactionCount, transactions, transactions",False
getOwners(),owners,False
getConfirmations(uint),"owners, owners, confirmations, owners, owners",False
"getTransactionIds(uint,uint,bool,bool)","transactionCount, transactionCount, transactions, transactions",False
burnTokens(address),,False
"tokenFallback(address,uint,bytes)",,False
"tokenFallbackBuyer(address,uint,address)",,False
"tokenFallbackExchange(address,uint,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
"constructor(address,address,address)","escrow, namiMultiSigWallet, namiPresale",False
"transferForTeam(address,uint256)",,True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","allowance, allowance",True
"approve(address,uint256)",allowance,True
"approveAndCall(address,uint256,bytes)",,True
changeTransferable(),"TRANSFERABLE, TRANSFERABLE",False
changeEscrow(address),escrow,False
changeBinary(uint),binary,False
changeBinaryAddress(address),binaryAddress,False
getPrice(),binary,False
function()payablepublic{buy(msg.sender);}(),,True
buy(address),"currentPhase, binaryAddress, totalSupply, TOKEN_SUPPLY_LIMIT, balanceOf, balanceOf, totalSupply, totalSupply",True
burnTokens(address),"currentPhase, balanceOf, balanceOf, totalSupply, crowdsaleManager, totalSupply, currentPhase",False
setPresalePhase(),"currentPhase, currentPhase, currentPhase, currentPhase, crowdsaleManager, currentPhase, currentPhase, totalSupply, currentPhase",False
withdrawEther(uint),"namiMultiSigWallet, namiMultiSigWallet",True
"safeWithdraw(address,uint)",namiMultiSigWallet,True
setCrowdsaleManager(address),"currentPhase, crowdsaleManager",False
"migrateToken(address,address)",,False
migrateForInvestor(),,True
"transferToExchange(address,uint,uint)","balanceOf, balanceOf, balanceOf, balanceOf",True
"transferToBuyer(address,uint,address)","balanceOf, balanceOf, balanceOf, balanceOf",True
"constructor(address,address,address)","escrow, namiMultiSigWallet, NamiAddr",False
changeEscrow(address),escrow,False
changePause(),"isPause, isPause",False
changeMinWithdraw(uint),minWithdraw,False
changeMaxWithdraw(uint),maxWithdraw,False
"withdrawEther(uint,address)",,True
withdrawNac(uint),"namiMultiSigWallet, NamiAddr, namiMultiSigWallet",True
setController(address),"isController, isController",False
removeController(address),"isController, isController",False
depositEth(),,True
function()publicpayable{depositEth();}(),,False
"withdrawToken(address,uint)","minWithdraw, maxWithdraw",True
