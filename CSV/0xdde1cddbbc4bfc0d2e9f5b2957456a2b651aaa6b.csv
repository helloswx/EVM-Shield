Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),,False
acceptOwnership(),"owner, owner",False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve_fixed(address,uint,uint)",,True
"approve(address,uint)",,True
"allowance(address,address)",,False
"constructor(string,string,uint8)","name, symbol, decimals",False
start(),isStarted,False
"mint(address,uint)","totalSupply, totalSupply",True
"multimint(,)",,False
"constructor(string,string,uint8)","name, symbol, decimals",False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve_fixed(address,uint,uint)",,True
"approve(address,uint)",,True
"allowance(address,address)",,False
"mint(address,uint)","totalSupply, totalSupply",True
"multimint(,)",,False
"constructor(string,address,address,address,address,address)","name, operator, projectWallet, token, arbitrationAddress, juryOnlineWallet",False
addRound(),"cycles, currentCycle, cycles, currentCycle",True
approveRound(address),"operator, cycles, currentCycle, currentCycle",True
"constructor(address,address,uint,address,,,uint,uint)","juryOperator, icoAddress, operator, rate, jotter, commissionEth, commissionJot, roundPrices, tokenReleaseAtStart, commissionOnInvestmentEth, commissionOnInvestmentJot",True
setJotter(address),"juryOperator, jotter",True
activate(),"icoAddress, operator, juryOnlineWallet, projectWallet, arbitrationAddress, token",False
withdrawEther(),"roundFailedToStart, deals, operator, projectWallet, ethForMilestone, postDisputeEth, ethForMilestone, postDisputeEth, juryOnlineWallet, juryOnlineWallet, etherAllowance, jotter, jotAllowance, etherAllowance, jotAllowance, deals, deals, deals",True
withdrawToken(),"token, deals, deals",True
"addRoundPrice(uint,uint,uint,)","roundPrices, whitelist, roundPrices, roundPrices",False
setRate(uint),rate,False
setCurrentFundingRound(uint),"roundPrices, currentFundingRound, rate, roundPrices",False
function()publicpayable{require(msg.value>0);if(roundPrices[currentFundingRound].hasWhitelist==true){require(whitelist[currentFundingRound][msg.sender]==true);}uintdealNumber=deals[msg.sender].numberOfDeals;offers[msg.sender][dealNumber].investor=msg.sender;offers[msg.sender][dealNumber].etherAmount=msg.value;deals[msg.sender].numberOfDeals+=1;}(),"roundPrices, currentFundingRound, whitelist, currentFundingRound, deals, offers, offers, deals",True
withdrawOffer(uint),"offers, offers, offers",True
disputeOpened(address),"arbitrationAddress, deals",True
"verdictExecuted(address,bool,uint)","arbitrationAddress, deals, deals, deals, currentMilestone, postDisputeEth, etherPartition, deals, etherPartition, deals",True
"addMilestone(uint,uint,uint,uint,string)","totalEther, totalEther, totalToken, totalToken, milestones",False
"editMilestone(uint,uint,uint,uint,uint,string)","milestones, totalEther, totalEther, milestones, totalToken, totalToken, milestones, milestones, milestones, milestones, milestones, milestones",False
seal(),"milestones, token, totalToken, sealTimestamp",False
"acceptOffer(address,uint)","offers, offers, offers, offers, offers, token, promisedTokens, commissionOnInvestmentEth, commissionOnInvestmentJot, commissionOnInvestmentEth, commissionOnInvestmentJot, offers, etherAllowance, jotAllowance, deals, dealsList, tokenReleaseAtStart, deals, deals, deals, promisedTokens, raisedEther",False
startMilestone(),"currentMilestone, milestones, currentMilestone, dealsList, dealsList, deals, deals, ethForMilestone, etherPartition, currentMilestone, deals, etherPartition, currentMilestone, tokenReleaseAtStart, deals, tokenPartition, currentMilestone, milestones, currentMilestone, currentMilestone, ethForMilestone",False
finishMilestone(string),"milestones, currentMilestone, milestones, currentMilestone, milestones, currentMilestone, milestones, currentMilestone",False
failSafe(),"operator, saveMe, juryOperator, saveMe, juryOperator, token, token, juryOperator",True
milestonesLength(),milestones,False
isDisputing(address),deals,False
investorExists(address),deals,False
constructor(),operator,True
"setArbiters(address,)",arbiterPool,False
"vote(uint,bool)","disputes, arbiterPool, disputes, disputes, disputes, disputes, disputes, quorum, disputes, quorum, disputes",True
"openDispute(address,string)","disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputeLength",True
isPending(uint),disputes,False
constructor(address),"owner, token",True
swapMe(),"ethToJot, token, owner",True
setEth(uint),"owner, ethToJot",True
"constructor(address,address)","owner, token, proxyToken",True
swapMe(),"proxyToken, token, token, proxyToken, swaps",True
returnMe(),"proxyToken, proxyToken, proxyToken",True
