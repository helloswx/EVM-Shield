Function Name,State Variables Modified,Can Transfer Ether
"safeAdd(uint,uint)",,False
"safeSub(uint,uint)",,False
"safeMul(uint,uint)",,False
"safeDiv(uint,uint)",,False
totalSupply(),,False
balanceOf(address),,False
"allowance(address,address)",,False
"transfer(address,uint)",,False
"approve(address,uint)",,False
"transferFrom(address,address,uint)",,False
"receiveApproval(address,uint256,address,bytes)",,False
Owned(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
ExToke(),"symbol, name, decimals, tokenAdmin, oldAddress, _totalSupply, crowdSaleSupply, tokenSwapSupply, dividendSupply, unitsOneEthCanBuy, nextRelease, scaledRemainder, scaling, fundsWallet, tokenAdmin",False
totalSupply(),_totalSupply,False
balanceOf(address),,False
"transfer(address,uint)",,True
"approve(address,uint)",,True
"transferFrom(address,address,uint)",,True
"allowance(address,address)",,False
"approveAndCall(address,uint,bytes)",,True
"function()publicpayable{if(startTime<block.timestamp&&finishTime>=block.timestamp&&crowdSaleSupply>=msg.value*unitsOneEthCanBuy){uint256amount=msg.value*unitsOneEthCanBuy;require(balances[this]>=amount);balances[this]=balances[this]-amount;balances[msg.sender]=balances[msg.sender]+amount;crowdSaleSupply-=msg.value*unitsOneEthCanBuy;Transfer(this,msg.sender,amount);tokenAdmin.transfer(msg.value);}elseif(finishTime<block.timestamp){balances[this]=balances[this]-amount;balances[tokenAdmin]+=crowdSaleSupply;tokenAdmin.transfer(msg.value);Transfer(this,tokenAdmin,amount);crowdSaleSupply=0;}}()","startTime, finishTime, crowdSaleSupply, unitsOneEthCanBuy, unitsOneEthCanBuy, crowdSaleSupply, unitsOneEthCanBuy, tokenAdmin, finishTime, tokenAdmin, crowdSaleSupply, tokenAdmin, tokenAdmin, crowdSaleSupply",True
releaseDivTokens(),"releaseDates, nextRelease, decimals, dividendSupply, scaling, scaledRemainder, scaledDividendPerToken, _totalSupply, scaledRemainder, _totalSupply, nextRelease",False
withdraw(),"releaseDates, scaledDividendBalanceOf, scaling, scaledDividendBalanceOf, scaling",True
