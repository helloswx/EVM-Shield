Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),,False
acceptOwnership(),"owner, owner",False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve_fixed(address,uint,uint)",,True
"approve(address,uint)",,True
"allowance(address,address)",,False
"constructor(string,string,uint8)","name, symbol, decimals",False
start(),isStarted,False
"mint(address,uint)","totalSupply, totalSupply",True
"multimint(,)",,False
"constructor(string,string,uint8)","name, symbol, decimals",False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
balanceOf(address),,False
"approve_fixed(address,uint,uint)",,True
"approve(address,uint)",,True
"allowance(address,address)",,False
"mint(address,uint)","totalSupply, totalSupply",True
"multimint(,)",,False
"constructor(address,uint,uint,uint,address,address,address,address,address,uint)","percentForFuture, operator, commissionOnInvestmentJot, commissionOnInvestmentEth, percentForFuture, projectWallet, arbitrationAddress, token, juryOperator, juryOnlineWallet, minimumInvestment",False
function()publicpayable{require(msg.value>minimumInvestment);for(uinti=0;i<roundPrices.length;i++){if(now>roundPrices[i].startTime&&now<roundPrices[i].endTime){rate=roundPrices[i].rate;if(roundPrices[i].hasWhitelist==true){require(whitelist[i][msg.sender]==true);}}}uintdealNumber=offers[msg.sender][0].numberOfDeals;offers[msg.sender][dealNumber].etherAmount=msg.value;offers[msg.sender][dealNumber].tokenAmount=msg.value*rate;offers[msg.sender][0].numberOfDeals+=1;}(),"minimumInvestment, roundPrices, roundPrices, roundPrices, rate, roundPrices, roundPrices, whitelist, offers, offers, offers, rate, offers",True
withdrawOffer(uint),"offers, offers, offers",True
withdrawEther(),"juryOperator, juryOnlineWallet, etherAllowance, etherAllowance, jotAllowance",True
setToken(address),"token, token",False
"acceptOffer(address,uint)","offers, offers, currentCycleAddress, offers, offers, offers, token, currentCycleAddress, promisedTokens, percentForFuture, percentForFuture, futureDeals, futureDeals, futureDeals, commissionOnInvestmentEth, commissionOnInvestmentJot, commissionOnInvestmentEth, commissionOnInvestmentJot, offers, etherAllowance, jotAllowance, investorList",False
addCycleAddress(address),cycles,False
setNextCycle(),"cycles, currentCycleNumber, currentCycleAddress, finishedTimeStamp, finishedTimeStamp, currentCycleAddress, cycles, currentCycleNumber, currentCycleNumber",False
"addFundingRound(uint,uint,uint,)","roundPrices, whitelist, roundPrices, roundPrices",False
setRate(uint),"lastRateChange, rate",False
setCurrentFundingRound(uint),"roundPrices, currentFundingRound, rate, roundPrices",False
"sendFundsToNextCycle(uint,uint)","currentCycleAddress, token, currentCycleAddress, investorList, investorList, token, currentCycleAddress, promisedTokens, investorList, futureDeals, futureDeals, requireTokens, futureDeals, futureDeals",False
failSafe(),"operator, saveMe, juryOperator, saveMe, juryOperator, token, token, juryOperator",True
"constructor(bool,address,,,address,address,address,address,address)","tokenReleaseAtStart, icoAddress, commissionEth, commissionJot, operator, juryOperator, arbitrationAddress, projectWallet, juryOnlineWallet",False
setToken(address),"token, token",False
withdrawEther(),"roundFailedToStart, deals, operator, projectWallet, ethForMilestone, postDisputeEth, ethForMilestone, postDisputeEth, juryOperator, juryOnlineWallet, etherAllowance, etherAllowance, jotAllowance, deals, deals, deals",True
withdrawToken(),"token, deals, deals",True
"addMilestonesAndSeal(,,,)","totalEther, totalEther, totalToken, totalToken, milestones, sealTimestamp",False
"addMilestone(uint,uint,uint,uint,string)","totalEther, totalEther, totalToken, totalToken, milestones",False
approveCycle(bool),"cycleApproved, roundFailedToStart, juryOperator, cycleApproved, roundFailedToStart",True
startMilestone(),"cycleApproved, currentMilestone, milestones, currentMilestone, milestones, currentMilestone, dealsList, dealsList, deals, deals, ethForMilestone, etherPartition, currentMilestone, deals, etherPartition, currentMilestone, tokenReleaseAtStart, deals, tokenPartition, currentMilestone, milestones, currentMilestone, currentMilestone, ethForMilestone",False
finishMilestone(string),"milestones, currentMilestone, milestones, currentMilestone, milestones, currentMilestone, milestones, currentMilestone, currentMilestone, milestones, finishedTimeStamp",False
"editMilestone(uint,uint,uint,uint,uint,string)","milestones, totalEther, totalEther, milestones, totalToken, totalToken, milestones, milestones, milestones, milestones, milestones, milestones",False
seal(),"milestones, sealTimestamp",False
"offerAccepted(address,uint)","sealTimestamp, deals, dealsList, tokenReleaseAtStart, deals, deals, deals, promisedTokens, raisedEther",False
disputeOpened(address),deals,False
"verdictExecuted(address,bool,uint)","deals, deals, deals, currentMilestone, postDisputeEth, etherPartition, deals, etherPartition, deals",False
milestonesLength(),milestones,False
investorExists(address),deals,False
failSafe(),"operator, saveMe, juryOperator, saveMe, juryOperator, token, token, juryOperator",True
constructor(),operator,True
"setArbiters(address,)",arbiterPool,False
"vote(uint,bool)","disputes, arbiterPool, disputes, disputes, disputes, disputes, disputes, quorum, disputes, quorum, disputes",True
"openDispute(address,string)","disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputes, disputeLength, disputeLength",True
isPending(uint),disputes,False
