Function Name,State Variables Modified,Can Transfer Ether
"query(uint,string,string)",,False
"query_withGasLimit(uint,string,string,uint)",,False
"query2(uint,string,string,string)",,False
"query2_withGasLimit(uint,string,string,string,uint)",,False
"queryN(uint,string,bytes)",,False
"queryN_withGasLimit(uint,string,bytes,uint)",,False
getPrice(string),,False
"getPrice(string,uint)",,False
setProofType(byte),,False
setCustomGasPrice(uint),,False
randomDS_getSessionPubKeyHash(),,False
getAddress(),,False
"__callback(bytes32,string)",,True
"__callback(bytes32,string,bytes)",,False
payDevelopersFund(address),,False
receivePaymentForOraclize(),,False
getMaxWin(),,False
"payEtherToWinner(uint256,address)",,False
receiveEtherFromGameAddress(),,False
payOraclize(uint256),,False
getBankroll(),,False
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
"allowance(address,address)",,False
"EOSBetBankroll(address,address)","OWNER, balances, totalSupply, TRUSTEDADDRESSES, TRUSTEDADDRESSES, DICE, SLOTS, WAITTIMEUNTILWITHDRAWORTRANSFER, MAXIMUMINVESTMENTSALLOWED",True
checkWhenContributorCanTransferOrWithdraw(address),,False
getBankroll(),DEVELOPERSFUND,False
"payEtherToWinner(uint256,address)","OWNER, OWNER",True
receiveEtherFromGameAddress(),,False
payOraclize(uint256),,True
"function()publicpayable{uint256currentTotalBankroll=SafeMath.sub(getBankroll(),msg.value);uint256maxInvestmentsAllowed=MAXIMUMINVESTMENTSALLOWED;require(currentTotalBankroll<maxInvestmentsAllowed&&msg.value!=0);uint256currentSupplyOfTokens=totalSupply;uint256contributedEther;boolcontributionTakesBankrollOverLimit;uint256ifContributionTakesBankrollOverLimit_Refund;uint256creditedTokens;if(SafeMath.add(currentTotalBankroll,msg.value)>maxInvestmentsAllowed){contributionTakesBankrollOverLimit=true;contributedEther=SafeMath.sub(maxInvestmentsAllowed,currentTotalBankroll);ifContributionTakesBankrollOverLimit_Refund=SafeMath.sub(msg.value,contributedEther);}else{contributedEther=msg.value;}if(currentSupplyOfTokens!=0){creditedTokens=SafeMath.mul(contributedEther,currentSupplyOfTokens)/currentTotalBankroll;}else{creditedTokens=SafeMath.mul(contributedEther,100);}totalSupply=SafeMath.add(currentSupplyOfTokens,creditedTokens);balances[msg.sender]=SafeMath.add(balances[msg.sender],creditedTokens);contributionTime[msg.sender]=block.timestamp;if(contributionTakesBankrollOverLimit){msg.sender.transfer(ifContributionTakesBankrollOverLimit_Refund);}emitFundBankroll(msg.sender,contributedEther,creditedTokens);emitTransfer(0x0,msg.sender,creditedTokens);}()","MAXIMUMINVESTMENTSALLOWED, totalSupply, totalSupply, balances, balances",True
cashoutEOSBetStakeTokens(uint256),"balances, WAITTIMEUNTILWITHDRAWORTRANSFER, totalSupply, totalSupply, balances, DEVELOPERSFUND, DEVELOPERSFUND",True
cashoutEOSBetStakeTokens_ALL(),balances,True
transferOwnership(address),"OWNER, OWNER",True
changeWaitTimeUntilWithdrawOrTransfer(uint256),"OWNER, WAITTIMEUNTILWITHDRAWORTRANSFER",True
changeMaximumInvestmentsAllowed(uint256),"OWNER, MAXIMUMINVESTMENTSALLOWED",True
withdrawDevelopersFund(address),"OWNER, DICE, SLOTS, DEVELOPERSFUND, DEVELOPERSFUND",True
emergencySelfDestruct(),OWNER,True
totalSupply(),totalSupply,False
balanceOf(address),balances,False
"transfer(address,uint256)","balances, WAITTIMEUNTILWITHDRAWORTRANSFER, balances, balances, balances, balances",True
"transferFrom(address,address,uint)","allowed, balances, WAITTIMEUNTILWITHDRAWORTRANSFER, balances, balances, balances, balances, allowed, allowed",True
"approve(address,uint)",allowed,True
"allowance(address,address)",allowed,False
EOSBetDice(),"ORACLIZEGASPRICE, INITIALGASFORORACLIZE, AMOUNTWAGERED, GAMESPLAYED, GAMEPAUSED, REFUNDSACTIVE, ORACLIZEQUERYMAXTIME, MINBET_forORACLIZE, MINBET, HOUSEEDGE_inTHOUSANDTHPERCENTS, MAXWIN_inTHOUSANDTHPERCENTS, OWNER",True
payDevelopersFund(address),"BANKROLLER, DEVELOPERSFUND, DEVELOPERSFUND",True
receivePaymentForOraclize(),BANKROLLER,True
getMaxWin(),"BANKROLLER, MAXWIN_inTHOUSANDTHPERCENTS",False
setBankrollerContractOnce(address),"OWNER, BANKROLLER, BANKROLLER",True
transferOwnership(address),"OWNER, OWNER",True
setOraclizeQueryMaxTime(uint256),"OWNER, ORACLIZEQUERYMAXTIME",True
setOraclizeQueryGasPrice(uint256),"OWNER, ORACLIZEGASPRICE",True
setInitialGasForOraclize(uint256),"OWNER, INITIALGASFORORACLIZE",True
setGamePaused(bool),"OWNER, GAMEPAUSED",True
setRefundsActive(bool),"OWNER, REFUNDSACTIVE",True
setHouseEdge(uint8),"OWNER, HOUSEEDGE_inTHOUSANDTHPERCENTS",True
setMinBetForOraclize(uint256),"OWNER, MINBET_forORACLIZE",True
setMinBet(uint256),"OWNER, MINBET",True
setMaxWin(uint8),"OWNER, MAXWIN_inTHOUSANDTHPERCENTS",True
emergencySelfDestruct(),OWNER,True
refund(bytes32),"diceData, ORACLIZEQUERYMAXTIME, OWNER, LIABILITIES, REFUNDSACTIVE, diceData, LIABILITIES, LIABILITIES",True
"play(uint256,uint16,uint8)","GAMEPAUSED, MINBET, MINBET_forORACLIZE, HOUSEEDGE_inTHOUSANDTHPERCENTS, GAMESPLAYED, AMOUNTWAGERED, AMOUNTWAGERED, DEVELOPERSFUND, DEVELOPERSFUND, BANKROLLER, BANKROLLER, BANKROLLER, INITIALGASFORORACLIZE, INITIALGASFORORACLIZE, diceData, LIABILITIES, LIABILITIES",True
"__callback(bytes32,string,bytes)","diceData, LIABILITIES, REFUNDSACTIVE, diceData, LIABILITIES, LIABILITIES, HOUSEEDGE_inTHOUSANDTHPERCENTS, GAMESPLAYED, AMOUNTWAGERED, AMOUNTWAGERED, diceData, LIABILITIES, LIABILITIES, DEVELOPERSFUND, DEVELOPERSFUND, BANKROLLER, BANKROLLER",True
