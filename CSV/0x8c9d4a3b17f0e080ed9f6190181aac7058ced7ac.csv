Function Name,State Variables Modified,Can Transfer Ether
totalSupply(),,False
balanceOf(address),,False
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
"allowance(address,address)",,False
decimals(),,False
symbol(),,False
constructor(),admin,True
getOperators(),operatorsGroup,False
getAlerters(),alertersGroup,False
transferAdmin(address),"pendingAdmin, pendingAdmin",False
transferAdminQuickly(address),"admin, admin",False
claimAdmin(),"pendingAdmin, pendingAdmin, admin, admin, pendingAdmin, pendingAdmin",True
addAlerter(address),"alerters, alertersGroup, MAX_GROUP_SIZE, alerters, alertersGroup",False
removeAlerter(address),"alerters, alerters, alertersGroup, alertersGroup, alertersGroup, alertersGroup, alertersGroup, alertersGroup",False
addOperator(address),"operators, operatorsGroup, MAX_GROUP_SIZE, operators, operatorsGroup",False
removeOperator(address),"operators, operators, operatorsGroup, operatorsGroup, operatorsGroup, operatorsGroup, operatorsGroup, operatorsGroup",False
"withdrawToken(,uint,address)",,True
"withdrawEther(uint,address)",,True
constructor(address),masterCopy,False
"function()externalpayable{address_masterCopy=masterCopy;assembly{calldatacopy(0,0,calldatasize)letsuccess:=delegatecall(not(0),_masterCopy,0,calldatasize,0,0)returndatacopy(0,0,returndatasize)switchsuccesscase0{revert(0,returndatasize)}default{return(0,returndatasize)}}}()",masterCopy,True
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
"approve(address,uint)",,False
balanceOf(address),,False
"allowance(address,address)",,False
totalSupply(),,False
exp(int),"ONE, LN2, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE",False
ln(uint),"ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, ONE, LOG2_E",False
floorLog2(uint),"ONE, ONE",False
max(),,False
"transfer(address,uint)","balances, balances, balances, balances",True
"transferFrom(address,address,uint)","balances, balances, balances, balances",True
"approve(address,uint)",,True
"allowance(address,address)",owner,False
balanceOf(address),"balances, owner",False
totalSupply(),,False
updateMinter(address),"owner, minter",True
updateOwner(address),"owner, owner",True
"mintTokens(address,uint)","minter, lockedTokenBalances, lockedTokenBalances",True
lockTokens(uint),"balances, balances, balances, lockedTokenBalances, lockedTokenBalances, lockedTokenBalances",True
unlockTokens(),"lockedTokenBalances, lockedTokenBalances, lockedTokenBalances, unlockedTokens, unlockedTokens, unlockedTokens, unlockedTokens, unlockedTokens",True
withdrawUnlockedTokens(),"unlockedTokens, balances, balances, unlockedTokens, unlockedTokens",True
"min(uint,uint)",,False
"safeToAdd(uint,uint)",,False
"safeToSub(uint,uint)",,False
"add(uint,uint)",,False
"sub(uint,uint)",,False
startMasterCopyCountdown(address),"masterCopyCountdown, masterCopyCountdown",False
updateMasterCopy(),"masterCopyCountdown, masterCopyCountdown, masterCopy, masterCopyCountdown",False
getMasterCopy(),masterCopy,False
setMinter(address),minter,False
setNewOwner(address),creator,False
"mintOWL(address,uint)","minter, minter, balances, balances",True
"burnOWL(address,uint)","balances, balances",True
"transfer(address,uint)",,False
"transferFrom(address,address,uint)",,False
updateAuctioneer(address),auctioneer,False
getApprovedAddressesOfList(),approvedTokens,False
"updateApprovalOfToken(,bool)",approvedTokens,False
"min(uint,uint)",,False
atleastZero(int),,False
"safeToAdd(uint,uint)",,False
"safeToSub(uint,uint)",,False
"safeToMul(uint,uint)",,False
"add(uint,uint)",,False
"sub(uint,uint)",,False
"mul(uint,uint)",,False
"canCall(address,address,bytes4)",,False
constructor(),owner,True
setOwner(address),"owner, owner",False
setAuthority(),"authority, authority",False
peek(),zzz,False
read(),zzz,False
"post(uint128,uint32,address)",zzz,True
void(),zzz,False
peek(),,False
read(),,False
poke(bytes32),,False
void(),,False
set(address),"next, next, next",False
"set(bytes12,address)","indexes, indexes, values, indexes, values",False
setMin(uint96),minimun,False
setNext(bytes12),next,False
unset(bytes12),,False
unset(address),indexes,False
poke(),,False
poke(bytes32),,False
compute(),"next, next, values, values, minimun",False
"constructor(address,address)","owner, priceFeedSource",False
raiseEmergency(bool),emergencyMode,False
updateCurator(address),owner,False
getUsdEthPricePeek(),priceFeedSource,False
getUSDETHPrice(),"emergencyMode, priceFeedSource",False
initiateEthUsdOracleUpdate(),"newProposalEthUSDOracle, oracleInterfaceCountdown",False
updateEthUSDOracle(),"newProposalEthUSDOracle, oracleInterfaceCountdown, ethUSDOracle, newProposalEthUSDOracle, newProposalEthUSDOracle",False
startMasterCopyCountdown(address),"newMasterCopy, masterCopyCountdown",False
updateMasterCopy(),"newMasterCopy, masterCopyCountdown, masterCopy, newMasterCopy, newMasterCopy",False
"depositAndSell(address,address,uint)",,False
"claimAndWithdraw(address,address,address,uint,uint)",,False
"claimTokensFromSeveralAuctionsAsSeller(,,,address)",,False
"claimTokensFromSeveralAuctionsAsBuyer(,,,address)",,False
"claimAndWithdrawTokensFromSeveralAuctionsAsSeller(,,)",,True
"claimAndWithdrawTokensFromSeveralAuctionsAsBuyer(,,)",,True
getMasterCopy(),masterCopy,False
"setupDutchExchange(,,address,address,,uint,uint)","ethToken, frtToken, owlToken, auctioneer, ethToken, ethUSDOracle, thresholdNewTokenPair, thresholdNewAuction",False
updateThresholdNewTokenPair(uint),thresholdNewTokenPair,False
updateThresholdNewAuction(uint),thresholdNewAuction,False
"addTokenPair(address,address,uint,uint,uint,uint)","balances, balances, ethUSDOracle, ethToken, thresholdNewTokenPair, closingPrices, closingPrices",True
"deposit(address,uint)","balances, balances",True
"withdraw(address,uint)","balances, balances",True
"postSellOrder(address,address,uint,uint)","balances, sellVolumesCurrent, sellVolumesNext, balances, balances, sellerBalances, sellerBalances, sellVolumesCurrent, sellVolumesCurrent, sellVolumesNext, sellVolumesNext",True
"postBuyOrder(address,address,uint,uint)","closingPrices, sellVolumesCurrent, buyVolumes, balances, sellVolumesCurrent, balances, balances, buyerBalances, buyerBalances, buyVolumes, buyVolumes",True
"claimSellerFunds(address,address,address,uint)","sellerBalances, closingPrices, sellerBalances, balances, balances",False
"claimBuyerFunds(address,address,address,uint)","closingPrices, claimedAmounts, claimedAmounts, extraTokens, buyerBalances, closingPrices, buyerBalances, claimedAmounts, balances, balances",False
"closeTheoreticalClosedAuction(address,address,uint)","closingPrices, buyVolumes, sellVolumesCurrent",False
"getUnclaimedBuyerFunds(address,address,address,uint)","buyerBalances, claimedAmounts",False
getFeeRatio(address),"frtToken, frtToken",False
"getPriceInPastAuction(address,address,uint)","closingPrices, closingPrices",False
getPriceOfTokenInLastAuction(address),"ethToken, ethToken",False
"getCurrentAuctionPrice(address,address,uint)","closingPrices, sellVolumesCurrent, buyVolumes, buyVolumes, sellVolumesCurrent",False
"getTokenOrder(address,address)",,False
"getAuctionStart(address,address)",auctionStarts,False
"getAuctionIndex(address,address)",latestAuctionIndices,False
"getClearingTime(address,address,uint)",clearingTimes,False
deposit(),"balances, balances",True
withdraw(uint),"balances, balances",True
"getExpectedRate(,,uint)",,False
"constructor(,)","dx, weth, dx, kyberNetworkProxy",False
setKyberNetworkProxy(),"kyberNetworkProxy, kyberNetworkProxy",False
"depositToDx(address,uint)","dx, dx",False
"withdrawFromDx(address,uint)",dx,False
"claimSpecificAuctionFunds(address,address,uint)","dx, dx, dx, dx",False
"step(address,address)","dx, lastParticipatedAuction, dx, dx",False
"willAmountClearAuction(address,address,uint,uint)","dx, dx, dx",False
thresholdNewAuctionToken(address),"dx, dx, dx",False
"calculateMissingTokenForAuctionStart(address,address)",dx,False
addFee(uint),dx,True
"getAuctionState(address,address)","dx, DX_AUCTION_START_WAITING_FOR_FUNDING, dx, dx",False
"getKyberRate(address,address,uint)","weth, KYBER_ETH_TOKEN, weth, KYBER_ETH_TOKEN, kyberNetworkProxy",False
"tokensSoldInCurrentAuction(address,address,uint,address)",dx,False
"calculateAuctionBuyTokens(address,address,uint,address)","dx, dx, dx",False
atleastZero(int),,False
