Function Name,State Variables Modified,Can Transfer Ether
Ownable(),owner,True
transferOwnership(address),"owner, owner",False
balanceOf(address),,False
"transfer(address,uint256)",,False
"allowance(address,address)",,False
"transferFrom(address,address,uint256)",,False
"approve(address,uint256)",,False
"transfer(address,uint256)",,True
balanceOf(address),,False
"transferFrom(address,address,uint256)","allowed, allowed, allowed",True
"approve(address,uint256)",allowed,True
"allowance(address,address)",allowed,False
"increaseApproval(address,uint)","allowed, allowed, allowed",True
"decreaseApproval(address,uint)","allowed, allowed, allowed, allowed",True
"mint(address,uint256)","totalSupply, totalSupply",False
finishMinting(),mintingFinished,False
CappedToken(uint256),cap,False
"mint(address,uint256)","totalSupply, cap",False
burn(uint256),"totalSupply, totalSupply",True
setReleaseAgent(address),releaseAgent,False
"setTransferAgent(address,bool)","transferAgents, state",True
releaseTokenTransfer(),released,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
BDXCoin(),decimals,True
RateOracle(),owner,True
setRate(uint),"owner, rate, lastUpdateTime",True
"Crowdsale(uint256,uint256,uint256,address,)","token, startTime, endTime, rate, wallet",False
function()externalpayable{buyTokens(msg.sender);}(),,True
buyTokens(address),,False
hasEnded(),endTime,False
finalize(),"isFinalized, isFinalized",False
RefundVault(address),"wallet, state",False
deposit(address),"state, deposited, deposited",False
close(),"state, state, wallet",True
enableRefunds(),"state, state",False
refund(address),"state, deposited, deposited",True
RefundableCrowdsale(uint256),"vault, wallet, goal",False
claimRefund(),"isFinalized, vault",True
goalReached(),"totalSalesEurCents, goal",False
BDXVault(address),tokenAddress,False
"credit(address,uint256)","creditedList, creditedList, creditedList, tokenAddress, token",True
"BDXCrowdsale(,,,,,,address,uint256,uint256,address,uint256,address,address,uint256)","owner, owner, icoStartTimes, icoEndTimes, icoRates, icoCaps, icoVestingTimes, icoVestingTokens, bizDevTokenAllocation, bizDevWalletAddress, marketingTokenAllocation, marketingWalletAddress, rateOracleAddress, preInvestorsTokenAllocation",False
function()externalpayable{require(contractInitialized);buyTokens(msg.sender);}(),contractInitialized,True
initializeContract(),"contractInitialized, preInvestorsTokenVaultAddress, token, token, bizDevWalletAddress, bizDevTokenAllocation, marketingWalletAddress, marketingTokenAllocation, preInvestorsTokenVaultAddress, preInvestorsTokenAllocation, bizDevWalletAddress, marketingWalletAddress, preInvestorsTokenVaultAddress, contractInitialized",False
vestTokens(),"isFinalized, nextVestingStage, icoVestingTimes, nextVestingStage, token, bizDevWalletAddress, icoVestingTokens, nextVestingStage, nextVestingStage, nextVestingStage",False
"allocateTokens(address,uint256,uint256,uint256,bool)","totalSalesEurCents, totalSalesEurCents, totalTokensByStage, totalTokensByStage, preInvestorsTokenVaultAddress, token",True
"allocateUnsoldTokens(address,uint256)","isFinalized, unsoldTokensBeneficiaries, unsoldTokensBeneficiaries, unsoldTokensBeneficiaries, token",True
buyTokens(address),"contractInitialized, rateOracleAddress, rate, MINIMUM_PURCHASE_EUR_CENT, rate, totalTokensByStage, rate, rate, totalTokensByStage, totalTokensByStage, directInvestors, directInvestorsCollection, directInvestors, directInvestors, totalSalesEurCents, totalSalesEurCents, token",True
ethToEurXRate(),rateOracleAddress,False
goalReached(),"totalSalesEurCents, goal",False
refundInvestors(),"isFinalized, refundingComplete, refundingIndex, directInvestorsCollection, refundingComplete, vault, directInvestorsCollection, refundingIndex, refundingIndex, refundingIndex",False
advanceEndTime(uint256),"isFinalized, endTime, endTime",False
getTokenRate(uint256),,False
getStageCap(uint256),"totalTokensByStage, totalTokensByStage, totalTokensByStage",False
getStage(uint256),"icoEndTimes, icoEndTimes, icoEndTimes",False
getCapByStage(uint256),icoCaps,False
getRateByStage(uint256),icoRates,False
