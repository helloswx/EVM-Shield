Function Name,State Variables Modified,Can Transfer Ether
"tokenFallback(address,uint,bytes)",,False
"constructor(,uint)","isOwner, isOwner, owners, required",False
function()publicpayable{}(),,False
addOwner(address),"isOwner, owners",False
removeOwner(address),"isOwner, owners, owners, owners, owners, owners, owners, required, owners, owners",False
"replaceOwner(address,address)","owners, owners, owners, isOwner, isOwner",False
changeRequirement(uint),required,False
"submitTransaction(address,uint,bytes)",,False
confirmTransaction(uint),confirmations,True
revokeConfirmation(uint),confirmations,True
executeTransaction(uint),transactions,True
isConfirmed(uint),"owners, confirmations, owners, required",False
getConfirmationCount(uint),"owners, confirmations, owners",False
"getTransactionCount(bool,bool)","transactionCount, transactions, transactions",False
getOwners(),owners,False
getConfirmations(uint),"owners, owners, confirmations, owners, owners",False
"getTransactionIds(uint,uint,bool,bool)","transactionCount, transactionCount, transactions, transactions",False
"tokenFallback(address,uint,bytes)",,False
getMaxProfit(address),,False
"gameTokenResolution(uint,address,uint,address,uint)",,False
"payJackpotToWinner(address,uint)",,False
"gamePayoutResolver(address,uint)",,False
isTokenBankroll(address),,False
getTokenBankrollAddressFromTier(uint8),,False
"tokenFallback(address,uint,bytes)",,False
"approve(address,uint)",,False
balanceOf(address),,False
implementsERC721(),,False
ownerOf(uint),,False
takeOwnership(uint),,False
totalSupply(),,False
"transferFrom(address,address,uint)",,False
"transfer(address,uint)",,False
constructor(address),"creator, BANKROLL, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, divCardRateToIndex, onSale, administrators, administrators, administrators, administrators, administrators",True
setBankroll(address),BANKROLL,False
"approve(address,uint)",divCardIndexToApproved,True
balanceOf(address),ownershipDivCardCount,False
"createDivCard(string,uint,uint)",BANKROLL,False
startCardSale(),onSale,False
getDivCard(uint),"divCards, divCardIndexToPrice, divCardIndexToOwner",False
implementsERC721(),,False
name(),NAME,False
ownerOf(uint),divCardIndexToOwner,False
purchase(uint),"divCardIndexToOwner, divCardIndexToPrice, divCards, divCardIndexToPrice, BANKROLL",True
priceOf(uint),divCardIndexToPrice,False
setCreator(address),creator,False
symbol(),SYMBOL,False
takeOwnership(uint),divCardIndexToOwner,True
totalSupply(),divCards,False
"transfer(address,uint)",,True
"transferFrom(address,address,uint)",,True
receiveDividends(uint),"divCardRateToIndex, divCardIndexToOwner, divCardIndexToOwner",True
"constructor(address,address)","bankrollAddress, administrators, administrators, administrators, administrators, administrators, administrators, administrators, administrators, administrators, validDividendRates_, validDividendRates_, validDividendRates_, validDividendRates_, validDividendRates_, validDividendRates_, validDividendRates_, userSelectedRate, bankrollAddress, userDividendRate, bankrollAddress",True
"buyAndSetDivPercentage(address,uint8,string)","icoPhase, regularPhase, icoPhase, icoMaxGasPrice, ethInvestedDuringICO, icoHardCap, validDividendRates_, userSelectedRate, userDividendRate",True
buy(address),"regularPhase, userSelectedRate",True
"buyAndTransfer(address,address)",,False
"buyAndTransfer(address,address,bytes)",,False
"buyAndTransfer(address,address,bytes,uint8)","regularPhase, frontTokenBalanceLedger_, userSelectedRate, frontTokenBalanceLedger_",True
"function()payablepublic{require(regularPhase);address_customerAddress=msg.sender;if(userSelectedRate[_customerAddress]){purchaseTokens(msg.value,0x0);}else{buyAndSetDivPercentage(0x0,20,""0x0"");}}()","regularPhase, userSelectedRate",True
reinvest(),"regularPhase, payoutsTo_, magnitude, referralBalance_, referralBalance_",True
exit(),"regularPhase, frontTokenBalanceLedger_",True
withdraw(address),"regularPhase, payoutsTo_, magnitude, referralBalance_, referralBalance_",True
sell(uint),"icoPhase, regularPhase, frontTokenBalanceLedger_, magnitude, magnitude, magnitude, currentEthInvested, currentEthInvested, currentEthInvested, currentEthInvested, magnitude, tokenSupply, tokenSupply, divTokenSupply, divTokenSupply, frontTokenBalanceLedger_, frontTokenBalanceLedger_, dividendTokenBalanceLedger_, dividendTokenBalanceLedger_, profitPerDivToken, magnitude, payoutsTo_, divTokenSupply, profitPerDivToken, profitPerDivToken, magnitude, divTokenSupply",True
"transfer(address,uint)","MIN_TOKEN_TRANSFER, frontTokenBalanceLedger_",True
"approve(address,uint)",allowed,True
"transferFrom(address,address,uint)","MIN_TOKEN_TRANSFER, frontTokenBalanceLedger_, allowed",True
"transferTo(address,address,uint,bytes)","MIN_TOKEN_TRANSFER, frontTokenBalanceLedger_, allowed, MIN_TOKEN_TRANSFER, frontTokenBalanceLedger_",True
totalSupply(),tokenSupply,False
publicStartRegularPhase(),"icoPhase, regularPhase",False
startICOPhase(),icoPhase,False
endICOPhase(),icoPhase,False
startRegularPhase(),"icoPhase, regularPhase",False
"setAdministrator(address,bool)",administrators,False
setStakingRequirement(uint),stakingRequirement,False
setName(string),name,False
setSymbol(string),symbol,False
changeBankroll(address),bankrollAddress,False
totalEthereumBalance(),,False
totalEthereumICOReceived(),ethInvestedDuringICO,False
getMyDividendRate(),"userSelectedRate, userDividendRate",True
getFrontEndTokenSupply(),tokenSupply,False
getDividendTokenSupply(),divTokenSupply,False
myFrontEndTokens(),,True
myDividendTokens(),,True
myReferralDividends(),,False
myDividends(bool),referralBalance_,True
"theDividendsOf(bool,address)",referralBalance_,False
getFrontEndTokenBalanceOf(address),frontTokenBalanceLedger_,False
balanceOf(address),,False
getDividendTokenBalanceOf(address),dividendTokenBalanceLedger_,False
dividendsOf(address),"profitPerDivToken, dividendTokenBalanceLedger_, payoutsTo_, magnitude",False
sellPrice(),"icoPhase, currentEthInvested, ethInvestedDuringICO, tokenPriceInitial_, magnitude",True
buyPrice(uint),"icoPhase, currentEthInvested, ethInvestedDuringICO, tokenPriceInitial_",False
calculateTokensReceived(uint),userDividendRate,True
calculateEthereumReceived(uint),"tokenSupply, magnitude",True
getUserAverageDividendRate(address),"magnitude, dividendTokenBalanceLedger_, frontTokenBalanceLedger_",False
getMyAverageDividendRate(),,True
ethereumToTokens_(uint),"MIN_ETH_BUYIN, icoPhase, tokenPriceInitial_, currentEthInvested, ethInvestedDuringICO, currentEthInvested, ethInvestedDuringICO, currentEthInvested, ethInvestedDuringICO, currentEthInvested, ethInvestedDuringICO, currentEthInvested, ethInvestedDuringICO, ethInvestedDuringICO, currentEthInvested, tokenPriceInitial_, tokenSupply, MULTIPLIER, MULTIPLIER, MULTIPLIER",False
tokensToEthereum_(uint),"MIN_TOKEN_SELL_AMOUNT, tokenSupply, tokensMintedDuringICO, tokenSupply, tokensMintedDuringICO, tokenSupply, tokensMintedDuringICO, tokenSupply, tokensMintedDuringICO, tokenSupply, tokensMintedDuringICO, tokenSupply, tokensMintedDuringICO, tokenPriceInitial_, tokenSupply, MULTIPLIER, tokenSupply, MULTIPLIER",False
injectEther(),,False
toPowerOfThreeHalves(uint),,False
toPowerOfTwoThirds(uint),,False
sqrt(uint),,False
cbrt(uint),,False
receiveDividends(),,False
"constructor(address,address)",,False
function()publicpayable{}(),,False
"tokenFallback(address,uint,bytes)",,False
getJackpotBalance(),"payOutDivisor, payOutDivisor",False
ownerSetPayOutDivisor(uint),payOutDivisor,False
ownerSetControllerAddress(address),,False
ownerWithdrawZth(address),,True
ownerWithdrawEth(address),,True
gamePayOutWinner(address),"payOutDivisor, payOutDivisor, payOutNumber, payOutNumber",True
"constructor(address,uint,string)",,False
getMaxProfit(),,True
ownerPauseGame(),,False
ownerResumeGame(),,False
ownerSetResolverPercentage(uint),,False
ownerSetControllerAddress(address),,False
ownerSetGameName(string),,False
getGameName(),,False
resolveExpiredBets(uint),,True
finishBet(),,True
"execute(address,uint,uint,bytes)",,False
"isBetValid(uint,uint,bytes)",,False
"constructor(address,uint,string)",,False
getLastSpinOutput(address),,False
"getSpinOutput(uint,uint,uint,address)",,False
"getSpinResults(uint,uint,uint,address)",,False
ownerSetJackpotAddress(address),jackpotHoldingContract,False
"execute(address,uint,uint,bytes)",,False
"isBetValid(uint,uint,bytes)",,False
