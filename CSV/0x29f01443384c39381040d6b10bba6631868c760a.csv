Function Name,State Variables Modified,Can Transfer Ether
"tokenFallback(address,uint256,bytes)",,False
"transfer(address,uint256)",,False
"transfer(address,uint256,bytes)",,False
burn(uint256),,False
setTokenSaleFinished(),,False
getAllowedAmountToContribute(address),,False
"AuctusTokenSale(uint256,uint256)","owner, softCap, endTime, saleWasSet, tokenSaleHalted",True
transferOwnership(address),owner,False
setTokenSaleHalt(bool),tokenSaleHalted,False
setSoftCap(uint256),"startTime, softCap",False
setEndSaleTime(uint256),"endTime, endTime",False
"tokenFallback(address,uint256,bytes)","auctusTokenAddress, saleWasSet",True
"function()payableopenSalepublic{uint256weiToInvest;uint256weiRemaining;(weiToInvest,weiRemaining)=getValueToInvest();require(weiToInvest>0);uint256tokensToReceive=weiToInvest.mul(basicPricePerEth);remainingTokens=remainingTokens.sub(tokensToReceive);weiRaised=weiRaised.add(weiToInvest);invested[msg.sender]=invested[msg.sender].add(weiToInvest);if(weiRemaining>0){msg.sender.transfer(weiRemaining);}assert(AuctusToken(auctusTokenAddress).transfer(msg.sender,tokensToReceive));emitBuy(msg.sender,tokensToReceive);}()","basicPricePerEth, remainingTokens, remainingTokens, weiRaised, weiRaised, invested, invested, auctusTokenAddress",True
revoke(),"invested, invested",True
finish(),"auctusTokenAddress, remainingTokens, remainingTokens, remainingTokens",True
