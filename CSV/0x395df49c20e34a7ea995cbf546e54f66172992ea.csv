Function Name,State Variables Modified,Can Transfer Ether
contribute(uint),,False
requestRN(uint),,False
getRN(uint),,False
getUncorrelatedRN(uint),,True
"createDispute(uint,bytes)",,False
arbitrationCost(bytes),,False
"appeal(uint,bytes)",,True
"appealCost(uint,bytes)",,False
appealPeriod(uint),,False
disputeStatus(uint),,False
currentRuling(uint),,False
"rule(uint,uint)",,False
"constructor(,bytes)","arbitrator, arbitratorExtraData",False
"rule(uint,uint)",,True
Controlled(),controller,True
changeController(address),controller,False
"receiveApproval(address,uint256,address,bytes)",,False
"MiniMeToken(address,address,uint,string,uint8,string,bool)","tokenFactory, name, decimals, symbol, parentToken, parentSnapShotBlock, transfersEnabled, creationBlock",True
"transfer(address,uint256)",transfersEnabled,True
"transferFrom(address,address,uint256)","controller, transfersEnabled",True
balanceOf(address),,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
"allowance(address,address)",,False
"approveAndCall(address,uint256,bytes)",,True
totalSupply(),,False
"balanceOfAt(address,uint)","parentToken, parentToken, parentSnapShotBlock",False
totalSupplyAt(uint),"parentToken, parentToken, parentSnapShotBlock",False
"createCloneToken(string,uint8,string,uint,bool)",tokenFactory,True
"generateTokens(address,uint)",,False
"destroyTokens(address,uint)",,False
enableTransfers(bool),transfersEnabled,True
function()publicpayable{require(isContract(controller));require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));}(),"controller, controller",True
claimTokens(address),"controller, controller, controller",True
"createCloneToken(address,uint,string,uint8,string,bool)",,True
"constructor(address,address,uint,string,uint8,string,bool)",,False
"approve(address,uint256)","transfersEnabled, controller, controller",True
proxyPayment(address),,False
"onTransfer(address,address,uint)",,False
"onApprove(address,address,uint)",,False
"createTree(,bytes32,uint)",,False
"set(,bytes32,uint,bytes32)",,False
"queryLeafs(,bytes32,uint,uint)",,False
"draw(,bytes32,uint)",,False
"stakeOf(,bytes32,bytes32)",,False
contribute(uint),reward,False
getRN(uint),"RN, randomNumber, RN, randomNumber, RN",False
saveRN(uint),"randomNumber, randomNumber, randomNumber, reward, reward",True
"constructor(address,,,uint,uint,bool,uint,uint,uint,uint,,uint)","governor, pinakion, RNGenerator, minStakingTime, maxDrawingTime, lastPhaseChange, courts, sortitionSumTrees",False
"executeGovernorProposal(address,uint,bytes)",,True
changeRNGenerator(),"RNGenerator, phase, RNBlock, RNGenerator, RNBlock",False
"createSubcourt(uint96,bool,uint,uint,uint,uint,,uint)","courts, courts, sortitionSumTrees, courts",False
"changeSubcourtMinStake(uint96,uint)","courts, courts, courts, courts, courts, courts",False
"changeSubcourtAlpha(uint96,uint)",courts,False
"changeSubcourtJurorFee(uint96,uint)",courts,False
"changeSubcourtJurorsForJump(uint96,uint)",courts,False
"changeSubcourtTimesPerPeriod(uint96,)",courts,False
passPhase(),"phase, lastPhaseChange, minStakingTime, disputesWithoutJurors, RNBlock, RNGenerator, RNBlock, phase, phase, RN, RNGenerator, RNBlock, RN, phase, phase, disputesWithoutJurors, lastPhaseChange, maxDrawingTime, phase, lastPhaseChange, phase",False
passPeriod(uint),"disputes, courts, courts, courts, courts, courts",False
"setStake(uint96,uint128)",,True
executeDelayedSetStakes(uint),"nextDelayedSetStake, lastDelayedSetStake, lastDelayedSetStake, nextDelayedSetStake, nextDelayedSetStake, nextDelayedSetStake, nextDelayedSetStake, delayedSetStakes, delayedSetStakes, nextDelayedSetStake",False
"drawJurors(uint,uint)","disputes, sortitionSumTrees, RN, jurors, disputesWithoutJurors",False
"commit(uint,,bytes32)",disputes,True
"vote(uint,,uint,uint)","disputes, courts",True
"execute(uint,uint,uint)","lockInsolventTransfers, disputes, pinakion, jurors, pinakion, pinakion, pinakion, jurors, pinakion, jurors, jurors, jurors, governor, pinakion, governor, lockInsolventTransfers",True
executeRuling(uint),disputes,False
"createDispute(uint,bytes)","disputes, disputes, courts, courts, courts, ALPHA_DIVISOR, disputesWithoutJurors",True
"appeal(uint,bytes)","disputes, courts, courts, courts, courts, courts, ALPHA_DIVISOR, disputesWithoutJurors",True
proxyPayment(address),,False
"onTransfer(address,address,uint)","lockInsolventTransfers, pinakion, jurors, jurors",False
"onApprove(address,address,uint)",,False
arbitrationCost(bytes),courts,False
"appealCost(uint,bytes)","disputes, courts, NON_PAYABLE_AMOUNT, courts, courts, courts",False
appealPeriod(uint),"disputes, courts",False
disputeStatus(uint),disputes,False
currentRuling(uint),disputes,False
getSubcourt(uint96),courts,False
"getVote(uint,uint,uint)",disputes,False
"getVoteCounter(uint,uint)",disputes,False
getDispute(uint),disputes,False
getJuror(address),jurors,False
"stakeOf(address,uint96)",sortitionSumTrees,False
