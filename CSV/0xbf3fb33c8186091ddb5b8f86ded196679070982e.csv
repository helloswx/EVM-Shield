Function Name,State Variables Modified,Can Transfer Ether
constructor(),owner,True
transferOwnership(address),newOwner,False
acceptOwnership(),"newOwner, owner, newOwner, owner, newOwner, newOwner",True
"receiveApproval(address,uint256,address,bytes)",,False
"constructor(uint256,string,string)","totalSupply, M, balanceOf, totalSupply, name, symbol",True
"transfer(address,uint256)",,True
"transferFrom(address,address,uint256)","balanceOf, allowed, allowed",True
"approve(address,uint)",allowed,True
"approveAndCall(address,uint256,bytes)",,True
burn(uint256),"balanceOf, balanceOf, totalSupply, totalSupply",True
"burnFrom(address,uint256)","balanceOf, balanceOf, allowed, allowed, totalSupply, totalSupply",True
"constructor(uint256,string,string)",,False
isContract(address),,False
enablePurchasing(),"owner, purchasingAllowed",True
disablePurchasing(),"owner, purchasingAllowed",True
enableSelling(),"owner, sellingAllowed",True
disableSelling(),"owner, sellingAllowed",True
"mintToken(address,uint256)","balanceOf, balanceOf, totalSupply, totalSupply",False
"freezeAccount(address,bool)",frozenAccount,False
"setPrices(uint256,uint256)","sellPrice, buyPrice",False
withdrawEther(uint256),"owner, owner",True
claimTokens(address),"owner, owner",True
function()publicpayable{require(msg.value>0);require(purchasingAllowed);uinttokens=(msg.value*M)/buyPrice;pendingWithdrawals[msg.sender]=pendingWithdrawals[msg.sender].add(tokens);}(),"purchasingAllowed, M, buyPrice, pendingWithdrawals, pendingWithdrawals",True
withdrawAdamcoins(),"purchasingAllowed, pendingWithdrawals, pendingWithdrawals",True
sell(uint256),"sellingAllowed, sellPrice, M",True
