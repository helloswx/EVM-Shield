Function Name,State Variables Modified,Can Transfer Ether
constructor(address),owner,False
nominateNewOwner(address),nominatedOwner,False
acceptOwnership(),"nominatedOwner, owner, nominatedOwner, owner, nominatedOwner, nominatedOwner",True
constructor(address),selfDestructBeneficiary,False
setSelfDestructBeneficiary(address),selfDestructBeneficiary,False
initiateSelfDestruct(),"initiationTime, selfDestructInitiated, SELFDESTRUCT_DELAY",False
terminateSelfDestruct(),"initiationTime, selfDestructInitiated",False
selfDestruct(),"selfDestructInitiated, initiationTime, SELFDESTRUCT_DELAY, selfDestructBeneficiary",False
constructor(address),,False
setPaused(bool),"paused, paused, paused, lastPauseTime, paused",False
"constructor(address,address)",associatedContract,False
setAssociatedContract(address),associatedContract,False
"constructor(address,address)",,False
"setAllowance(address,address,uint)",allowance,False
"setBalanceOf(address,uint)",balanceOf,False
constructor(address),,False
setTarget(),target,False
setUseDELEGATECALL(bool),useDELEGATECALL,False
"_emit(bytes,uint,bytes32,bytes32,bytes32,bytes32)",,True
"function()externalpayable{if(useDELEGATECALL){assembly{letfree_ptr:=mload(0x40)calldatacopy(free_ptr,0,calldatasize)letresult:=delegatecall(gas,sload(target_slot),free_ptr,calldatasize,0,0)returndatacopy(free_ptr,0,returndatasize)ifiszero(result){revert(free_ptr,returndatasize)}return(free_ptr,returndatasize)}}else{target.setMessageSender(msg.sender);assembly{letfree_ptr:=mload(0x40)calldatacopy(free_ptr,0,calldatasize)letresult:=call(gas,sload(target_slot),callvalue,free_ptr,calldatasize,0,0)returndatacopy(free_ptr,0,returndatasize)ifiszero(result){revert(free_ptr,returndatasize)}return(free_ptr,returndatasize)}}}()","useDELEGATECALL, target",True
"constructor(address,address)",proxy,False
setProxy(address),proxy,False
setMessageSender(address),,True
"constructor(address,,string,string,uint,address)","name, symbol, totalSupply, tokenState",False
"allowance(address,address)","tokenState, owner",False
balanceOf(address),tokenState,False
setTokenState(),tokenState,False
"approve(address,uint)",tokenState,True
"constructor(address,,string,string,uint,uint,address,address)","feeAuthority, transferFeeRate",True
setTransferFeeRate(uint),transferFeeRate,True
setFeeAuthority(address),feeAuthority,False
transferFeeIncurred(uint),transferFeeRate,True
transferPlusFee(uint),,True
amountReceived(uint),"UNIT, transferFeeRate",True
feePool(),"tokenState, FEE_ADDRESS",False
"withdrawFees(address,uint)","tokenState, FEE_ADDRESS, tokenState, FEE_ADDRESS, tokenState, tokenState, FEE_ADDRESS",False
donateToFeePool(uint),"tokenState, tokenState, tokenState, FEE_ADDRESS, tokenState, FEE_ADDRESS, FEE_ADDRESS",True
"constructor(address,,,uint,address)","frozen, FEE_ADDRESS, havven",False
setHavven(),havven,False
"transfer(address,uint)",frozen,True
"transferFrom(address,address,uint)",frozen,True
"transferSenderPaysFee(address,uint)",frozen,True
"transferFromSenderPaysFee(address,address,uint)",frozen,True
unfreezeAccount(address),"frozen, target, target, FEE_ADDRESS, frozen, target, target",False
"issue(address,uint)","tokenState, tokenState, totalSupply, totalSupply",False
"burn(address,uint)","tokenState, tokenState, totalSupply, totalSupply",False
constructor(uint),,False
"constructor(address,)",havven,False
setHavven(),havven,False
balanceOf(address),totalVestedAccountBalance,False
numVestingEntries(address),vestingSchedules,False
"getVestingScheduleEntry(address,uint)",vestingSchedules,False
"getVestingTime(address,uint)",,False
"getVestingQuantity(address,uint)",,False
getNextVestingIndex(address),,False
getNextVestingEntry(address),,False
getNextVestingTime(address),,False
getNextVestingQuantity(address),,False
withdrawHavvens(uint),"havven, havven",True
purgeAccount(address),"vestingSchedules, totalVestedBalance, totalVestedBalance, totalVestedAccountBalance, totalVestedAccountBalance",False
"appendVestingEntry(address,uint,uint)","totalVestedBalance, totalVestedBalance, totalVestedBalance, havven, vestingSchedules, totalVestedAccountBalance, totalVestedAccountBalance, totalVestedAccountBalance, vestingSchedules",False
"addVestingSchedule(address,,)",,False
vest(),"vestingSchedules, totalVestedBalance, totalVestedBalance, totalVestedAccountBalance, totalVestedAccountBalance, havven",True
"constructor(address,,address,address,uint,,)","oracle, price, lastPriceUpdateTime, feePeriodStartTime, lastFeePeriodStartTime, feePeriodDuration, isIssuer, feePeriodStartTime, lastFeePeriodStartTime, totalIssuanceData, totalIssuanceData, totalIssuanceData, isIssuer, nominsIssued, issuanceData, issuanceData, issuanceData",False
setNomin(),nomin,False
setEscrow(),escrow,False
setFeePeriodDuration(uint),feePeriodDuration,False
setOracle(address),oracle,False
setPriceStalePeriod(uint),priceStalePeriod,False
setIssuanceRatio(uint),issuanceRatio,False
"setIssuer(address,bool)",isIssuer,False
issuanceCurrentBalanceSum(address),issuanceData,False
issuanceLastAverageBalance(address),issuanceData,False
issuanceLastModified(address),issuanceData,False
totalIssuanceCurrentBalanceSum(),totalIssuanceData,False
totalIssuanceLastAverageBalance(),totalIssuanceData,False
totalIssuanceLastModified(),totalIssuanceData,False
"transfer(address,uint)",nominsIssued,True
"transferFrom(address,address,uint)",nominsIssued,True
withdrawFees(),"nomin, nominsIssued, nomin, hasWithdrawnFees, totalIssuanceData, issuanceData, lastFeesCollected, hasWithdrawnFees, nomin",True
recomputeLastAverageBalance(address),"nominsIssued, nomin, issuanceData",False
issueNomins(uint),"nomin, nominsIssued, nomin, nominsIssued",True
issueMaxNomins(),,False
burnNomins(uint),"nomin, nominsIssued, nomin, nominsIssued",True
rolloverFeePeriodIfElapsed(),"feePeriodStartTime, feePeriodDuration, lastFeesCollected, nomin, lastFeePeriodStartTime, feePeriodStartTime, feePeriodStartTime",False
maxIssuableNomins(address),"isIssuer, escrow, tokenState, escrow, issuanceRatio, tokenState, issuanceRatio",False
remainingIssuableNomins(address),nominsIssued,False
collateral(address),"tokenState, escrow, escrow",False
issuanceDraft(address),"nominsIssued, issuanceRatio",False
lockedCollateral(address),,False
unlockedCollateral(address),,False
transferableHavvens(address),balanceOf,False
HAVtoUSD(uint),price,False
USDtoHAV(uint),price,False
"updatePrice(uint,uint)","lastPriceUpdateTime, price, lastPriceUpdateTime",False
priceIsStale(),"lastPriceUpdateTime, priceStalePeriod",False
"constructor(address,address,,,address,uint,uint)","fundsWallet, havven, nomin, oracle, usdToEthPrice, usdToHavPrice, lastPriceUpdateTime",False
setFundsWallet(address),"fundsWallet, fundsWallet",False
setOracle(address),"oracle, oracle",False
setNomin(),nomin,False
setHavven(),havven,False
setPriceStalePeriod(uint),"priceStalePeriod, priceStalePeriod",False
"updatePrices(uint,uint,uint)","lastPriceUpdateTime, usdToEthPrice, usdToHavPrice, lastPriceUpdateTime, usdToEthPrice, usdToHavPrice, lastPriceUpdateTime",False
function()externalpayable{exchangeEtherForNomins();}(),,False
exchangeEtherForNomins(),"usdToEthPrice, fundsWallet, nomin",True
exchangeEtherForNominsAtRate(uint),usdToEthPrice,False
exchangeEtherForHavvens(),"fundsWallet, havven",True
"exchangeEtherForHavvensAtRate(uint,uint)","usdToEthPrice, usdToHavPrice",False
exchangeNominsForHavvens(uint),"nomin, havven",True
"exchangeNominsForHavvensAtRate(uint,uint)",usdToHavPrice,False
withdrawHavvens(uint),"havven, owner",True
withdrawNomins(uint),"nomin, owner",True
pricesAreStale(),"lastPriceUpdateTime, priceStalePeriod",False
havvensReceivedForNomins(uint),"nomin, usdToHavPrice",False
havvensReceivedForEther(uint),usdToEthPrice,False
nominsReceivedForEther(uint),"usdToEthPrice, nomin",False
